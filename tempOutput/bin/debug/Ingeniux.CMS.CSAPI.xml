<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ingeniux.CMS.CSAPI</name>
    </assembly>
    <members>
        <member name="P:Ingeniux.CMS.IArchiver.GroupSize">
            <summary>
            Gets/sets the number of "Archive" method to be called for archiver to considering archiving
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAuditEntry">
            <summary>
            Presents an entry in the Audit Trail system.
            This entry stores the information regarding what entity was modified, 
            which user worked on the entity, and what type of action was performed on that entity.
            </summary>
            <example>
            AuditEntry is retrieved from AuditTrail by its ID.
            <code language="C#">
            IAuditEntry entry = store.AuditTrail.Entry("AuditEntries/8321");
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.IAudit_User"/>
            <seealso cref="T:Ingeniux.CMS.IAudit_Entity"/>
            <seealso cref="M:Ingeniux.CMS.IAuditTrail.Entry(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IAuditEntry.Serialize">
            <summary>
            Returns the entry's XML presentation.
            </summary>
            <returns>The XML presentation of this audit entry.</returns>
            <example>
            The following is an example of a serialization result:
            <code language="xml">
            <![CDATA[
            <AuditEntry Time="20130815T10:31:03">
            	<User UserID="ingeniux\awang" Name="Arn Maeda" />
            	<Entity ID="x265" Name="Contact Us", Type="Ingeniux.CMS.Page" />
            	<Description>Create or Update</Description>
            </AuditEntry>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IAuditEntry.Time">
            <summary>
            Gets the time of this entry.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAuditEntry.User">
            <summary>
            Gets the user who performs the action.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAuditEntry.ActionDescription">
            <summary>
            Gets the description of the action performed on the entity.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAuditEntry.Entity">
            <summary>
            Gets the entity on which the action was performed.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAuditTrail">
            <summary>
            Represents the Audit Trail system. This system allows you to retrieve audit entries and add new entries.
            The Audit Trail system automatically creates entries after entities are created, updated, or deleted in the content store.
            </summary>
            <remarks>
            <para>
            The Audit Trail interface is only created once per <see cref="T:Ingeniux.CMS.IContentStore">ContentStore</see> instance. 
            It is not controlled within any UserSession, and its updates aren't involved in any transactions.
            </para>
            <para>
            The Audit Trail interface doesn't allow for removal of entries, 
            but it does perform automatic archives based on its <see cref="T:Ingeniux.CMS.IAuditTrailSettings">settings</see>.
            </para>
            </remarks>
            <example>
            The Audit Trail instance is retrieved directly from the ContentStore.
            <code language="C#">
            IAuditTrail auditTrail = store.AuditTrail;
            </code>
            </example>
            <seealso cref="P:Ingeniux.CMS.IContentStore.AuditTrail"/>
            <seealso cref="T:Ingeniux.CMS.IAuditEntry"/>
            <seealso cref="T:Ingeniux.CMS.IAuditTrailSettings"/>
        </member>
        <member name="M:Ingeniux.CMS.IAuditTrail.Add``1(Ingeniux.CMS.IUser,``0,System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IAuditEntry">Audit Entry</see> for an entity update.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="user">User performing the action</param>
            <param name="entity">Entity being modified</param>
            <param name="actionDescription">Description of action</param>
        </member>
        <member name="M:Ingeniux.CMS.IAuditTrail.Entries(System.Int32@,Ingeniux.CMS.IUser,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Retrieves audit entries in a paginated fashion.
            </summary>
            <param name="count">Output total count of audit entries</param>
            <param name="user">Filtering operating user</param>
            <param name="startTime">Lower end of the time range for audit entries</param>
            <param name="endTime">Upper end of the time range for audit entries</param>
            <param name="pageSize">Number of entries to return; if not provided, returns all entries</param>
            <param name="startIndex">Starting index of entries; if not provided, starts from first entry</param>
            <returns>Collection of audit entries</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAuditTrail.EntityUpdateEntries``1(System.Int32@,``0,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Retrieves audit entries that record entity updates in a paginated fashion.
            </summary>
            <param name="count">Outputs total count of audit entries</param>
            <param name="user">Filtering operating user</param>
            <param name="startTime">Lower and of the time range for audit entries</param>
            <param name="endTime">Upper end of the time range for audit entries</param>
            <param name="pageSize">Number of entries to return; if not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries; if not provided, start from first entry.</param>
            <returns>Collection of audit entries</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAuditTrail.Entry(System.String)">
            <summary>
            Retrieves a specific audit entry by its entity ID.
            </summary>
            <param name="id">Audit trail ID</param>
            <returns>Audit trail with matching ID; if it doesn't exist, returns null.</returns>
            <example>
            <code language="C#">
            IAuditEntry entry = auditTrail.Entry("AuditEntries/8321");
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrail.Settings">
            <summary>
            Gets the settings of the Audit Trail system.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAuditTrailSettings">
            <summary>
            Represents the settings of <see cref="!:Ineniux.CMS.AuditTrail">Audit Trail</see> and contains its archive status.
            </summary>
            <example>
            Audit Trail settings is retrieved from the AuditTrail instance.
            <code language="C#">
            IAuditTrailSettings settings = store.AuditTrail.Settings;
            </code>
            </example>
            <seealso cref="P:Ingeniux.CMS.IAuditTrail.Settings"/>
        </member>
        <member name="M:Ingeniux.CMS.IAuditTrailSettings.SaveChanges">
            <summary>
            Saves archive setting changes to the <see cref="T:Ingeniux.CMS.IContentStore">ContentStore</see>.
            </summary>
            <remarks>Because AuditTrail is not tracked by <see cref="T:Ingeniux.CMS.IUserSession">UserSession</see>, it must be saved manually.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveDirectory">
            <summary>
            Gets and sets the directory to archive.
            </summary>
            <remarks>When value of the setter is empty or doesn't exist as a directory, it throws <see cref="T:System.IO.IOException"/></remarks>
            <exception cref="T:System.IO.IOException">Directory to set to the property is empty or doesn't exist.</exception>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveType">
            <summary>
            Gets and sets how to archive—either by time period or by entry count.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveMaxCount">
            <summary>
            Gets and sets the maxmimum number of entries required for archiving to begin. By default, this number is 3000.
            </summary>
            <remarks>Only applies when <see cref="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveType"/> is set to 
            <see cref="F:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType.BySize"/>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.ArchivePeriodUnit">
            <summary>
            Gets and sets the period when the archive is performed. The default value is month.
            </summary>
            <remarks>Only applies when <see cref="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveType"/> is set to 
            <see cref="F:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType.ByPeriod"/>. It will make archiving ignore entries count.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.ArchivePeriodCount">
            <summary>
            Gets and sets the number of periods archived. The default value is 1. 
            </summary>
            <remarks>Only applies when <see cref="P:Ingeniux.CMS.IAuditTrailSettings.ArchiveType"/> is set to 
            <see cref="F:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType.ByPeriod"/>. Makes archiving ignore entry count.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.LastArchived">
            <summary>
            Gets the time of the most recent archive.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAuditTrailSettings.Archiving">
            <summary>
            Finds out if archiving is currently being performed.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAudit_Entity">
            <summary>
            Represents an entity within an audit entry. This interface captures the most fundamental information regarding the entity that is involved in the action being tracked.
            </summary>
            <example>
            Audit Entity is a property of <see cref="T:Ingeniux.CMS.IAuditEntry">IAuditEntry</see>.
            <code language="C#">
            IAudit_Entity entity = auditEntry.Entity;
            </code>
            </example>
            <seealso cref="P:Ingeniux.CMS.IAuditEntry.Entity"/>
        </member>
        <member name="P:Ingeniux.CMS.IAudit_Entity.Id">
            <summary>
            Gets the entity ID
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAudit_Entity.Type">
            <summary>
            Gets the entity full type name
            </summary>
            <example>
            string typeName = auditEntity.Type;
            Console.WriteLine(typeName);
            <![CDATA[
            //output: Ingeniux.CMS.Page
            ]]>
            </example>
        </member>
        <member name="T:Ingeniux.CMS.IAudit_User">
            <summary>
            Represents the user that performs the action on the entity tracked in AuditEntry.
            </summary>
            <example>
            Audit_User is a property of <see cref="T:Ingeniux.CMS.IAuditEntry">IAuditEntry</see>.
            <code language="C#">
            IAudit_User auditUser = auditEntry.User;
            </code>
            </example>
            <seealso cref="P:Ingeniux.CMS.IAuditEntry.User"/>
        </member>
        <member name="P:Ingeniux.CMS.IAudit_User.Id">
            <summary>
            Gets the user's entity ID
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAudit_User.UserId">
            <summary>
            Gets the user's UserID.
            </summary>
            <remarks>This is the ID that is used to select a user within the CSAPI; it is not the entity ID.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAudit_User.Name">
            <summary>
            Gets the user's full name
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IContentFreezeState">
            <summary>
            Represents the state of Content Freeze, which only allows a limited number of users to open read/write sessions.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IContentFreezeState.Change(Ingeniux.CMS.IUserSession,System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Changes the end time and allowed user for the content freeze state. Only administrators specified as allowed users can do this.
            </summary>
            <param name="session">The session that will perform this change</param>
            <param name="newEndingTime">New end time of content freeze; if null, the freeze never ends</param>
            <param name="newAllowedUserIds">Users allowed to open sessions</param>
            <param name="message">The message of the content freeze (optional)</param>
        </member>
        <member name="M:Ingeniux.CMS.IContentFreezeState.AllowUser(System.String)">
            <summary>
            Checkes if the given user is allowed to make change to the content freeze state.
            </summary>
            <param name="userId">ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> to make changes</param>
            <returns>True if user is allowed to make changes, false otherwise.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.InitiationUserId">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> that started the content freeze
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.LastChangeUserId">
            <summary>
            Gets the ID of the most recent <see cref="T:Ingeniux.CMS.IUser">User</see> that updated the content freeze state.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IContentFreezeState.LastChangeTime"/>
            <remarks>
            <para>The initiation user is the last changed user before any other user making changes.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.LastChangeTime">
            <summary>
            The time when content freeze state was last udpated.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IContentFreezeState.LastChangeUserId"/>
            <remarks>
            <para>The creation time is the last change time before other user making changes.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.StartingTime">
            <summary>
            Gets the starting time of the content freeze. If set to null, content freeze will never start.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.EndingTime">
            <summary>
            Gets the ending time of the content freeze. If set to null, content freeze will be indefinite until the state object is removed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.AllowedOperatingUserIds">
            <summary>
            Gets the ID of <see cref="T:Ingeniux.CMS.IUser">Users</see> that are allowed to open sessions.
            Among this list, only administrators are allowed to change the state itself.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.Message">
            <summary>
            Gets the message of the content freeze.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentFreezeState.InEffect">
            <summary>
            Gets whether the content freeze is in effect.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IContentStoreMetaData">
            <summary>
            Contains ContentStore metadata. These are the basic settings of a CMS site.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.SiteUrl">
            <summary>
            Gets and sets the URL of the <see cref="T:Ingeniux.CMS.ISite">Site</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.ServerName">
            <summary>
            Gets and sets the ServerName, which is the value returned from the ServerVariable SERVER_NAME.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.MediaHost">
            <summary>
            Gets and sets the MediaHost, which is the computer that hosts the images folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.MediaHostModule">
            <summary>
            Gets and sets the MediaHostModule, which is the module on the MediaHost to which files are copied.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.HttpsOn">
            <summary>
            Gets and sets whether HTTPS is enabled.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.ServerPort">
            <summary>
            Gets and sets the server port.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.TaxonomyAssociationsUpdated">
            <summary>
            Gets the time of the most recent taxonomy associations update.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.ReferenceMappingUpdated">
            <summary>
            Gets the time of most recent references mapping update.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.GlobalExportsUpdated">
            <summary>
            Gets the time of the most recent global exports update.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStoreMetaData.PublishingTargetsUpdated">
            <summary>
            Gets the time of the most recent publishing targets update.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ContentStore">
            <summary>
            The entry object to Ingeniux Content Store API. It is in charge of creating all communication sessions with the content store.
            This object should only be created once per app domain.
            </summary>
            <example>
            <code language="C#">
            IContentStore contentStore = new ContentStore("http://cms.yourfirm.com/testsite1/contentstore", "d:\IGX_Sites\cms\90\testsite1\App_Data\xml");	
            </code>
            </example>
            <remarks>For detailed members information, please refers to the interfaces <see cref="T:Ingeniux.CMS.IContentStore">IContentStore</see> and <see cref="!:Ingeniux.CMS.IUserInit">IUserInit</see>.</remarks>
            <seealso cref="T:Ingeniux.CMS.IContentStore"/>
            <seealso cref="T:Ingeniux.CMS.IUsersInit"/>
        </member>
        <member name="T:Ingeniux.CMS.IContentStore">
            <summary>
            Represents the object that hosts the content of a CMS instance. There should be only one instance of this object created per App Domain.
            For a CMS Site, this object is always stored as an application variable that persists throughout the CMS application's lifecycle.
            Any integration work at the CSAPI level should only use one ContentStore instance per App Domain.
            </summary>
            <remarks>
            Please refers to <conceptualLink target="b6d53322-ff95-4cf5-9512-b7ef7e931e07" /> for details of how to retrieve a ContentStore instance from ASP.NET application variables.
            </remarks>
        </member>
        <member name="T:Ingeniux.CMS.IContentStoreEvents">
            <summary>
            Content store events: The content store subscribes to all the events below and relays event firings to the corresponding managers or objects.
            </summary>
            <remarks>
            Content store events are a collection of events fired by different managers. Managers include their own share of events.
            The content store subscribes to the events fired by each manager and fires a corresponding event with the same name.
            Therefore, subscribing to content store events also subscribes to all manager events.
            </remarks>
        </member>
        <member name="T:Ingeniux.CMS.IEntityEvents">
            <summary>
            Represents the collection of <see cref="T:Ingeniux.CMS.IEntity">Entity</see> events.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IEntityEvents.BeforeEntitySave">
            <summary>
            This event is fired before any <see cref="T:Ingeniux.CMS.IEntity">Entity</see> object is about to be saved.
            </summary>
            <remarks>This event covers all entity objects, including pages, users, workflows, and publishing targets.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IEntityEvents.AfterEntitySave">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IEntity">Entity</see> object is saved.
            </summary>
            <remarks>This event will covers all entity objects, including pages, users, workflows, and publishing targets. This event is fired when the object is saved to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingTargetEvents">
            <summary>
            Represent the collection of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> events.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublishingTargetMarkForPublishChange">
            <summary>
            This event is fired before any <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> is marked for publish, unmarked for publish, or has its marking version changed.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTargetEvents.AfterPublishingTargetMarkForPublishChange">
            <summary>
            This event is fired after any <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> is marked for publish, unmarked for publish, or has its marking version changed.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublish">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> is submitted.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTargetEvents.Published">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> is completed.
            </summary>
            <remarks>This event is fired in the background publishing thread.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingTaskEvents">
            <summary>
            Represents the collection of <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> events
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTaskEvents.BeginPublish">
            <summary>
            This event is fired when a publish starts.
            </summary>
            <remarks>This event is not fired when a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> is submited; it's fired when the <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> actually starts.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTaskEvents.PublishComplete">
            <summary>
            This event is fired when a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> finishes executing.
            </summary>
            <remarks>This event is fired at the same time as a publish event, but it is for a different purpose.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTaskEvents.PublishStepAdvanced">
            <summary>
            This event is fired when <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> advances to next step (e.g., when a publish task finishes copying images).
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTaskEvents.PublishStepUpdated">
            <summary>
            This event is fired when a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> finishes publishing one <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPublishingTaskEvents.PublishingErrorOccurred">
            <summary>
            This event is fired when any error occurrs during <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> execution.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPageEvents">
            <summary>
            Represents the collection of Page events.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageCheckOut">
            <summary>
            This event is fired before a page is checked out.
            </summary>
            <remarks>If the check-out is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageCheckOut">
            <summary>
            This event is fired after a page is checked out.
            </summary>
            <remarks>If the check-out is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageCheckIn">
            <summary>
            This event is fired before a page is checked in.
            </summary>
            <remarks>If the check-in is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageCheckIn">
            <summary>
            This event is fired after a page is checked in.
            </summary>
            <remarks>If the check-in is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageUndoCheckOut">
            <summary>
            This event is fired before a page undo check-out.
            </summary>
            <remarks>If the operation is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageUndoCheckOut">
            <summary>
            This event is fired after a page undo check-out.
            </summary>
            <remarks>If the operation is recursive, this event only fires for the root page.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageRollback">
            <summary>
            This event is fired before a page is rolled back to previous version.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageRollback">
            <summary>
            This event is fired after a page is rolled back.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.PageRenamed">
            <summary>
            This event is fired after a page is renamed.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageAssign">
            <summary>
            This event is fired before page is assigned.
            </summary>
            <remarks>This event fires on every assigned page if the operation is done recursively.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageAssign">
            <summary>
            This event is fired after page is assigned.
            </summary>
            <remarks>This event fires on every assigned page if the operation is done recursively.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.BeforePageMarkForPublishChange">
            <summary>
            This event is fired before a page has any changes marked for publish.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IPageEvents.AfterPageMarkForPublishChange">
            <summary>
            This event is fired after a page had marked-for-publish changes applied to it.
            </summary>
            <remarks>This event is fired before changes are saved to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.ISiteEvents">
            <summary>
            Represents the collection of Site object events.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.PageCreated">
            <summary>
            This event is fired when a new <see cref="T:Ingeniux.CMS.IPage">Page</see> is created.
            </summary>
            <remarks>The event fires when a page is created within session, not when it is actually saved to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforePageDelete">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IPage">Page</see> is moved to <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterPageDelete">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IPage">Page</see> is removed.
            </summary>
            <remarks>The event fires when a Page is deleted within session, not when it is actually deleted from the Content Store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforePageMove">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IPage">Page</see> is moved.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterPageMove">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IPage">Page</see> is moved.
            </summary>
            <remarks>Please note the event fires when a Page is moved within session, not when it is actually saved in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforePageCopy">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IPage">Page</see> to be copied.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterPageCopy">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IPage">Page</see> is copied.
            </summary>
            <remarks>The event fires when a Page is copied within session, not when it is actually saved in the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforeEmptyRecycleFolder">
            <summary>
            This event is fired before emptying the <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterEmptyRecycleFolder">
            <summary>
            This event is fired after <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see> is emptied. 
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforeCrossLocaleCopy">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IPage">Page</see>  is copied across <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Roots</see>.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterCrossLocaleCopy">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IPage">Page</see>  is copied across <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Roots</see>.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.BeforeRegionRootCopy">
            <summary>
            This event is fired before a <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root</see> is copied.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ISiteEvents.AfterRegionRootCopy">
            <summary>
            This event is fired after a <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root</see> is copied.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.ITaxonomyEvents">
            <summary>
            Represents the collection of events triggered by the Taxonomy system
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ITaxonomyEvents.CategoryCreated">
            <summary>
            This event is fired when a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> is created.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ITaxonomyEvents.BeforeCategoryDelete">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> is deleted.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ITaxonomyEvents.AfterCategoryDelete">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> is deleted.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IUserEvents">
            <summary>
            Represents the collection of events triggered by <see cref="T:Ingeniux.CMS.IUser">User</see> objects.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IUserEvents.UserCreated">
            <summary>
            This event is fired when a <see cref="T:Ingeniux.CMS.IUser">User</see> is created.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IUserEvents.BeforeUserDelete">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IUser">User</see> is deleted.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IUserEvents.AfterUserDelete">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IUser">User</see> is deleted.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IUserGroupEvents">
            <summary>
            Represents the collection of events triggered by <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> objects.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IUserGroupEvents.UserGroupCreated">
            <summary>
            This event is fired when a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> is created.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.IUserGroupEvents.BeforeUserGroupDelete">
            <summary>
            This event is fired before a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> is deleted.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IUserGroupEvents.AfterUserGroupDelete">
            <summary>
            This event is fired after a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> is deleted.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflowTransitionEvents">
            <summary>
            Represents the collection of events fired during <see cref="T:Ingeniux.CMS.ITransition">Transitions in Workflow</see>
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IWorkflowTransitionEvents.BeforeWorkflowAdvance">
            <summary>
            Called before a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> occurs.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.IWorkflowTransitionEvents.AfterWorkflowAdvance">
            <summary>
            Called after all actions are executed and <see cref="T:Ingeniux.CMS.ITransition">Transition</see> has occured.
            Not called on a <see cref="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_BRIDGE">Bridge</see> action.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ICategoryEvents">
            <summary>
            Represents the collections of CategoryNode events.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ICategoryEvents.CategoryRenamed">
            <summary>
            This event is fired when a category is renamed.
            </summary>
            <remarks>This event is fired before changes are applied to the content store.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.GetTinyMcePossibleSettings">
            <summary>
            Gets the all TinyMCE settings candidates.
            /// </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.LastIndexTimestamp(System.String)">
            <summary>
            Returns the last time a given index was indexed.
            </summary>
            <param name="indexName">Index name to be queried</param>
            <returns>Last time the given index was indexed</returns>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.IsStale(System.String)">
            <summary>
            Returns whether a given index is stale.
            </summary>
            <param name="indexName">Index name to be queried</param>
            <returns>True if the index is stale or not found</returns>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.StopIndexing">
            <summary>
            Stops indexing on the document store once the current indexing batch is finished.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.StartIndexing">
            <summary>
            Starts indexing on the document store.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)">
            <summary>
            Opens a read-only session. This session doesn't track changes to objects that were retrieved within this session, nor does it track created or deleted objects.
            It is not in charge of saving changes, only for reading.
            </summary>
            <param name="user">The user to open the session.</param>
            <returns>The read-only session.</returns>
            <remarks>This session throws an error upon disposal, when any of the objects loaded within it changes, or when trying to add or remove objects.</remarks>
            <example>
            <code language="C#">
            IReadonlyUser currentUser = store.GetStartingUser(@"yourfirm\youruserid");
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
                    ......
            }
            </code>
            </example>
            <seealso cref="M:Ingeniux.CMS.IContentStore.OpenWriteSession(Ingeniux.CMS.IReadonlyUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.OpenWriteSession(Ingeniux.CMS.IReadonlyUser)">
            <summary>
            Opens a read/write session. This session automatically tracks changes made to any objects that were retrieved within this session.
            It also tracks the newly created and to-be-deleted objects. All saves occur when the session is disposed.
            If any exceptions occurred before the session is closed, no changes are applied.
            This system makes it easy to perform transactional changes and prevents any partial changes due to errors before the session is disposed.
            </summary>
            <param name="user">The user to open the session. All changes must occur via this user account.</param>
            <returns>The read/write session.</returns>
            <remarks>The best way to open a session is to use the "using" statement, ensuring it is always disposed properly. If not, make sure to manually dispose the instance.</remarks>
            <example>
            <code language="C#">
            IReadonlyUser currentUser = store.GetStartingUser(@"yourfirm\youruserid");
            using (IUserSession session = store.OpenWriteSession(currentUser))
            {
                    ......
            }
            </code>
            </example>
            <seealso cref="M:Ingeniux.CMS.IContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.GetStartingUser(System.String,System.Net.IPAddress)">
            <summary>
            Gets a starting User object to open a session.
            </summary>
            <remarks>It is good idea to keep this object around, since all session openings need a starting user, and retrieving it every time is will waste of bandwidth.</remarks>
            <param name="userId">The unique ID of the user to retrieve</param>
            <exception cref="T:System.IO.InvalidDataException">User doesn't exist in ContentStore.</exception>
            <returns>The read-only User object. This User object is only for creating sessions; you cannot make changes to this object.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.GetAttachment(System.String)">
            <summary>
            Retrieves a binary attachment from the ContentStore.
            </summary>
            <remarks>Binary attachments are not indexed in the ContentStore and don't require a session to retrieve.</remarks>
            <param name="id">Unique ID of the attachment binary to retrieve.</param>
            <returns>Retrieved attachment. Null if attachment doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.PutAttachment(Ingeniux.CMS.IContentAttachment)">
            <summary>
            Saves an attachment to the ContentStore.
            </summary>
            <remarks>Binary attachment saving doesn't require a session and therefore is not protected by transactions.</remarks>
            <param name="attachment">The attachment to save to the ContentStore</param>
        </member>
        <member name="M:Ingeniux.CMS.IContentStore.RemoveAttachment(System.String)">
            <summary>
            Removes an attachment from the ContentStore.
            </summary>
            <remarks>
            <para>The attachment may or may not exist for the method to be called. </para>
            <para>Binary attachment saving doesn't require a session and therefore is not protected by transactions.</para>
            </remarks>
            <param name="attachmentId">Unique ID of the attachment to remove</param>
        </member>
        <member name="P:Ingeniux.CMS.IContentStore.AuditTrail">
            <summary>
            Gets the AuditTrail object.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStore.ServerGuid">
            <summary>
            Gets the unique IDs of the web application instance. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IContentStore.XmlDirectoryPath">
            <summary>
            Gets the XML directory path of the ContentStore.
            </summary>
            <remarks>XML directory is a place to store assets and published content. It is stored in the App_Data directory for the CMS site.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IContentStore.Logger">
            <summary>
            Gets the logger of CSAPI. With this object, integraters can directly write to the CMS design-time log.
            </summary>
            <remarks>Unlike previous versions of the CMS, the logs are written to App_Data/DesignTimeLogs directory, where they are automatically archived.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUsersInit.CreateAdministratorGroup">
            <summary>
            This method must be explicitly implemented. It creates the Administrators group. Regardless of how many times it's called, it should only create one user group.
            </summary>
            <param name="adminEmail">Administrator email</param>
            <returns>Created administrators group</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUsersInit.CreateAdministrator(System.String,System.String,System.String)">
            <summary>
            This method must be explicitly implemented. It allows you to add a user without adding an operating user,
            thus not creating an audit trail. Use this method to create the first user during site setup.
            </summary>
            <param name="userId">User ID, required</param>
            <param name="name">User name, optional, if omit, same as User ID</param>
            <param name="userEmail">User email, optional</param>
            <returns>The created user.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ContentStore class, connecting to a content store via HTTP.
            </summary>
            <param name="connectionString">The connection string of Content Store service or web application. Must be an absolute URL.</param>
            <param name="xmlPath">The location of the XML directory</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.#ctor(System.String,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the ContentStore class, connecting to a content store via an embedded client.
            </summary>
            <param name="xmlPath">The location of the XML directory</param>
            <param name="dataDir">The directory where the content store's data resides. If left to the default value, it is the Databases directory under the XML directory.</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.#ctor">
            <summary>
            Initializes a new instance of the ContentStore class. Connection string and XML directory information are retrieved from the application configuration file (web.config or app.config).
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.GetNextPageID">
            <summary>
            Retrieves the next available page xid. 
            </summary>
            <remarks>This method will increment the next available page xid, so use it only when necessary</remarks>
            <returns>Page xid in the format of x123</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.GetTinyMcePossibleSettings">
            <summary>
            Gets the tinymce settings for html editor
            </summary>
            <returns>Tinymce settings object</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.StopIndexing">
            <summary>
            Stop indexing on the Document Store once the current indexing batch is finished.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.StartIndexing">
            <summary>
            Start indexing on the Document Store.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.IndexCount">
            <summary>
            Get the number of stale indexes in the DB
            </summary>
            <param name="count">set to the total number of indexes</param>
            <returns>Number of stale indexes</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.StaleIndexes">
            <summary>
            Get the number of stale indexes in the DB
            </summary>
            <param name="count">set to the total number of indexes</param>
            <returns>Number of stale indexes</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.OpenWriteSession(Ingeniux.CMS.IReadonlyUser)">
            <summary>
            Opens a read/write session. This session will automatically track changes made to any objects that were retrieved within this session.
            It will also track the newly created and to be deleted objects. All saves are done when the session is disposed.
            If any exceptions occurred in the middle before the session is closed, none of the saves will happen.
            This system make it easy to perform transactional changes, prevently any partial changes due to errors in the middle.
            </summary>
            <param name="user">The user to open the session. All changes will be done via this user account.</param>
            <returns>The read/write session.</returns>
            <remarks>The best way to open a session is to use the "using" statement, ensure it is always disposed properly. If not, make sure to manually dispose the instance.</remarks>
            <example>
            <code language="C#">
            IReadonlyUser currentUser = store.GetStartingUser(@"yourfirm\youruserid");
            using (IUserSession session = store.OpenWriteSession(currentUser))
            {
                    ......
            }
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)">
            <summary>
            Opens a readonly session. This session will not track any changes to objects that were retrieved within this session, nor will it track any created or deleted objects.
            It is not in charge of saving changes, only for reading.
            </summary>
            <param name="user">The user to open the session.</param>
            <returns>The readonly session</returns>
            <remarks>This session will throw error upon disposal, when any of the objects loaded within is changes, or when trying to add or remove objects.</remarks>
            <example>
            <code language="C#">
            IReadonlyUser currentUser = store.GetStartingUser(@"yourfirm\youruserid");
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
                    ......
            }
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.parseDefaultTinyMceData(System.String)">
            <summary>
            Parse the default tinymce data,
            </summary>
            <param name="xmlPath">The path to the xml directory of the site</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.PrepairForMigration">
            <summary>
            Sets the Database to a low memory state for migration
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.SuppressAudit(System.Boolean)">
            <summary>
            Turns on or off the Audit Trail
            </summary>
            <param name="suppress">True to disable audit entries, false to enable</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.GetAttachment(System.String)">
            <summary>
            Retrieves a binary attachment from ContentStore.
            </summary>
            <remarks>Binary attachments are not indexed in the content store, and doesn't require a session to retrieve.</remarks>
            <param name="id">Unique Id of the attachment binary to retrieve</param>
            <returns>Retrieve the attachment. Will be null if attachment doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.PutAttachment(Ingeniux.CMS.IContentAttachment)">
            <summary>
            Saves a attachment to ContentStore.
            </summary>
            <remarks>Binary attachment saving doesn't require a session, therefore will not be protected by transactions.</remarks>
            <param name="attachment">The attachment to save into ContentStore</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.RemoveAttachment(System.String)">
            <summary>
            Remove an attachment from content store.
            </summary>
            <remarks>The attachment may or may not exist for the method to be called.</remarks>
            <param name="attachmentId">Unique Id of the attachment to remove</param>
        </member>
        <member name="M:Ingeniux.CMS.ContentStore.GetStartingUser(System.String,System.Net.IPAddress)">
            <summary>
            Gets a starting user object to open a session.
            </summary>
            <remarks>It is good idea to keep this object around, since all session openings need a starting user, and retrieving it everytime is will waste of bandwidth.</remarks>
            <param name="userId">Unique Id of the user to retrieve</param>
            <exception cref="T:System.IO.InvalidDataException">User doesn't exist in content store</exception>
            <returns>The readonly user object. Please note with this object you can create write sessions, you just cannot make changes to this object.</returns>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.Logger">
            <summary>
            Gets the logger of the ContentStore. 
            </summary>
            <remarks>Use the method if you want to get the logger to write custom log entries beyond the default logging the CSAPI carries out.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.XmlDirectoryPath">
            <summary>
            Gets the full physical location of xml directory
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.ServerGuid">
            <summary>
            Get the unique id of the content store server
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.AuditTrail">
            <summary>
            Gets the audit trail object
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.Archiver">
            <summary>
            Gets the archiver object
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ContentStore.SiteVersion">
            <summary>
            Gets the version of current API assemblies
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePublishingTargetMarkForPublishChange">
            <summary>
            This event is fired before any publishing target mark/change marking version/unmark pages to publish
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPublishingTargetMarkForPublishChange">
            <summary>
            This event is fired after any publishing target mark/change marking version/unmark pages to publish
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePublish">
            <summary>
            This event is fired before a publish is submitted
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.Published">
            <summary>
            This event is fired after a publish is completed.
            </summary>
            <remarks>This event is fired in the background publishing thread</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeginPublish">
            <summary>
            This event is fired when a publish starts
            </summary>
            <remarks>This event is not fired when publishing is submited, it fired when the publish task actually starts</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PublishStepAdvanced">
            <summary>
            This event is fired when publish task advance to next step, e.g. when publish task finished copying images
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PublishStepUpdated">
            <summary>
            This event is fired when publish task finished publishing one page
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PublishingErrorOccurred">
            <summary>
            This event is fired when any error occurred during publish task execution
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageCheckOut">
            <summary>
            This event is fired before a page checking out
            </summary>
            <remarks>Please note if the check-out is recursive, this event will only fire for the root page</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageCheckOut">
            <summary>
            This event is fired after a page being checked out
            </summary>
            <remarks>Please note if the check-out is recursive, this event will only fire for the root page</remarks>/// 
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageCheckIn">
            <summary>
            This event is fired before a page checking in
            </summary>
            <remarks>Please note if the check-in is recursive, this event will only fire for the root page</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageCheckIn">
            <summary>
            This event is fired after a page checked in
            </summary>
            <remarks>Please note if the check-in is recursive, this event will only fire for the root page</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageUndoCheckOut">
            <summary>
            This event is fired before a page undo check out
            </summary>
            <remarks>Please note if the operation is recursive, this event will only fire for the root page</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageUndoCheckOut">
            <summary>
            This event is fired after a page undo check out
            </summary>
            <remarks>Please note if the operation is recursive, this event will only fire for the root page</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageRollback">
            <summary>
            This event is fired before a page rollback to previous version
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageRollback">
            <summary>
            This event is fired after a page rolled back
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PageRenamed">
            <summary>
            This event is fired after a page is renamed
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageAssign">
            <summary>
            This event is fired before page is assigned
            </summary>
            <remarks>This event will fire on every page assigned, if operation is done recursively</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageAssign">
            <summary>
            THis event is fired after page is assigned
            </summary>
            <remarks>This event will fire on every page assigned, if operation is done recursively</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PageCreated">
            <summary>
            This event is fired when a new page is created
            </summary>
            <remarks>Please note the event fires when a page is created within session, not when it is actually saved in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageDelete">
            <summary>
            This event is fired before a page deleted
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageDelete">
            <summary>
            Thhis event is fired after a page deleted
            </summary>
            <remarks>Please note the event fires when a page is deleted within session, not when it is actually deleted in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageMove">
            <summary>
            This event is fired before a page move
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageMove">
            <summary>
            This event is fired after a page is moved
            </summary>
            <remarks>Please note the event fires when a page is moved within session, not when it is actually saved in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageCopy">
            <summary>
            This event is fired before a page copy
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageCopy">
            <summary>
            This event is fired after a page is copied
            </summary>
            <remarks>Please note the event fires when a page is copied within session, not when it is actually saved in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeEmptyRecycleFolder">
            <summary>
            This event is fired before recycle folder empty action
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterEmptyRecycleFolder">
            <summary>
            This event is fired after recycle folder is empties
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeCrossLocaleCopy">
            <summary>
            This event is fired before a page to be copied across region roots
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterCrossLocaleCopy">
            <summary>
            This event is fired after a page copied across region roots
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeRegionRootCopy">
            <summary>
            This event is fired before a region root to be copied
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterRegionRootCopy">
            <summary>
            This event is fired after a region root is copied
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.CategoryCreated">
            <summary>
            This event is fired when a category is created
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeCategoryDelete">
            <summary>
            This event is fired before a category to deleted
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterCategoryDelete">
            <summary>
            This event is fired after a category is deleted
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.UserCreated">
            <summary>
            This event is fired when a user is created
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeUserDelete">
            <summary>
            This event is fired before a user to be deleted
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterUserDelete">
            <summary>
            This event is fired after a user is deleted
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.UserGroupCreated">
            <summary>
            This event is fired when a user group is created
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeUserGroupDelete">
            <summary>
            This event is fired before a user group to be deleted
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterUserGroupDelete">
            <summary>
            This event is fired after a user group is deleted
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeWorkflowAdvance">
            <summary>
            This event is fired before a page to advance in workflow
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterWorkflowAdvance">
            <summary>
            This event is fired after a page advanced in workflow
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforeEntitySave">
            <summary>
            This event is fired before any entity object is about to be saved
            </summary>
            <remarks>This event will cover all entities objects, including pages, users, workflows, publishing targets, etc.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterEntitySave">
            <summary>
            This event is fired after a entity object is saved
            </summary>
            <remarks>This event will cover all entities objects, including pages, users, workflows, publishing targets, etc. Also, this event is fired when the object actually saved to content store.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.CategoryRenamed">
            <summary>
            This event is fired when a category is renamed
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.PublishComplete">
            <summary>
            This event is fired when a publish task finished executing
            </summary>
            <remarks>This event is fired in the same time as Published event. It is for a different purpose.</remarks>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.BeforePageMarkForPublishChange">
            <summary>
            This event is fired before a page has any mark for publish changes
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ContentStore.AfterPageMarkForPublishChange">
            <summary>
            This event is fired after a page had mark for publish changes
            </summary>
            <remarks>Please note the event fires within session, not actual saves happened in content store</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IEntity">
            <summary>
            Represents an object that has a unique ID and name; has a list of update information; and can be serialized to XML.
            Entities should only be manipulated within a <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession</see>. Also, it should only have its methods and properties
            called within the <see cref="T:Ingeniux.CMS.IUserSession">UserSession</see> where it was originally retrieved.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IEntity.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Validates the user permission on the current entity. Implemented by concrete inheriting types.
            It is called automatically upon saving an entity.
            </summary>
            <param name="user">The permission of this user is checked before saving the entity.</param>
        </member>
        <member name="M:Ingeniux.CMS.IEntity.ValidateData">
            <summary>
            Validates this entity's data. Implemented by concrete inheriting types.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.Name">
            <summary>
            Gets and sets the entity's name. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.CreationUser">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> who created this entity.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.Created">
            <summary>
            Gets the entity's creation date.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.LastModifiedUser">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> who lasted edited the entity.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.LastModified">
            <summary>
            Gets the date when the entity was most recently modified.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.Session">
            <summary>
            Gets the session that retrieved this entity. An entity is always session-specific.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEntity.SessionId">
            <summary>
            Gets the unique ID of the session that retrieved this entity.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Entity.Touch">
            <summary>
            Update LastModified Date
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Entity.Update(System.Action)">
            <summary>
            Update itself in existing session
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Entity.ValidateData">
            <summary>
            Validate data. Can only change this object or use DataCommands directly (e.g. Attachments)
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Entity.DisableModificationTracking">
            <summary>
            Disable entity tracking system from updating LastModified and LastModifiedUser
            Will not be saved in DB
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IEntity`1">
            <summary>
            Represents an entity type that is associated with a specific manager type.
            </summary>
            <typeparam name="TManager">The <see cref="T:Ingeniux.CMS.ITransactionalEntity">manager</see> type for this entity type</typeparam>
        </member>
        <member name="P:Ingeniux.CMS.IEntity`1.Manager">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ITransactionalEntity">manager</see> that retrieved this entity instance.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IContentCollection">
            <summary>
            Represents a collection of <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.Attribute(System.String)">
            <summary>
            Gets a specific Attribute by name
            </summary>
            <param name="name">Name of the Attribute to retrieve</param>
            <returns>Attribute with given name. Cannot return a null value, as this value doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributeValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.AttributeValue(System.String)">
            <summary>
            Gets the value of a specific Attribute by name.
            </summary>
            <param name="name">Name of the Attribute whose value is to be retrieved. Must be a valid XML attribute name.</param>
            <returns>Value of given Attribute. If Attribute doesn't exist, returns an empty string.</returns>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attribute(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.Attributes">
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.AttributesCount">
            <summary>
            Gets the count of Attributes in the ContentCollection.
            </summary>
            <returns>Count of Attributes.</returns>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets an Attribute's value. If the Attribute with the given name doesn't exist, this method creates it.
            </summary>
            <param name="name">Name of Attribute. Must be a valid XML attribute name.</param>
            <param name="value">Value of Attribute. Cannot be null.</param>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])">
            <summary>
            Adds one or more Attributes to the ContentCollection. This method accepts variable number of Attribute objects as parameters.
            </summary>
            <param name="attribute">Attribute(s) to add to collection</param>
            <remarks>Any null items are ignored, and existing Attributes with the same names have their values updated.</remarks>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})">
            <summary>
            Adds a collection of Attributes to the Content Collection.
            </summary>
            <param name="attributes">Collection of Attributes to add.</param>
            <remarks>Any null items are ignored, and existing Attributes with the same names have their values updated.</remarks>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.RemoveAttribute(Ingeniux.CMS.IAttribute)">
            <summary>
            Removes an Attribute from the collection.
            </summary>
            <param name="attribute">Attribute to remove. Null objects are ignored.</param>
            <returns>True if the attribute parameter matches an attribute in the collection.</returns>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.ClearAttributes"/>
        </member>
        <member name="M:Ingeniux.CMS.IContentCollection.ClearAttributes">
            <summary>
            Clears all Attributes from collection.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.Attributes"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AttributesCount"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.SetAttributeValue(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttribute(Ingeniux.CMS.IAttribute[])"/>
            <seealso cref="M:Ingeniux.CMS.IContentCollection.AddAttributes(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAttribute})"/>
        </member>
        <member name="P:Ingeniux.CMS.IContentCollection.ContentUnitTemplateName">
            <summary>
            Gets and sets the template name this field uses. Only fields generated via ContentUnit placement have this value.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IElement">
            <summary>
            Represents an element field on a CMS Page. Its parent can be a <see cref="T:Ingeniux.CMS.IPage">Page</see> or an Element.
            It is a collection of <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see>, plus field name and value, that can be serialized to an XElement.
            </summary>
            <remarks>Each element has unique ID for easy identification.</remarks>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IElement.Clone(System.String)">
            <summary>
            Clones the current element and returns a new element. The cloned element usesthe name provided.
            </summary>
            <param name="cloneName">New name of the cloned element. Must be valid XML Element name or an exception is thrown.</param>
            <returns>The new element that is copy of this element.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Type">
            <summary>
            Gets the type of Element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Name">
            <summary>
            Gets and sets the name of Element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Label">
            <summary>
            Gets and sets the label (friendly name) of the Element.
            </summary>
            <remarks>Element cannot be retrieved via Label</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Readonly">
            <summary>
            Gets and sets the Element as read-only on the Edit Form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Hidden">
            <summary>
            Gets and sets the Element as hidden on the Edit Form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Required">
            <summary>
            Gets sets the Element's value as required. Pages containing required Elements with empty values cannot be checked in.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Expanded">
            <summary>
            Gets and sets the Element's field on Edit Form as showing its full details. This value only applies to the Edit Form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.Value">
            <summary>
            Gets and sets the value of the Element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.IsXpower">
            <summary>
            Gets if the Element is a Xpower element, a special Ingeniux CMS Element that executes at runtime (or fully expanded publishing).
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IElement.UniqueID">
            <summary>
            Gets the unique ID of the Element.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IComponentElement">
            <summary>
            Represents a Component Element, that either refers to a specific component, or embed the component content within.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.AllowedComponentTypes">
            <summary>
            Gets the allowed component schemas. Component can only refer/embed components with schema in this list.
            </summary>
            <remarks>This corresponses to the "CompTypes" attribute on the component element</remarks>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AddAllowedComponentType(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.RemoveAllowedComponentType(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowAllComponentTypes"/>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.AddAllowedComponentType(Ingeniux.CMS.ISchema)">
            <summary>
            Adds a new allowed component type.
            </summary>
            <param name="schema">New schema to add</param>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowedComponentTypes"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.RemoveAllowedComponentType(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowAllComponentTypes"/>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.RemoveAllowedComponentType(Ingeniux.CMS.ISchema)">
            <summary>
            Removes an existing allowed component type.
            </summary>
            <param name="schema">Schema to remove</param>
            <returns>True if schema exists in current CompTypes, False otherwise</returns>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowedComponentTypes"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AddAllowedComponentType(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowAllComponentTypes"/>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.AllowAllComponentTypes">
            <summary>
            Clear allowed component types list and allow all component types
            </summary>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AllowedComponentTypes"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.AddAllowedComponentType(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.IComponentElement.RemoveAllowedComponentType(Ingeniux.CMS.ISchema)"/>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.Embed(Ingeniux.CMS.IPage)">
            <summary>
            Embeds a component. The component can be an existing <see cref="T:Ingeniux.CMS.IPage">Page</see> object or newly creately that hasn't been
            save to Content Store yet.
            
            For an component created from scratch, "Id" attributes will be empty, since the embedded component doesn't need its own identification.
            </summary>
            <param name="componentToEmbed">The component to embed. Can be an existing component (with Id), or new component not saved yet (without Id).
            It is OK to allow the embedded component to be a Page with View or Template</param>
            <remarks>
            It is allowed for embedded component to embed another component. The new embed component will replace the old one.
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "componentContentToEmbed" parameter is null value</exception>
            <exception cref="T:System.ArgumentException">When component has CompTypes limitations, and the content schema is not in the list.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.Embed(Ingeniux.CMS.IPageVersion)">
            <summary>
            Embeds a component. The component can be an existing <see cref="T:Ingeniux.CMS.IPageVersion">Page Version</see> object or newly creately that hasn't been
            save to Content Store yet.
            
            For an component Page Version created from scratch, "Id" attributes will be empty, since the embedded component doesn't need its own identification.
            </summary>
            <param name="componentToEmbed">The component to embed. Can be an existing component (with XID), or new component not saved yet (without XID).
            It is OK to allow the embedded component to be a Page with View or Template</param>
            <remarks>
            It is allowed for embedded component to embed another component. The new embed component will replace the old one.
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "componentContentToEmbed" parameter is null value</exception>
            <exception cref="T:System.ArgumentException">When component has CompTypes limitations, and the content schema is not in the list.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.Share(Ingeniux.CMS.IPage,System.Boolean,Ingeniux.CMS.IPageVersion)">
            <summary>
            Unembeds the content off the component and turn it into an actual <see cref="T:Ingeniux.CMS.IPage">Page</see> object and place it under the given root.
            </summary>
            <param name="rootPage">Root page to place the extracted component under</param>
            <param name="placeAtEnd">Specifies whether or not to place the component at the root page's children. Default is to place in the front.</param>
            <param name="overrideContent">The page version content to replace the embed content of this component. When specified, this content will be used to create the shared component instead.</param>
            <returns>The extracted component, null if component is not in embedded mode</returns>
            <exception cref="T:System.ArgumentException">When root page is null</exception>
            <exception cref="T:System.InvalidOperationException">When current user doesn't have <see cref="!:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CAN_EMBED_UNEMBED_COMPONENTS"/> rights, or user doesn't have 
            write access to root page node</exception>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.ShareBack(Ingeniux.CMS.IUserSession,System.Boolean,Ingeniux.CMS.IPageVersion)">
            <summary>
            Unembeds the content off the component and save it back to the original component.
            This process requires the embedded/override content to have the same schema as the its original component.
            </summary>
            <param name="session">The session to use to retrieve original component</param>
            <param name="checkinComponent">Whether to check in the original component automatically, after share back.</param>
            <param name="overrideContent">The page version content to replace the embed content of this component. When specified, this content will be used to create the shared component instead.</param>
            <exception cref="T:System.ArgumentException">When component doesn't have the original component id, or original component no longer exists</exception>
            <exception cref="T:System.InvalidOperationException">When current user doesn't have <see cref="!:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CAN_EMBED_UNEMBED_COMPONENTS"/> rights, or user doesn't have 
            write access to the original component</exception>
        </member>
        <member name="M:Ingeniux.CMS.IComponentElement.RemoveEmbed">
            <summary>
            Unembed the content off the component, and restore it to old component reference mode. It doesn't share the embedded content out.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IComponentElement.AutoEmbed">
            <summary>
            Gets whether to automatically create embedded component, upon page creation.
            When true, will use the first existing <see cref="T:Ingeniux.CMS.ISchema">Schema</see> specified by the CompTypes.
            Will not be effective if Component is already set, or not valid schema in CompTypes.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IComponentElement.Embedded"/>
        </member>
        <member name="P:Ingeniux.CMS.IComponentElement.Embedded">
            <summary>
            Gets if the element has embedded content or not
            </summary>
            <seealso cref="P:Ingeniux.CMS.IComponentElement.AutoEmbed"/>
        </member>
        <member name="P:Ingeniux.CMS.IComponentElement.WrappedUp">
            <summary>
            Gets/sets if the element is wrapped up in expanded xml
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IComponentElement.EmbedContent">
            <summary>
            Gets the embedded content, null if component is not embedded
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IExportElement">
            <summary>
            Represents a local export entry in <see cref="T:Ingeniux.CMS.INavigationElement">Navigation</see> and <see cref="T:Ingeniux.CMS.ILinkElement">Link</see> elements.
            Defines an additional XML attribute to be included in an page element's output.
            </summary>
            <example>
            When a new export entry with the name "Abstract" and value "Abstract" is added, the navigation entry element should look like the following:
            <code language="xml">
            <![CDATA[
            <Page ID="x454" URL="about-us/news-and-events/motorola-employees-credit-union-selects-ingeniux"
            	Date="20040111T00:00:00" 
            	Changed="20130515T20:47:10" 
            	CategoryIds="133" 
            	Locale="" 
            	Schema="NewsDetail" 
            	Name="Motorola Employees Credit Union Selects Ingeniux"
            	Abstract="MECU Licenses Ingeniux CMS to Power Internet and Intranet sites" Title="Motorola Employees Credit Union Selects Ingeniux CMS" />
            ]]>
            </code>
            <para>
            To create a new ExportElement:
            </para>
            <code language="C#">
            <![CDATA[
            IExportElement exportEntry = new ExportElement("Title", "/*/Title");
            ]]>
            </code>
            <para>
            Serialization output matches the local export's entry value from a Navigation element in previous-generation CMS content.
            The difference that is the output is escaped in an <see cref="T:Ingeniux.CMS.IExportsElement">ExportsElement</see>'s serialization.
            </para>
            <code language="xml">
            <![CDATA[
            <Export><Name>Title</Name><Value>/*/Title</Value></Export>
            ]]>
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.IExportsElement"/>
        </member>
        <member name="P:Ingeniux.CMS.IExportElement.Name">
            <summary>
            Gets and sets the export's name. This name must be a valid XML element name.
            </summary>
            <exception cref="T:System.ArgumentNullException">When name value is null, empty, or contains whitespace</exception>
            <exception cref="T:System.ArgumentException">When name value is not a valid XML element name</exception>
        </member>
        <member name="P:Ingeniux.CMS.IExportElement.Query">
            <summary>
            Gets and sets the query expression of the export.
            </summary>
            <example>
            Query expression must be a valid XPath expression. Below are a few examples:
            <code language="xml">
            <![CDATA[
            "Abstract"									The element named "Abstract" under the root element.
            "/*/Abstract"								The element named "Abstract" under the root element.
            "//Abstract"								The element named "Abstract" that is descendant of the root element at any level. This makes for a recursive search that is much slower.
            "/*/@Timeout								The "Timeout" attribute of the root element.
            "/*/FlashSlideshowComponent/Flash/@URL		The URL attribute of the Flash element, under the FlashSlideshowComponent element, under the root element.
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Ingeniux.CMS.IExportsElement">
            <summary>
            Represents the collection of local export entries in <see cref="T:Ingeniux.CMS.INavigationElement">Navigation</see> and <see cref="T:Ingeniux.CMS.ILinkElement">Link</see> elements.
            Defines an additional XML attribute to be included in a Page element's output.
            </summary>
            <example>
            <para>
            ExportsElement can be found by the <see cref="P:Ingeniux.CMS.INavigationElement.LocalExports"/> property of a <see cref="P:Ingeniux.CMS.INavigationElement.LocalExports">Navigation element</see>.
            Navigation and Link elements always have this property, which is never a null object:
            </para>
            <code language="C#">
            <![CDATA[
            IExportsElement localExports = page.Element("AncestorNavigation").LocalExports.
            ]]>
            </code>
            <para>
            Serialization output matches the Exports element under <see cref="T:Ingeniux.CMS.INavigationElement">NavigationElements</see> in previous-generation CMS content.
            The <see cref="T:Ingeniux.CMS.IExportElement">entries</see> in the collection serialization output are escaped to a string.
            </para>
            <code language="xml">
            <![CDATA[
            <Exports>&lt;Export&gt;&lt;Name&gt;Title&lt;/Name&gt;&lt;Value&gt;/*/Title&lt;/Value&gt;&lt;/Export&gt;&lt;Export&gt;&lt;Name&gt;Abstract&lt;/Name&gt;&lt;Value&gt;/*/Abstract&lt;/Value&gt;&lt;/Export&gt;</Exports>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.Exports">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IExportElement">exports entries</see> in the collection.
            </summary>
            <returns>All export entries in the collection.</returns>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.ClearExports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Value"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IExportElement">export entry</see> to the collection.
            </summary>
            <param name="export">New export entry to add</param>
            <remarks>If the "export" parameter is null, this method does nothing.</remarks>
            <exception cref="T:System.ArgumentException">When there is already an <see cref="T:Ingeniux.CMS.IExportElement">export entry</see> that has the same name.</exception>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Exports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.ClearExports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Value"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)">
            <summary>
            Removes an <see cref="T:Ingeniux.CMS.IExportElement">export entry</see> from the collection.
            </summary>
            <param name="export">Export entry to remove</param>
            <returns>True if <see cref="T:Ingeniux.CMS.IExportElement">export entry</see> exists with the same name, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Exports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.ClearExports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Value"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.ClearExports">
            <summary>
            Clears all <see cref="T:Ingeniux.CMS.IExportElement">export entries</see> from collection.
            This method leaves the collection empty.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Exports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Value"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.Value">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IExportElement">entries'</see> serialization output together, escaped as a string.
            </summary>
            <example>
            &lt;Export&gt;&lt;Name&gt;Title&lt;/Name&gt;&lt;Value&gt;/*/Title&lt;/Value&gt;&lt;/Export&gt;&lt;Export&gt;&lt;Name&gt;Abstract&lt;/Name&gt;&lt;Value&gt;/*/Abstract&lt;/Value&gt;&lt;/Export&gt;
            </example>
            <returns>Escaped string of <see cref="T:Ingeniux.CMS.IExportElement">entries</see>' concatenated serialization output.</returns>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Exports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.ClearExports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IExportsElement.SetValue(System.String)">
            <summary>
            Sets all exports directly.
            </summary>
            <param name="exportsValue">Well-formed export entry elements in string form.</param>
            <exception cref="T:System.ArgumentException">
            When the exportsValue string is not a well-formed collection of <see cref="T:Ingeniux.CMS.IExportElement">export entry</see> XML elements.
            </exception>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Exports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.AddExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.RemoveExport(Ingeniux.CMS.IExportElement)"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.ClearExports"/>
            <seealso cref="M:Ingeniux.CMS.IExportsElement.Value"/>
        </member>
        <member name="T:Ingeniux.CMS.IGroupElement">
            <summary>
            <para>
            Represents a Group element on a <see cref="T:Ingeniux.CMS.IPage">page</see>.
            </para>
            <para>
            A Group element contains child elements of any type, except another group element.
            </para>
            </summary>
            <remarks>
            <para>
            In a <see cref="T:Ingeniux.CMS.ISchema">schema</see>, a group element consists of two pieces: GroupStart and GroupEnd.
            The children of Group element on a <see cref="T:Ingeniux.CMS.IPage">page</see> are the elements between the GroupStart and GroupEnd tags.
            </para>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IGroupElement.ChildItems">
            <summary>
            Retrieves this group's child <see cref="T:Ingeniux.CMS.IElement">elements</see> collection.
            </summary>
            <returns>Collection of child elements.</returns>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.AddChildItem(Ingeniux.CMS.IElement)"/>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.ChildItemsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IGroupElement.AddChildItem(Ingeniux.CMS.IElement)">
            <summary>
            Adds a new child <see cref="T:Ingeniux.CMS.IElement">element</see>.
            </summary>
            <param name="element">New child element to add</param>
            <remarks>
            This method cannot be called after <see cref="M:Ingeniux.CMS.IGroupElement.Close">Close</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Calling this method on Group element that is <see cref="P:Ingeniux.CMS.IGroupElement.Closed">Closed</see>.</exception>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.ChildItems"/>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.ChildItemsCount"/>
            <seealso cref="P:Ingeniux.CMS.IGroupElement.Closed"/>
        </member>
        <member name="M:Ingeniux.CMS.IGroupElement.ChildItemsCount">
            <summary>
            Gets the count of child elements.
            </summary>
            <returns>Count of child elements.</returns>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.ChildItems"/>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.AddChildItem(Ingeniux.CMS.IElement)"/>
        </member>
        <member name="M:Ingeniux.CMS.IGroupElement.Close">
            <summary>
            Closes the group element, preventing the addition of child elements.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IGroupElement.Closed"/>
        </member>
        <member name="P:Ingeniux.CMS.IGroupElement.Enclosed">
            <summary>
            Gets and sets whether the rendering of the group element at runtime or preview will be wrapped in a wrapper element.
            </summary>
            <remarks>This is new to CMS 9.0. Previous versions remove the Group element during expansion.</remarks>
            <example>
            <code language="xml">
            <![CDATA[
            <Group Name="SEOGroup">
            	.......
            </Group>
            ]]>![
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IGroupElement.AllowEnclosureChange">
            <summary>
            Gets whether changing the <see cref="P:Ingeniux.CMS.IGroupElement.Enclosed">Enclosed</see> property is allowed on the element.
            </summary>
            <remarks>
            This property is set by schema at page creation and cannot be changed afterward. Default is false.
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IGroupElement.Closed">
            <summary>
            Gets whether the group is closed. You cannot add child elements to a closed group.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IGroupElement.Close"/>
        </member>
        <member name="T:Ingeniux.CMS.INavigationElement">
            <summary>
            <para>
            Represents the types of XPower <see cref="T:Ingeniux.CMS.IElement">elements</see> that produce a collection of Navigation elements during runtime or publishing expansion.
            A Navigation element queries each page it covers and produces a Page element with a set of attributes that summarizes the <see cref="T:Ingeniux.CMS.IPage">page</see>'s content.
            </para>
            <para>
            The highly organized and highly flexible Navigation elements are a central part of the Ingeniux CMS.
            </para>
            <para>
            The amount of information to summarize from <see cref="T:Ingeniux.CMS.IPage">page</see> content is decided by the combination of <see cref="T:Ingeniux.CMS.IGlobalExports">global exports</see>
            and <see cref="T:Ingeniux.CMS.IExportsElement">local exports</see>. Local exports override global exports with same name. Therefore, all Navigation element types
            can have <see cref="P:Ingeniux.CMS.INavigationElement.LocalExports">local exports</see>.
            </para>
            </summary>
            <example>
            <para>
            Each Navigation element's page output will look something like the following example:
            </para>
            <code language="xml">
            <![CDATA[
            <Page ID="x454" URL="about-us/news-and-events/motorola-employees-credit-union-selects-ingeniux"
            	Date="20040111T00:00:00" 
            	Changed="20130515T20:47:10" 
            	CategoryIds="133" 
            	Locale="" 
            	Schema="NewsDetail" 
            	Name="Motorola Employees Credit Union Selects Ingeniux"
            	Abstract="MECU Licenses Ingeniux CMS to Power Internet and Intranet sites" Title="Motorola Employees Credit Union Selects Ingeniux CMS" />
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            It is highly recommended to use gloabal exports whenever possible, because using local exports is much slower. An exception is when override is desired on global export entries, or you are trying to query expanded Link elements.
            </para>
            </remarks> 
            <seealso cref="T:Ingeniux.CMS.IExportsElement"/>
        </member>
        <member name="P:Ingeniux.CMS.INavigationElement.LocalExports">
            <summary>
            Gets the element's local exports.
            </summary>
            <remarks>The return of this property will not be null.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.ILinkElement">
            <summary>
            Represents a single <see cref="T:Ingeniux.CMS.IPage">page</see> summarization, a reference to an external URL, or a reference to a document asset.
            </summary>
            <seealso cref="T:Ingeniux.CMS.Enums.EnumLinkElementType"/>
        </member>
        <member name="P:Ingeniux.CMS.ILinkElement.LinkType">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.Enums.EnumLinkElementType">type</see> of link in this element.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IListElement">
            <summary>
            Represents a List element. List elements can have child <see cref="T:Ingeniux.CMS.IElement">elements</see> of the same type. It must have at least one child element,
            but there is no upper limit on how many child elements it can have.
            The child element <see cref="T:Ingeniux.CMS.Enums.EnumElementType">type</see> can be any type, excluding <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_GROUP_START">Group</see>
            and <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LIST">List</see> elements.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.ListItem(System.Int32)">
            <summary>
            Retrieves a child element by its position in the collection.
            </summary>
            <param name="position">Position index of the child element</param>
            <returns>Child element at given position. Returns null if position is out of range.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.ListItem(System.String)">
            <summary>
            Retrieves a child element by its unique ID.
            </summary>
            <param name="uniqueId">Child element's ID</param>
            <returns>Child element with given ID. Returns null if no element with that ID exists.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.ListItems">
            <summary>
            Retrieves all child elements.
            </summary>
            <returns>Collection of child elements.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.AddListItem">
            <summary>
            Creates a new child element and adds it to the collection. 
            The new child element has its <see cref="T:Ingeniux.CMS.Enums.EnumElementType">type</see> and <see cref="P:Ingeniux.CMS.IElement.Name">name</see> decided, but nothing else.
            </summary>
            <returns>Newly added child element.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.RemoveListItem(Ingeniux.CMS.IElement)">
            <summary>
            Removes a child element.
            </summary>
            <param name="element">Child element to remove</param>
            <returns>True if child element's ID exists in collection, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.ListItemsCount">
            <summary>
            Gets the count of child elements.
            </summary>
            <returns>Count of child elements.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListElement.ClearListItems">
            <summary>
            Removes the child element's collection, leaving only the very first child element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListElement.Enclosed">
            <summary>
            Gets and sets whether the rendering of the List element at runtime or preview will be contained in a wrapper element.
            </summary>
            <remarks>New to CMS 9.0. Previous versions remove the List element during expansion.</remarks>
            <example>
            <code language="xml">
            <![CDATA[
            <List Name="SEOGroup">
            	.......
            </List>
            ]]>![
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IListElement.AllowEnclosureChange">
            <summary>
            Gets whether the element's <see cref="P:Ingeniux.CMS.IListElement.Enclosed">Enclosed</see> property is allowed to be changed.
            </summary>
            <remarks>
            This property is set by schema during page creation and cannot be changed later. The default value is false.
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IListElement.ChildElementType">
            <summary>
            Gets the child element's <see cref="T:Ingeniux.CMS.Enums.EnumElementType">type</see>. A child element's type is determined by its <see cref="T:Ingeniux.CMS.IPage">page</see>'s schema and cannot be changed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListElement.ChildElementName">
            <summary>
            Gets the child element's name. A child element's name is determined by its <see cref="T:Ingeniux.CMS.IPage">page</see>'s schema and cannot be changed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListElement.ChildElementLabel">
            <summary>
            Gets the child element's label. A child element's label is determined by its <see cref="T:Ingeniux.CMS.IPage">page</see>'s schema and cannot be changed.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ListElement.ClearListItems">
            <summary>
            This action will leave the first list item around.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ListElement.ClearAllListItems">
            <summary>
            This action will clear all list items. It is not on interface. Must be casted to class to execute
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Presentation.IPresentationFormatter">
            <summary>
            Represents the visitor object that is used to turn layouts into actual html contains.
            In order to adhere to the rule of model view separation, we will not have an actual implementation 
            of this interface in CSAPI. It is up to middle to to implement this class and provides
            instances to layout and layout to perform actual format
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.GetColumnGridSizeClassName(Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap)">
            <summary>
            Gets the prefix of CSS class name for columns, on grid size
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.GetColumnOffsetClassNameBase(Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap)">
            <summary>
            Gets the prefix of CSS class name for offsets on columns
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.FormatLayoutColumn(HtmlAgilityPack.HtmlDocument,Ingeniux.CMS.Presentation.ILayoutColumn)">
            <summary>
            Produces the html for layout column
            </summary>
            <param name="doc">The html document to add the unit in</param>
            <param name="layoutUnit">The column to format</param>
            <returns>The container node </returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.FormatLayoutRow(HtmlAgilityPack.HtmlDocument,Ingeniux.CMS.Presentation.ILayoutRow)">
            <summary>
            Produces the html for layout row
            </summary>
            <param name="doc">The html document to add the unit in</param>
            <param name="layoutRow">The row to format</param>
            <returns>The container node </returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.FormatLayout(HtmlAgilityPack.HtmlDocument,Ingeniux.CMS.Presentation.ILayout)">
            <summary>
            Produces the html for layout container
            </summary>
            <param name="doc">The html document to add the unit in</param>
            <param name="layout">Layout to format</param>
            <returns>The container node</returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPresentationFormatter.FormatContentUnitPlaceHolder(HtmlAgilityPack.HtmlDocument,System.String,System.String,System.String)">
            <summary>
            Produces the html for content unit place holder in rendering template
            </summary>
            <param name="doc">The html document to add the unit in</param>
            <param name="contentUnit">Content unit to format</param>
            <returns>The place holder node</returns>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.Name">
            <summary>
            Gets display name of the Presentation Formatter
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.Grids">
            <summary>
            Gets the max number of grids in each row for this formatter
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.RowClassName">
            <summary>
            Gets the CSS class name for rows
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.ColumnClassNameBase">
            <summary>
            Gets the prefix of CSS class name for columns
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.ElementName">
            <summary>
            Gets the name of the output element
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.SupportWrapLevels">
            <summary>
            Gets whether this formatter uses standard column/row formatting logic, or implemented its custom logic.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IPresentationFormatter.PadZeroOnColumnWidth">
            <summary>
            Gets whether this formatter will pad 0 on column width that is 1 digit, default is false.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IRedirect">
            <summary>
            Represents an entry in the run-time redirects maps. It is defined as design-time and published to each <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>'s target folder.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IRedirect.Update(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates this redirect entry.
            </summary>
            <param name="from">New "from" address</param>
            <param name="target">New "target" address</param>
            <param name="pubTgtIds">New collection of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> IDs</param>
            <exception cref="T:System.ArgumentException">When either the "from" or "target" address is null, empty, or whitespace</exception>
        </member>
        <member name="P:Ingeniux.CMS.IRedirect.From">
            <summary>
            Gets the "from" address. It can be relative or absolute.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IRedirect.Target">
            <summary>
            Gets the "target" address. It can also be relative or absolute.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IRedirect.Notes">
            <summary>
            Gets the notes for the redirect.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IRedirect.PubTargetIDs">
            <summary>
            Gets the IDs of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> to which this redirect entry applies.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISearchFieldException">
            <summary>
            InSite Search Configuration: Representats a search indexing configuration entry for a <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="T:Ingeniux.CMS.IElement">Element</see> or <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see>,
            either within one <see cref="T:Ingeniux.CMS.ISchema">Schema</see> or across all Schemas.
            This allows to individually control search indexing on Page fields.
            </summary>
            <seealso cref="T:Ingeniux.CMS.ISearchSchemaException"/>
        </member>
        <member name="T:Ingeniux.CMS.ICrossPublishingTargetsObject">
            <summary>
            Represents an object that is associated with one or more <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ICrossPublishingTargetsObject.AssociatedTargets">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> this object is associated with.
            </summary>
            <returns>Associated Publishing Target</returns>
            <remarks>
            <para>If <see cref="P:Ingeniux.CMS.ICrossPublishingTargetsObject.AllTargets">AllTargets</see> property is true, this method will return all Publishing Targets.</para>
            </remarks>
            <seealso cref="!:Ingeniux.CMS.AllTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociateWithTarget"/>
            <seealso cref="!:Ingeniux.CMS.RemoveTargetAssociate"/>
            <seealso cref="!:Ingeniux.CMS.SetAssociatedTargets"/>
        </member>
        <member name="M:Ingeniux.CMS.ICrossPublishingTargetsObject.AssociateWithTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Associates this object with a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="target">Publishing Target to associate with</param>
            <remarks>
            <para>If "target" is null, error will be thrown.</para>
            <para>If "target" was already associated with this object, nothing will happen.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "target" parameter value is null</exception>
            <seealso cref="!:Ingeniux.CMS.AllTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociatedTargets"/>
            <seealso cref="!:Ingeniux.CMS.RemoveTargetAssociate"/>
            <seealso cref="!:Ingeniux.CMS.SetAssociatedTargets"/>
        </member>
        <member name="M:Ingeniux.CMS.ICrossPublishingTargetsObject.RemoveTargetAssociate(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Unassociates with a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="target">Publishing Target to unassociate with</param>
            <returns>True if "target" is not null and associated with this object, false otherwise.</returns>
            <seealso cref="!:Ingeniux.CMS.AllTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociatedTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociateWithTarget"/>
            <seealso cref="!:Ingeniux.CMS.SetAssociatedTargets"/>
        </member>
        <member name="M:Ingeniux.CMS.ICrossPublishingTargetsObject.SetAssociatedTargets(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})">
            <summary>
            Set associations with multiple <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
            <param name="targets">Publishing Targets to associate with.</param>
            <remarks>This method will reset all Publishing Target associations. All null Publishing Target instances will be ignored.</remarks>
            <seealso cref="!:Ingeniux.CMS.AllTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociatedTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociateWithTarget"/>
            <seealso cref="!:Ingeniux.CMS.RemoveTargetAssociate"/>
        </member>
        <member name="M:Ingeniux.CMS.ICrossPublishingTargetsObject.SetAssociatedTargets(System.String[])">
            <summary>
            Set associations with multiple <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> by their unique Ids.
            </summary>
            <param name="targets">Ids of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> to associate with.</param>
            <remarks>This method will reset all Publishing Target associations. All null or empty ids will be ignored.</remarks>
            <seealso cref="!:Ingeniux.CMS.AllTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociatedTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociateWithTarget"/>
            <seealso cref="!:Ingeniux.CMS.RemoveTargetAssociate"/>
        </member>
        <member name="P:Ingeniux.CMS.ICrossPublishingTargetsObject.AllTargets">
            <summary>
            Gets/sets whether this object is associated with all <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
            <seealso cref="!:Ingeniux.CMS.AssociatedTargets"/>
            <seealso cref="!:Ingeniux.CMS.AssociateWithTarget"/>
            <seealso cref="!:Ingeniux.CMS.RemoveTargetAssociate"/>
            <seealso cref="!:Ingeniux.CMS.SetAssociatedTargets"/>
        </member>
        <member name="P:Ingeniux.CMS.ISearchFieldException.FieldName">
            <summary>
            Gets/sets the name of the field for this configuration
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISearchFieldException.IncludeInSearchResults">
            <summary>
            Gets/sets whether to indexing this field or not for InSite Search.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISearchFieldException.IndexingBoost">
            <summary>
            Gets/sets the boost value of this field for search indexing.
            </summary>
            <remarks>
            <para>Boost value of a field is defaulted to 1. This makes this field as the same score or priority as any other fields. Higher or lower the value to increase or decrease the score.</para>
            <para>Boost value is only effective when <see cref="P:Ingeniux.CMS.ISearchFieldException.IncludeInSearchResults">IncludeInSearchResults</see> is true.</para>
            </remarks>
        </member>
        <member name="T:Ingeniux.CMS.ISearchSchemaException">
            <summary>
            InSite Search Configuration: Represents a search indexing configuration entry for a specific <see cref="T:Ingeniux.CMS.ISchema">Page type</see>. 
            This configuration will affect indexing behaviors on all <see cref="T:Ingeniux.CMS.IPage">Pages</see> created from the schema.
            Within each configuration entry, search indexing behaviors of each <see cref="T:Ingeniux.CMS.IElement">Elements</see> and <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see> can
            be configured individually.
            </summary>
            <seealso cref="T:Ingeniux.CMS.ISearchFieldException"/>
        </member>
        <member name="M:Ingeniux.CMS.ISearchSchemaException.Fields">
            <summary>
            Retrieves the configuration entries for individually configured <see cref="T:Ingeniux.CMS.IElement">Elements</see> and <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see>
            within this <see cref="T:Ingeniux.CMS.ISchema">Page type</see>.
            </summary>
            <returns>Collection of configuration entries of fields within this Page type.</returns>
            <seealso cref="P:Ingeniux.CMS.ISearchSchemaException.IncludeInGlobalSearch"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.AddField(Ingeniux.CMS.ISearchFieldException)"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.RemoveField(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.SetFields(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ISearchFieldException})"/>
        </member>
        <member name="M:Ingeniux.CMS.ISearchSchemaException.AddField(Ingeniux.CMS.ISearchFieldException)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.ISearchFieldException">Field configuration entry</see> to this <see cref="T:Ingeniux.CMS.ISchema">Page type</see>.
            </summary>
            <param name="fieldException">Field configuration entry to add to the collection</param>
            <remarks>
            <para>If "fieldException" is null, does nothing.</para>
            <para>If field with the given name doesn't exist on the <see cref="T:Ingeniux.CMS.ISchema">Schema</see>, error will be thrown.</para>
            <para>If a field configuration entry for the same field name already exists, error will be thrown.</para>
            <para>If the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> this exception based on no longer exists, error will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When given field name doesn't exist on Schema, another field exception with the same name already exists, or Schema no longer exists.</exception>
            <seealso cref="!:Ingeniux.CMS.ISearchSchemaException.IncludeInGlobalSearchy"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.RemoveField(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.SetFields(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ISearchFieldException})"/>
        </member>
        <member name="M:Ingeniux.CMS.ISearchSchemaException.RemoveField(System.String)">
            <summary>
            Removes the <see cref="T:Ingeniux.CMS.ISearchFieldException">Field configuration entry</see> for the field with specified name
            </summary>
            <param name="fieldName">Name of the field to remove configuration for</param>
            <returns>True if "fieldName" is not null or whitespace, and configuration entry for this field exists.</returns>
            <seealso cref="!:Ingeniux.CMS.ISearchSchemaException.IncludeInGlobalSearchy"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.AddField(Ingeniux.CMS.ISearchFieldException)"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.SetFields(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ISearchFieldException})"/>
        </member>
        <member name="M:Ingeniux.CMS.ISearchSchemaException.SetFields(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ISearchFieldException})">
            <summary>
            Updates the collection of <see cref="T:Ingeniux.CMS.ISearchFieldException">Field configurations</see> with given collection.
            </summary>
            <param name="fieldExceptions">Collection of field configuration entry to set</param>
            <remarks>
            <para>This method will clear the existing collection and replace with the given collection</para>
            </remarks>
            <seealso cref="!:Ingeniux.CMS.ISearchSchemaException.IncludeInGlobalSearchy"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.AddField(Ingeniux.CMS.ISearchFieldException)"/>
            <seealso cref="M:Ingeniux.CMS.ISearchSchemaException.RemoveField(System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.ISearchSchemaException.SchemaRootName">
            <summary>
            Gets the Root name of the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> for this configuration 
            </summary>
            <seealso cref="P:Ingeniux.CMS.ISearchSchemaException.SchemaFriendlyName"/>
        </member>
        <member name="P:Ingeniux.CMS.ISearchSchemaException.SchemaFriendlyName">
            <summary>
            Gets the friendly name of the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> for this configuration
            </summary>
            <seealso cref="P:Ingeniux.CMS.ISearchSchemaException.SchemaRootName"/>
        </member>
        <member name="P:Ingeniux.CMS.ISearchSchemaException.IncludeInGlobalSearch">
            <summary>
            Gets/sets whether all <see cref="T:Ingeniux.CMS.IPage">Pages</see> created from this <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            will be indexed.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPageContent">
            <summary>
            Represents the entity that contains the XML serialization of a <see cref="T:Ingeniux.CMS.IPageVersion">Page Version</see>.
            Page contents are used for preview and publishing.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPageVersion"/>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="P:Ingeniux.CMS.IPageContent.PageId">
            <summary>
            Gets the ID of the page to which this page content belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageContent.Content">
            <summary>
            Gets the XML serialization of the page version as string.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPage">
             <summary>
             <para>
             Represents a node in the content tree within a particular <see cref="T:Ingeniux.CMS.ISite">Site</see>.
             It can be retrieved via <see cref="M:Ingeniux.CMS.ISite.Page(System.String)">Page</see> method from the <see cref="T:Ingeniux.CMS.ISite">Site</see> object.
             </para>
             <para>
             Pages are the building blocks of a CMS Site. Each Page object represents a structured piece of content that represents either a URL on the runtime site or a content block to be included in other pages.
             </para>
             </summary>
             <example>
             Example of page serialization output:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Details ID="x9" Name="Terms" IsComponent="false" ViewName="Details">
            	<Title type="string" UID="df5fea71-5d6a-4cd0-a1f1-bc21c7d2e628" label="Title" readonly="false" hidden="true" required="false">Terms of Service</Title>
            	<BodyCopy type="xhtml" UID="2d1c3d20-b7ee-42c6-87d9-5edeacabd31a" label="Body Copy" readonly="true" hidden="false" required="false" Height="">
            		Fusce condimentum eleifend enim a feugiat. Pellentesque viverra vehicula sem ut volutpat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non libero magna. Sed et quam lacus. Fusce condimentum eleifend enim a feugiat.
            	</BodyCopy>
            	<xPower Type="Component" Name="SiteControl" Component="x4" UID="5eacaa24-b25a-4a3a-b38c-ecf2ae2dc241" label="网站通用内容" readonly="false" hidden="false" required="false" CompTypes="SiteControl" WrappedUp="" AllowWrappingChange="false" componentName="SiteControl" AutoEmbed="false" Embedded="false" />
            	<xPower Type="Navigation" Name="AncestorNavigation" Navigation="Ancestors" UID="d206ba6f-9fca-4e3e-bbf1-151948d7ccd1" label="Ancestor Navigation" readonly="false" hidden="false" required="false" Expanded="false" GenerationOrder="down" StartPage="x2" MaxNodes="" MaxDepth="" Query="" />
            	<IGX_Presentations>
            		<DefaultPresentations />
            		<MobilePresentations />
            	</IGX_Presentations>
            </Details>
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Ingeniux.CMS.IPageVersion">
             <summary>
             Represents the content of a <see cref="T:Ingeniux.CMS.IPage">Page</see> at a specific stage in the page's history.
             The Page Version object contains <see cref="T:Ingeniux.CMS.IElement">Elements</see> and <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see> on the page content, the <see cref="!:Ingeniux.CMS.IPagePresentationCollection">Presentations</see>
             of the Page, and references to the page and its <see cref="T:Ingeniux.CMS.ISchemaVersion">Schema Version</see>.
             </summary>
             <remarks>
             <para>A page contains at least one page version instance, the current version. If the page is checked out, it also contains the check-out version. If the page was previously checked in, it will contain one or more previous versions.</para>
             </remarks>
             <example>
             Example of PageVersion serialization output:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Details ID="x9" Name="Terms" IsComponent="false" ViewName="Details">
            	<Title type="string" UID="df5fea71-5d6a-4cd0-a1f1-bc21c7d2e628" label="Title" readonly="false" hidden="true" required="false">Terms of Service</Title>
            	<BodyCopy type="xhtml" UID="2d1c3d20-b7ee-42c6-87d9-5edeacabd31a" label="Body Copy" readonly="true" hidden="false" required="false" Height="">
            		Fusce condimentum eleifend enim a feugiat. Pellentesque viverra vehicula sem ut volutpat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non libero magna. Sed et quam lacus. Fusce condimentum eleifend enim a feugiat.
            	</BodyCopy>
            	<xPower Type="Component" Name="SiteControl" Component="x4" UID="5eacaa24-b25a-4a3a-b38c-ecf2ae2dc241" label="网站通用内容" readonly="false" hidden="false" required="false" CompTypes="SiteControl" WrappedUp="" AllowWrappingChange="false" componentName="SiteControl" AutoEmbed="false" Embedded="false" />
            	<xPower Type="Navigation" Name="AncestorNavigation" Navigation="Ancestors" UID="d206ba6f-9fca-4e3e-bbf1-151948d7ccd1" label="Ancestor Navigation" readonly="false" hidden="false" required="false" Expanded="false" GenerationOrder="down" StartPage="x2" MaxNodes="" MaxDepth="" Query="" />
            	<IGX_Presentations>
            		<DefaultPresentations />
            		<MobilePresentations />
            	</IGX_Presentations>
            </Details>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.DOM">
            <summary>
            Retrieves the XML serialization of this page version. This is the same as the <see cref="!:Ingeniux.CMS.IPageVersion.Serialize">Serialize</see> method.
            </summary>
            <returns>Serialized XML document of this page version.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.Element(System.String)">
            <summary>
            Retrieves an <see cref="T:Ingeniux.CMS.IElement">Element</see> by its name.
            </summary>
            <param name="name">Name of the elements to retrieve. Case-sensitive.</param>
            <returns>Element with matching name. Returns null if no element matches the name.</returns>
            <remarks>
            <para>A good <see cref="T:Ingeniux.CMS.ISchema">Schema</see> makes sure that no two elements, except the elements in a List element, have the same name.</para>
            <para>If there happens be multiple elements with the same name, this method returns the first element from the top.</para>
            <para>This method doesn't have child elements of List, Group, or Embedded Component.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.ElementById(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Elements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.ElementById(System.String)">
            <summary>
            Retrieves an <see cref="T:Ingeniux.CMS.IElement">Element</see> by its unique ID.
            </summary>
            <param name="uniqueId">The ID of the element to retrieve.</param>
            <returns>Element with matching unique ID. This method returns null if this element doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Element(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Elements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.PresentationElement(System.String)">
            <summary>
            Retrieves an <see cref="T:Ingeniux.CMS.IElement">Element</see> that was added by its Presentation Content Unit by its unique ID.
            This method will not return elements that are outside of the presentation fields group.
            </summary>
            <param name="uniqueId">Unique ID of the element to retrieve.</param>
            <returns>Element with matching ID. This method returns null if this element doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Element(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Elements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.Elements">
            <summary>
            Retrieves the direct child <see cref="T:Ingeniux.CMS.IElement">Elements</see> of this page version.
            </summary>
            <returns>Collection of direct child elements. Returns an empty collection if this page version doesn't have any elements.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Element(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.ElementById(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AllElements(System.Func{Ingeniux.CMS.IElement,System.Boolean})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.PresentationElements">
            <summary>
            Retrieves the direct child <see cref="T:Ingeniux.CMS.IElement">Elements</see> of this page version that were added by its Presentation Content Unit, 
            </summary>
            <returns>Collection of the Presentation Content Unit group's direct child elements. Returns an empty collection if this page version doesn't have any elements.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.PresentationElement(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AllElements(System.Func{Ingeniux.CMS.IElement,System.Boolean})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.Elements(System.String)">
            <summary>
            Retrieves the direct child <see cref="T:Ingeniux.CMS.IElement">Elements</see> of this page version with names that match the specified name. Case-sensitive.
            </summary>
            <param name="name">Name of the elements to retrieve</param>
            <returns>Collection of direct child elements with matching name. Returns an empty collection if this page version doesn't have any elements with matching names.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Element(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.ElementById(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AllElements(System.Func{Ingeniux.CMS.IElement,System.Boolean})">
            <summary>
            Retrieves the collection of descendant <see cref="T:Ingeniux.CMS.IElement">Elements</see> on which the filter callback method returns true.
            </summary>
            <param name="filterCallback">Callback method to filter the results</param>
            <returns>Collection of descendant elements on which the callback filter method execution returns true.</returns>
            <remarks>
            <para>This method recursively goes through elements and their child elements, including descendant elements of Lists, Groups and Embedded Components.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Elements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.ElementsCount">
            <summary>
            Gets the count of all direct child <see cref="!:Ingeniux.CMS.IElemeent">Elements</see>.
            </summary>
            <returns>Count of child elements.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.Elements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.MarkForPublish(Ingeniux.CMS.IPublishingTarget,System.Boolean,System.Boolean)">
            <summary>
            Marks this page version for publish on the specified <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>
            </summary>
            <param name="pubTarget">Publishing target to mark this on which to mark this page version.</param>
            <param name="recursive">
            Whether to include descendants of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to which this page version belongs.</param>
            <param name="mark">Whether to mark or unmark for publish.</param>
            <remarks>
            <para>When "mark" is true, and "recursive" is true, this is not a page version marked for publish, but pages marked for publish.</para>
            <para>The <see cref="T:Ingeniux.CMS.IPage">Page</see> to which this page version belongs and its descendants are marked on the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>,</para>
            <para>with their latest version.</para>
            <para>When "mark" is true and "recursive" is false, then it is this page version's version number marked on the publishing target.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElement(Ingeniux.CMS.IElement[])">
            <summary>
            Adds one or multiple elements to the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection.
            </summary>
            <param name="elements">Elements to be added to the collection</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are appended to the elements collection.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If an element to be added has the same ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElements(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElements(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})">
            <summary>
            Adds a group of elements to the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection.
            </summary>
            <param name="elements">Elements to be added to the collection</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are appended to the elements collection.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElement(Ingeniux.CMS.IElement[])"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementFirst(Ingeniux.CMS.IElement[])">
            <summary>
            Adds one or more elements to the front of the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection.
            </summary>
            <param name="element">Elements to be added to the collection</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are prepended to the elements collection.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsFirst(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementBefore(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementAfter(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementsFirst(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})">
            <summary>
            Adds a group of elements to the front of the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection.
            </summary>
            <param name="elements">Elements to be added to the collection</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are prepended to the elements collection.</para>
            <para>any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementFirst(Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsBefore(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsAfter(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementBefore(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])">
            <summary>
            Adds one or more elements to the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection before a specified anchor element.
            </summary>
            <param name="element">Elements to be added to the collection</param>
            <param name="anchor">The anchor element before which to insert the element(s)</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are added the elements collection in front of the anchor element.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementFirst(Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsBefore(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementAfter(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementsBefore(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})">
            <summary>
            Adds a group of elements to <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection before a specified anchor element.
            </summary>
            <param name="elements">Elements to be added to the collection</param>
            <param name="anchor">The anchor element before which the group of elements is inserted</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements will be added the elements collection in front of the anchor element.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsFirst(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementBefore(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsAfter(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementAfter(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])">
            <summary>
            Adds one or more elements to the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection after the specified anchor element.
            </summary>
            <param name="element">Elements to be added to the collection</param>
            <param name="anchor">The anchor element after which the element(s) are inserted</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements are added the elements collection, behind the the anchor element.</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementFirst(Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementBefore(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsAfter(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.AddElementsAfter(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})">
            <summary>
            Adds a group of elements to the <see cref="T:Ingeniux.CMS.IElement">Elements</see> collection after the specified anchor element.
            </summary>
            <param name="elements">Elements to be added to the collection</param>
            <param name="anchor">The anchor element after which the group of elements is inserted</param>
            <remarks>
            <para>The elements added to the collection become direct children of the page version.</para>
            <para>The new child elements will be added the elements collection, behind of the anchor element</para>
            <para>Any null items in the collection are ignored.</para>
            <para>If any element to add has the same unique ID as an existing element, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any element to add has the same unique ID as an existing element.</exception>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsFirst(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementsBefore(Ingeniux.CMS.IElement,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IElement})"/>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.AddElementAfter(Ingeniux.CMS.IElement,Ingeniux.CMS.IElement[])"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.RemoveElement(Ingeniux.CMS.IElement)">
            <summary>
            Removes an <see cref="T:Ingeniux.CMS.IElement">Element</see> from the descendants collection.
            </summary>
            <param name="element">Element to remove from the collection</param>
            <returns>True if the element is not null and exists as a direct child of the descendant. Otherwise, this method returns false.</returns>
            <remarks>
            <para>This method carries out a recursive search in the descendants element.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.ClearElements"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageVersion.ClearElements">
            <summary>
            Removes all <see cref="T:Ingeniux.CMS.IElement">Elements</see> from the collection.
            </summary>
            <remarks>
            <para>There are no child elements left after executing this method.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageVersion.RemoveElement(Ingeniux.CMS.IElement)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.XID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPage">Page</see> that owns this page version. A page's ID (known as an xID) takes the form "x[integer]".
            </summary>
            <example>
            Example page XID:  x2458
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.VersionNumber">
            <summary>
            Gets the version number of this page version.
            </summary>
            <remarks>
            <para>All page versions, including the current and checked-out versions, have a version number. The number starts from 1.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.Date">
            <summary>
            Gets the date and time when this page version was last changed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.Page">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPage">Page</see> to which this page version belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.SchemaVersion">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISchemaVersion">Schema Version</see> this on which this page version is based.
            It could be based on a previous version of the <see cref="T:Ingeniux.CMS.ISchema">Schema</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.Presentations">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.Presentation.IPagePresentationCollection">Presentations</see> of this page version. This value is null by default, meaning there is no presentation for rendering in Page Builder mode.
            </summary>
            <remarks>
            <para>
            <see cref="T:Ingeniux.CMS.Presentation.IPagePresentationCollection">Presentations</see> are runtime rendering of a <see cref="T:Ingeniux.CMS.IPage">Page</see>, but stored as a data model instead of markup.
            </para>
            <para>It is the bridge between Ingeniux CMS' structured content and easy rendering customization without development.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.SchemaName">
            <summary>
            Gets the root name of the <see cref="T:Ingeniux.CMS.ISchema">Schema</see>, which is also the root element name of this page version's serialized XML document.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.ViewName">
            <summary>
            Gets and sets this page version's ViewName.
            </summary>
            <remarks>
            <para>ViewName refers of the name of the this page's view at runtime in an MVC development environment.</para>
            <para>This property instructsthe Dynamic Site Server to select the view when rendering this page at runtime.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPageVersion.Layout"/>
        </member>
        <member name="P:Ingeniux.CMS.IPageVersion.Layout">
            <summary>
            Gets and sets the page version's layout, which is the file name of its XSLT style sheet.
            </summary>
            <remarks>
            <para>Layout serves as backup rendering mechanism when ViewName is not specified or cannot be found.</para>
            </remarks>
            <example>
            Example of Layout value: "default.xsl"
            </example>
            <seealso cref="P:Ingeniux.CMS.IPageVersion.ViewName"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Path">
            <summary>
            Retrieves the string path of the page names, starting from the content store root node. Delimited by "/".
            </summary>
            <returns>
            String of all ancestors names and its own name, delimited by "/".
            <example>
            Content Store/Site/Home/About Us
            </example>
            </returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.MarkedForPublish">
            <summary>
            Finds out whether the page is marked for publish on any <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <returns>True if Page is marked on one or more Publishing Target, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.MarkedForPublishOnTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Finds out whether the page is marked for publish on a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="pugTarget">The publishing target on which to check this page's mark-for-publish status.
            <remarks>If null, method returns false.</remarks>
            </param>
            <returns>True if the page is marked on the specified publishing target, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.MarkedForPublishOnTarget(System.String)">
            <summary>
            Finds out whether the page is marked for publish on a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="pugTargetId">The publishing id target on which to check this page's mark-for-publish status.
            <remarks>If null, method returns false.</remarks>
            </param>
            <returns>True if the page is marked on the specified publishing target, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.MarkedForPublishPropagated">
            <summary>
            Finds out whether the page is marked on all <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>, and the marked versions are the targets are the latest version of this page.
            </summary>
            <returns>True if the page is marked with its latest version on all Publishing Targets, false otherwise</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves this page's child pages.
            </summary>
            <param name="count">Total count of all child pages.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of child pages</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Siblings(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Ancestors(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.ChildrenCount">
            <summary>
            Returns the count of child pages of this page.
            </summary>
            <returns>Count of child pages</returns>		
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.PreviousSibling">
            <summary>
            Retrieves the sibling page that precedes the given page on the content tree.
            </summary>
            <returns>Previous sibling page. If the page is the first page among its siblings, this method returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.NextSibling"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Siblings(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.NextSibling">
            <summary>
            Retrieves the sibling Page succeeds the given page on the content tree.
            </summary>
            <returns>Next sibling Page. If the page is the last page among its siblings, this method returns null</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.PreviousSibling"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Siblings(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Siblings(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves sibling pages of this page on the content tree.
            </summary>
            <param name="count">Total count of all sibling pages</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of sibling pages</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Ancestors(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AncestorsIDs(Ingeniux.CMS.IHierarchyId)">
            <summary>
            Retrieves the metadata of all this page's ancestor pages. The results are returned in ascending order based on the pages' hierarchy level.
            </summary>
            <param name="count">Optional root for ancestors call. The call will not include any pages above the root.</param>
            <returns>Collection of ancestor pages' metadata</returns>
            <remarks>If the page is the content store root, returns empty collection.</remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDs(System.Int32@,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDsWithMaxDepth(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Ancestors(Ingeniux.CMS.IHierarchyId)">
            <summary>
            Retrieves all of this page's ancestor pages. The results are returned in ascending order based on the pages' hierarchy level.
            </summary>
            <param name="count">Optional root for ancestors call. The call will not include any pages above the root.</param>
            <returns>Collection of ancestor pages' metadata</returns>
            <remarks>If the page is the content store root, returns empty collection.</remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Siblings(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AncestorsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AncestorsCount">
            <summary>
            Returns the count of ancestors for this page.
            </summary>
            <returns>Count of all ancestor pages</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Ancestors(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the descendants of this page. The results are returned in descending order based on the pages' hierarchy level.
            </summary>
            <param name="count">Total count of all descendant pages</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of descendants</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsWithMaxDepth(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDs(System.Int32@,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.DescendantsWithMaxDepth(System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the descendants of this page within the given depth limit.
            </summary>
            <param name="count">Total count of all descendant pages within the given depth limit</param>
            <param name="maxDepth">The depth limit of descendants, relative of this page's hierarchy level.
            <example>A maxDepth value of 2 means to retrieve the descendants that are within 2 levels below the given page.</example>
            <remarks>A maxDepth of 0 means to retrieve all descendants.</remarks>
            </param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of descendant pages within the depth limit</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDsWithMaxDepth(System.Int32@,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.DescendantsIDs(System.Int32@,System.Int32)">
            <summary>
            Retrieves metadata of the descendants of this page. The results are returned in ascending order based on the pages' hierarchy level.
            </summary>
            <param name="count">Total count of all descendant pages.</param>
            <returns>Collection of metadata of descendant pages</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsWithMaxDepth(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            /// <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDsWithMaxDepth(System.Int32@,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.DescendantsIDsWithMaxDepth(System.Int32@,System.Int32)">
            <summary>
            Retrieves metadata of the descendants of this page within the given depth limit.
            </summary>
            <param name="count">Total count of all descendant pages within the given depth limit..</param>
            <param name="maxDepth">The depth limit of descendants, relative of this page's hierarchy level.
            <example>A maxDepth value of 2 means to retrieve the descendants that are within 2 levels below the given page.</example>
            <remarks>A maxDepth of 0 means to retrieve all descendants.</remarks>
            </param>
            <returns>Collection of metadata of descendant pages within the depth limit</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsWithMaxDepth(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.DescendantsIDs(System.Int32@,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Children(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.DescendantsCount">
            <summary>
            Returns the count of all descendants of this page.
            </summary>
            <returns>Count of all descendants</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Descendants(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.IsDescendantOf(Ingeniux.CMS.IPage)">
            <summary>
            Checks whether this page is a descendant of another given page.
            </summary>
            <param name="ancestorPage">The given potential ancestor page to check against</param>
            <returns>True if this page descends from the given ancestor page, false otherwise</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Parent">
            <summary>
            Retrieves the parent page of the given page.
            </summary>
            <returns>Parent page of this page. If the page is <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see> root, returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Ancestors(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RegionRoot">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.ILocale">Locale</see> (language) root of this page.
            </summary>
            <returns>Region root page of this page. If this page itself is a region root, returns itself.</returns>
            <remarks>
            <para>Language root pages refers to pages that have <see cref="T:Ingeniux.CMS.ILocale">Languages</see> explicitly specified. When a page has a specific language, its descendants will inherit the same language and use this page as the language root.</para>
            <para>If the page doesn't have any <see cref="T:Ingeniux.CMS.ILocale">Language</see> setting, then this method returns null.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckedInPage">
            <summary>
            Retrieves the checked-in content of this page. 
            If the page is checked out, there could be potential differences between the content of the page and result of this method.
            </summary>
            <returns>The content of the checked-in version of this page.</returns>
            <remarks>When a page is just created from its <see cref="T:Ingeniux.CMS.ISchema">Schema</see>, the content of the checked-in page is the original default or empty content from the schema.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CloneLingualMaps(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the lingual maps between this page and its clone pages.
            </summary>
            <param name="count">Total count of all clone pages.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of this page's clone maps. If this page has no clone pages, this method returns an empty collection.</returns>
            <seealso cref="P:Ingeniux.CMS.IPage.MasterLingualMap"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CloneLingualMapsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CloneLingualMapsCount">
            <summary>
            Returns the count of all clone lingual maps.
            </summary>
            <returns>Count of all clone maps. Returns 0 if the page has no clone pages.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.CloneLingualMaps(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Rollback">
            <summary>
            Reverts a page's content to that of its latest previous <see cref="T:Ingeniux.CMS.IPageVersion">Version</see>.
            </summary>
            <remarks>
            <para>If the page was never checked in before, an error will be thrown.</para>
            <para>This method can be called on both checked-in and checked-out pages. Either way, after executing the method, the page will in the <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">checked in</see> state.</para>
            <para>Two events are fired during execution of this method: "<see cref="E:Ingeniux.CMS.IPageEvents.BeforePageRollback">BeforePageRollback</see>" and "<see cref="E:Ingeniux.CMS.IPageEvents.AfterPageRollback">AfterPageRollback</see>"</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.RevertToVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.UndoCheckOut(System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidate(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})">
            <summary>
            Checks in the page itself without applying validations before check-in.
            </summary>
            <param name="pubTargets">Collection of publishing targets on which to check in this page. These publishing targets will mark the page on its latest version. If not specified, no publishing target will mark the page on its latest version.</param>
            <remarks>Check-in validations are in place to make sure that the content of checked-in pages meets the criteria to be ready for publishing. Therefore, use this method only when necessary.</remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidateOnProfile(Ingeniux.CMS.IPublishingProfile)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidateOnProfile(Ingeniux.CMS.IPublishingProfile)">
            <summary>
            Checks in the page itself, without applying validations before check-in, toward the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> included in the <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>.
            </summary>
            <param name="profile">The publishing profile that includes publishing targets toward which to check in the page. If not specified, no publishing target will have marking changed on this page.</param>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidate(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">
            <summary>
            Checks in either the page itself or the page and its descendants. 
            </summary>
            <param name="pubTargets">Collection of publishing targets toward which to check in this page. These publishing targets mark the page on its latest version. If not specified, no publishing target will change marking on this page.</param>
            <param name="recursive">Specifies whether to also check in the descendants of this page.</param>
            <returns>Count of pages operated on</returns>
            <remarks>
            <para>If the page was already checked in, the operation will continue to check in descendants and mark the page's latest version on provided publishing targets.</para>
            <para>The current user must have the permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_CHECKOUT">check in and check out pages</see>. Otherwise, an error will be thrown.</para>
            <para>The current user must have <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error will be thrown.</para>
            <para>If the page is not assigned to the current user and the current user doesn't have to right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_OTHERS">check in other user's pages</see>, an error will be thrown.</para>
            <para>If the page contains required <see cref="T:Ingeniux.CMS.IElement">Elements</see> that don't have values filled in, an error will be thrown.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageCheckIn">BeforePageCheckIn</see> and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageCheckIn">AfterPageCheckIn</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidate(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidateOnProfile(Ingeniux.CMS.IPublishingProfile)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInOnProfile(Ingeniux.CMS.IPublishingProfile,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckedInPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckInOnProfile(Ingeniux.CMS.IPublishingProfile,System.Boolean)">
            <summary>
            Checks in either the page itself or the page and its descendants toward the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> included in the <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>.
            </summary>
            <param name="profile">The publishing profile that includes the publishing targets toward which to check in the page. If not specified, no publishing target will mark the page on its latest version.</param>
            <param name="recursive">Specifies whether to also check in the descendants of this Page together.</param>
            <remarks>
            <para>If the page was already checked in, the operation will continue to check in descendants and mark the page's latest version on the publishing targets included in the publishing profile.</para>
            <para>The current user must have permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_CHECKOUT">check in and check out pages</see>. Otherwise, an error will be thrown.</para>
            <para>The current user must have <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error will be thrown.</para>
            <para>If the page is not assigned to the current user and the current user doesn't have to right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_OTHERS">check in other user's pages</see>, an error will be thrown.</para>
            <para>If the page contains required <see cref="T:Ingeniux.CMS.IElement">Elements</see> that don't have values filled in, an error will be thrown.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageCheckIn">BeforePageCheckIn</see> and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageCheckIn">AfterPageCheckIn</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidate(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckInSingleWithNoValidateOnProfile(Ingeniux.CMS.IPublishingProfile)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckedInPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)">
            <summary>
            Checks out the page and assigns it to the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">current user</see>.
            A page can only be edited after it is checked out to the current user.
            </summary>
            <param name="recursive">Specifies whether to also check out the descendants of this page.</param>
            <returns>Count of pages operated over</returns>
            <remarks>
            <para>If a page was already checked out, this method will continue to check out descendants. If not a recursive operation, nothing will happen.</para>
            <para>The current user must have permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_CHECKOUT">check in and check out pages</see>. Otherwise, an error will be thrown.</para>
            <para>The current user must have <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error will be thrown.</para>
            <para>If the page was assigned to another user and the current user doesn't have the right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ASSIGNMENT">assign a page</see>, an error will be thrown.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageCheckOut">BeforePageCheckOut</see> and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageCheckOut">AfterPageCheckOut</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.UndoCheckOut(System.Boolean)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.CheckedOut"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.UndoCheckOut(System.Boolean)">
            <summary>
            Discards the changes in checked-out content and reverts the page to a checked-in state.
            </summary>
            <param name="recursive">Specifies whether to also undo check out on the descendants of this page.</param>
            <remarks>
            <para>If page wasn't checked out, nothing will happen.</para>
            <para>The current user must have permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_CHECKOUT">check in and check out pages</see>. Otherwise, an error will be thrown.</para>
            <para>The current user must have <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error will be thrown.</para>
            <para>If the page is not assigned to the current user and the current user doesn't have the right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_OTHERS">check in other users' pages</see>, an error will be thrown.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageUndoCheckOut">BeforePageUndoCheckOut</see> and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageUndoCheckOut">AfterPageUndoCheckOut</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.CheckedOut"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.CreateChildPage(System.String,Ingeniux.CMS.ISchema,System.Boolean)">
            <summary>
            Creates a new child page under the current page.
            </summary>
            <param name="name">Name of the new child page to create.</param>
            <param name="schema">Schema to be used to create the child Page. If not specified, error will be thrown.</param>
            <param name="insertAtBeginning">Specified whether to create the child page as the first child or last child.</param>
            <returns>Newly created child page</returns>
            <remarks>
            <para>If the current user doesn't have the permission to create pages, an error will be thrown.</para>
            <para>If a schema is not provided, an error will be thrown.</para>
            <para>If the parentPage value is the <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>, an error will be thrown.</para>
            <para>If the current user doesn't have <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see> to this page, an error will be thrown.</para>
            <para>The event "<see cref="E:Ingeniux.CMS.ISiteEvents.PageCreated">PageCreated</see>" will be fired upon child page creation.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.CreatePage(Ingeniux.CMS.ISchema,System.String,Ingeniux.CMS.IPage,System.Boolean,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveChildPage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemoveChildPage(Ingeniux.CMS.IPage)">
            <summary>
            Removes a child Page of this page.
            </summary>
            <param name="child">The child page to removed. If not provided, this method returns false.</param>
            <remarks>
            <para>If a child page isn't provided or that page is not child of this page this method returns false.</para>
            <para>The current user must have permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE">Delete</see> pages. Otherwise, an error will be thrown.</para>
            <para>The current user must have <see cref="!:Ingeniux.CMS.Enums.EnumUserRight.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error will be thrown.</para>
            <para>If the page is not assigned to the current user and the current user doesn't have to right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ASSIGNMENT">assign other users' pages</see>, an error will be thrown.</para>
            <para>Two events are fired by this method on the page to be removed: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageDelete">BeforePageDelete</see> and <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageDelete">AfterPageDelete</see></para>
            </remarks>
            <returns>True if the child page is successfully removed, false otherwise</returns>
            <seealso cref="P:Ingeniux.CMS.IPage.Removed"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IUserGroup">User Groups</see> that have the given <see cref="T:Ingeniux.CMS.Enums.EnumNodeLevelPermission">access level</see> on this page.
            </summary>
            <param name="security">Level of access by which to filter groups. Groups with an equal or higher access level are returned.</param>
            <param name="exactLevelMatch">Specifies whether to return groups with an equal or higher access levels or only groups with equal access levels.</param>
            <returns>Collection of groups that match the criteria. Empty collection if no matches.</returns>
            <seealso cref="P:Ingeniux.CMS.IPage.SecurityInherited"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)">
            <summary>
            Sets the access level to this page for a specific <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see>.
            Successful execution of this method causes the <see cref="P:Ingeniux.CMS.IPage.SecurityInherited">SecurityInherited</see> property to be set to false.
            </summary>
            <param name="security">Access level of the given user group</param>
            <param name="group">User group to set access level for on this page</param>
            <seealso cref="P:Ingeniux.CMS.IPage.SecurityInherited"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Removes the access rights of a given <see cref="T:Ingeniux.CMS.IUserGroup">user group</see> to this page.
            </summary>
            <param name="group">User Group whose access is to be removed</param>
            <returns>True if given user group's access is successfully removed. Otherwise, returns false.</returns>
            <remarks>
            <para>If this Page's security is inherited, no action will be taken and method returns false.</para>
            <para>If the Group parameter is not provided, this method returns false.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.SecurityInherited"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.Enums.EnumNodeLevelPermission">access level</see> of specific <see cref="T:Ingeniux.CMS.IUser">User</see>. The access level is the highest access level of all the 
            <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> to which this user belongs.
            </summary>
            <param name="user">The user for which to check access level. When this value is null or omitted, this method returns the access level of the current user—the user that retrieved this page object.</param>
            <returns>The highest access level of all <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> to which the <see cref="T:Ingeniux.CMS.IUser">User</see> belongs.</returns>
            <seealso cref="P:Ingeniux.CMS.IPage.SecurityInherited"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AllowUser(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SecurityGroupsCount">
            <summary>
            Retrieves the count of <see cref="T:Ingeniux.CMS.IUserGroup">User Groups</see> that have a security setting—either explicit or inherited from parent pages—on this page.
            </summary>
            <returns>Count of groups that have security settings on this page</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.ClearSecurity">
            <summary>
            Clears all access to this page. Note that if no further security setting procedures are taken, no one except administrators will have access to this page .
            This action permenantly removes the security descriptor for this page.
            </summary>
            <returns>Returns true if this page has a security descriptor. It returns false otherwise.</returns>
            <remarks>
            <para>If this page's security is inherited, no action occurs and the method returns false.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AllowUser(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)">
            <summary>
            Checks whether the given user was granted the specified <see cref="T:Ingeniux.CMS.Enums.EnumNodeLevelPermission">access level</see>.
            </summary>
            <param name="user">The user whose access level will be checked</param>
            <param name="security">The access level</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IUser">User</see> has equal or higher access level, false if the user doesn't.</returns>
            <seealso cref="P:Ingeniux.CMS.IPage.SecurityInherited"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.GetSystemAttribute(Ingeniux.CMS.Enums.EnumSystemAttributes)">
            <summary>
            Retrieves a system attribute by its enum value. System attributes are attributes on a page document that contain the page's metadata.
            </summary>
            <param name="attrID">Enum value of the system attribute to retrieve</param>
            <returns>System attribute. Returns null if the system attribute doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SetSystemAttribute(Ingeniux.CMS.Enums.EnumSystemAttributes,Ingeniux.CMS.IAttribute)">
            <summary>
            Sets value for a system attribute.
            </summary>
            <param name="attrID">Enum value of the system attribute to set</param>
            <param name="newVal">New system attribute object</param>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SetSystemAttribute(Ingeniux.CMS.Enums.EnumSystemAttributes,System.String)">
            <summary>
            Sets string value for a system attribute.
            </summary>
            <param name="attrID">Enum value of the system attribute to set</param>
            <param name="newVal">New system attribute string value</param>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)">
            <summary>
            Assigns this page to a specific <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="user">User to whom to assign the page</param>
            <param name="comment">Comments for this assignment action</param>
            <remarks>
            <para>If the user parameter is null, this is an unassign operation.</para>
            <para>If the page currently assigned to a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>, the new user must be a member of this group. Only administrators are allowed to assign this page to a user that is not a member of the Assigned Group.</para>
            <para>When the page is not in a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>, the comment specified will be set on the page itself in the <see cref="P:Ingeniux.CMS.IPage.AssignmentComment">AssignmentComment</see> property.</para>
            <para>When the page is in a workflow, the specified user must be a member of the <see cref="P:Ingeniux.CMS.IWorkflow.CurrentGroup">CurrentGroup</see> of the workflow. Otherwise, an error will be thrown.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageAssign">BeforePageAssign</see>, and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageAssign">AfterPageAssign</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.AssignmentComment"/>
            <seealso cref="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)">
            <summary>
            Assigns this page to a specific <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see>.
            </summary>
            <param name="group">User group to which to assign the page</param>
            <param name="comment">Comments for this assignment action</param>
            <remarks>
            <para>If the group parameter is null, this is an unassign operation.</para>
            <para>When a page is not in a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>, the comment specified will be set on the page itself into the <see cref="P:Ingeniux.CMS.IPage.AssignmentComment">AssignmentComment</see> property.</para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.IPageEvents.BeforePageAssign">BeforePageAssign</see>, and <see cref="E:Ingeniux.CMS.IPageEvents.AfterPageAssign">AfterPageAssign</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.AssignmentComment"/>
            <seealso cref="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser">
            <summary>
            Assigns the Page to the current operating <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <remarks>
            <para>This method call requires that the page be assigned to a <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> and that the current user be a member of that group. Otherwise, an error will be thrown.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.AssignmentComment"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AddToWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IUser)">
            <summary>
            Adds this page to workflow. This operation creates a new workflow instance for this page based on the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> provided
            and assigns the page to the specified <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="workflowDefinition">Definition of the workflow to create the workflow instance</param>
            <param name="assignToUser">User to assign the page to after it is added to workflow</param>
            <returns>The newly created workflow instance.</returns>
            <remarks>
            <para>If this page is already in a workflow, it is first removed from that workflow.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AddToWorkflowDefault(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveFromWorkflow"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AddToWorkflowDefault(Ingeniux.CMS.IWorkflowDefinition)">
            <summary>
            Adds this page to a workflow. 
            If the initial <see cref="T:Ingeniux.CMS.ITransition">Transition</see> has a <see cref="P:Ingeniux.CMS.ITransition.DefaultUser">Default User</see> specified, the page will be assigned to that user. 
            Otherwise, it will be assigned to the <see cref="P:Ingeniux.CMS.ITransition.NextGroup">Next Group</see> specified by the transition.
            This operation creates a new workflow instance for this page based on the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> provided.
            </summary>
            <param name="workflowDefinition">Definition of the Workflow to create the workflow instance</param>
            <param name="assignToUser">User to assign the page to after it is added to workflow</param>
            <returns>The newly created workflow instance.</returns>
            <remarks>
            <para>If this Page is already in a workflow, it is first removed from that workflow.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AddToWorkflowDefault(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveFromWorkflow"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemoveFromWorkflow">
            <summary>
            Removes the page from its <see cref="P:Ingeniux.CMS.IPage.CurrentWorkflow">Current Workflow</see>.
            </summary>
            <remarks>
            <para>No action is taken if the page is not in workflow.</para>
            <para>If the page is in a <see cref="P:Ingeniux.CMS.IWorkflow.Locked">Locked</see> workflow, an error is thrown.</para>
            <para>If page is checked in, it is unassigned from any group and user after it is removed from workflow.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.AddToWorkflowDefault(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AddToWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Republish(Ingeniux.CMS.IPublishingTarget,System.Boolean,System.Boolean)">
            <summary>
            Publishes the page, with or without its descendants, to the specified <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="pubTarget">Publishing target to publish to; this value is required. </param>
            <param name="recursive">Publish the page itself or with its descendants</param>
            <param name="incremental">Incremental or full publish</param>
            <remarks>
            <para>If pubTarget is null, an error is thrown.</para>
            <para>If the current user doesn't have the permissions to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_PUBLISH">perform publishes</see>, an error is thrown.</para>
            <para>If the current user doesn't have access to the given publishing target, an error is thrown.</para>
            <para>If the publish is incremental and current user doesn't have permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_PUBLISH_INCREMENTAL">perform incremental publishes</see>, an error is thrown.</para>
            <para>If the page is under the given publishing target, no action is taken.</para>
            <para>For incremental publishes, only the pages that were updated since the last publish will be published.</para>
            <para>Before the publish task is submitted, the event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublish">BeforePublish</see> is fired. The event <see cref="!:Ingeniux.CMS.IPublishingTargetEvents.AfterPublish">AfterPublish</see> is fired when the publish task finishes.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Unassign(System.String)">
            <summary>
            Removes the assignment of this page so that it doesn't belong to any <see cref="P:Ingeniux.CMS.IPage.AssignedUser">User</see> or <see cref="P:Ingeniux.CMS.IPage.AssignedGroup">Group</see>.
            </summary>
            <param name="comment">Comments on the unassign action</param>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemoveChildren">
            <summary>
            Removes all children of this page. If the page is not in the <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>, the child pages will be moved there.
            Otherwise, they are permenantly deleted.
            </summary>
            <remarks>
            <para>If the child page is not provided or that page is not child of this page, returns false.</para>
            <para>The current user must have the permission to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE">Delete</see> pages. Otherwise, an error is thrown.</para>
            <para>The current user must have <see cref="!:Ingeniux.CMS.Enums.EnumUserRight.FULL_ACCESS">Full Access</see> to this page. Otherwise, an error is thrown.</para>
            <para>If the page is not assigned to the current user and the current user doesn't have to right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ASSIGNMENT">assign other users' pages</see>, error will be thrown.</para>
            <para>Two events are fired by this method: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageDelete">BeforePageDelete</see> and <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageDelete">AfterPageDelete</see>, on the direct child pages of this page.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Versions(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the version history of this page. The items are returned by version number in descending order.
            </summary>
            <param name="count">Total count of previous versions.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of previous versions.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.VersionsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.VersionsCount">
            <summary>
            Gets the count of all previous versions of this page.
            </summary>
            <returns>Count of all previous versions</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.Versions(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Version(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of this page by version number.
            </summary>
            <param name="versionNumber">Version number of the version to retrieve</param>
            <returns>Version with matching version number</returns>
            <remarks>
            <para>If the version number is the version number of current version, or less than or equal to 0, the current (checked-in) version is returned.</para>
            <para>If the version number is greater than 0 and no previous version has the matching version number, this method returns null.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.Versions(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="P:Ingeniux.CMS.IPage.LastVersion"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RevertToVersion(Ingeniux.CMS.IPageVersion)">
            <summary>
            Reverts the page's content to that of a given <see cref="T:Ingeniux.CMS.IPageVersion">Version</see>.
            </summary>
            <param name="version">Version to which to revert</param>
            <remarks>
            <para>If version is null, the current version, or a checked-out version, no action is taken.</para>
            <para>If the version doesn't belong to this page, an error is thrown.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.Version(System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.IsValidRuleTarget(Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Checks whether, with the given <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see>, pages can be created as children of this page.
            </summary>
            <param name="rule">The page creation rule to check against</param>
            <returns>True if the page creation rule can be used to create pages under this page, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.PageCreationRules">
            <summary>
            Retrieves the collection of page creation rules that can be used to create pages under this page. The collection also includes the information on whether the PCR covers descendants.
            </summary>
            <returns>Collection of PCRs and whether each rule cover the page only or also includes descendants.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.PageCreationRulesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.PageCreationRulesCount">
            <summary>
            Retrieves the count of the collection of <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> that can be used to create pages under this page.
            </summary>
            <returns>Count of page creation rules</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SetPageCreationRule(Ingeniux.CMS.IPageCreationRule,System.Boolean)">
            <summary>
            Sets a page creation rule (PCR) descriptor on this page.
            When executed successfully, this action sets <see cref="P:Ingeniux.CMS.IPage.RulesInherited"/> to false.
            If this page never had a PCR descriptor before, it will be created automatically. Otherwise, it will resume on the existing descriptor.
            </summary>
            <param name="rule">PCR to set on the page</param>
            <param name="dontIncludeDescendants">Specifies whether the PCR covers all descendants of this page or just the page itself</param>
            <seealso cref="M:Ingeniux.CMS.IPage.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> (PCR) from this page.
            </summary>
            <param name="rule">PCR to remove</param>
            <returns>If the rule isn't specified or doesn't belong to this page, this method returns false. Returns true when successful.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.SetPageCreationRule(Ingeniux.CMS.IPageCreationRule,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.ClearRules"/>
            <remarks>
            <para>When all PCRs are removed from this page, the PCR descriptor will be removed, too, and <see cref="P:Ingeniux.CMS.IPage.RulesInherited"/> will be set to false.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPage.ClearRules">
            <summary>
            Removes all <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> from this page. This action permanently  removes the PCR descriptor for this page.
            </summary>
            <returns>Returns true if this page's PCRs are inherited, false otherwise</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SendGroupNotificationMail(Ingeniux.CMS.IUserGroup,Ingeniux.CMS.IUser,System.String,Ingeniux.CMS.IWorkflow,Ingeniux.CMS.ITransition)">
             <summary>
             Sends out a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> notification email to all <see cref="T:Ingeniux.CMS.IUser">Users</see> of a given <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
             </summary>
             <param name="group">The group to send email to. All users with valid email addresses in this group will receive the email.</param>
             <param name="assignToUser">The user this page will be assigend to after the given <see cref="T:Ingeniux.CMS.ITransition">Transition</see></param>
             <param name="comment">The comments the user put in during workflow advancement</param>
             <param name="workflow">The workflow this page is currently on</param>
             <param name="transition">The transition to be used to advance the page in workflow</param>
             <remarks>
             <para>This method will not send out emails if the <see cref="P:Ingeniux.CMS.IUserManager.SendWorkFlowNotificationMail">SendWorkFlowNotificationMail</see> setting is false.</para>
             <para>The subject and body of the workflow notification email are based on a predefined template, located in the App_Data\xml\custom\emailNotifications folder. </para>
             <para>The file name of the workflow notification email template is workflowNotifications.xml.</para>
             <para>Modify this file to change the email content.</para>
             <example>
             Workflow notification email template default content. Note that the names between two percent characters ("%")are variables; these are case-sensitive.
            		<code language="xml">
            	<![CDATA[
            	<?xml version="1.0" encoding="utf-8" ?>
            <EmailTemplate>
            	<Subject>%siteName% - %workflowName% Notification - %pageName% - %pageId%</Subject>
            	<Body>
            		<p><strong>Workflow Notification</strong></p>
            		<p><em><a href="mailto:%workingUserEmail%">%workingUserName%</a> </em>advanced the item <em><a href="%siteUrl%?ID=%pageId%">%pageName% (%pageId%)</a> </em>through the "<em>%transitionName%</em>" transition in the "<em>%workflowName%</em>" workflow, and assigned it to <em><a href="mailto:%nextUserEmail%">%nextUserName%</a></em></p>
            		<p> </p>
            		<p><strong>Comments from Assigning User:</strong>
            		<br /><em>%comments%</em></p>
            		<p> </p>
            		<p><strong>View Item:</strong><br/><a href="%siteUrl%?ID=%pageId%">%siteUrl%?ID=%pageId%</a></p>
            	</Body>
            </EmailTemplate>	
             ]]>
            		</code>
             </example>
             </remarks>
             <seealso cref="M:Ingeniux.CMS.IPage.SendWorkFlowNotificationMail(Ingeniux.CMS.IWorkflow,Ingeniux.CMS.ITransition,Ingeniux.CMS.IUser,System.String,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SendWorkFlowNotificationMail(Ingeniux.CMS.IWorkflow,Ingeniux.CMS.ITransition,Ingeniux.CMS.IUser,System.String,System.String)">
             <summary>
             Sends a workflow notification email to the given recipients.
             </summary>
             <param name="workflow">The workflow this page is currently on</param>
             <param name="transition">The transition to be used to advance the page in workflow</param>
             <param name="assignToUser">The user this page will be assigend to after the given <see cref="T:Ingeniux.CMS.ITransition">transition</see></param>
             <param name="emailRecipients">The email addresses of the recipients, delimited by semicolons.</param>
             <param name="comment">The comments user put in during workflow advancement</param>
             <remarks>
             <para>The subject and body of workflow notification email are based on a predefined template located in the App_Data\xml\custom\emailNotifications folder. </para>
             <para>The file name of the workflow notification email template is workflowNotifications.xml.</para>
             <para>Modify this file to change the email content.</para>
             <example>
             Workflow notification email template default content. Note that the names between two percent characters ("%")are variables; these are case-sensitive.
            		<code language="xml">
            	<![CDATA[
            	<?xml version="1.0" encoding="utf-8" ?>
            <EmailTemplate>
            	<Subject>%siteName% - %workflowName% Notification - %pageName% - %pageId%</Subject>
            	<Body>
            		<p><strong>Workflow Notification</strong></p>
            		<p><em><a href="mailto:%workingUserEmail%">%workingUserName%</a> </em>advanced the item <em><a href="%siteUrl%?ID=%pageId%">%pageName% (%pageId%)</a> </em>through the "<em>%transitionName%</em>" transition in the "<em>%workflowName%</em>" workflow, and assigned it to <em><a href="mailto:%nextUserEmail%">%nextUserName%</a></em></p>
            		<p> </p>
            		<p><strong>Comments from Assigning User:</strong>
            		<br /><em>%comments%</em></p>
            		<p> </p>
            		<p><strong>View Item:</strong><br/><a href="%siteUrl%?ID=%pageId%">%siteUrl%?ID=%pageId%</a></p>
            	</Body>
            </EmailTemplate>	
             ]]>
            		</code>
             </example>
             </remarks>
             <seealso cref="M:Ingeniux.CMS.IPage.SendGroupNotificationMail(Ingeniux.CMS.IUserGroup,Ingeniux.CMS.IUser,System.String,Ingeniux.CMS.IWorkflow,Ingeniux.CMS.ITransition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AssociatedCategories(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.ICategoryNode">Categories</see> associated with this page.
            </summary>
            <param name="count">Total count of all associated categories.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of categories associated with this page</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AddCategories(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ICategoryNode})"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AssociatedCategoriesCount">
            <summary>
            Gets the count of the <see cref="T:Ingeniux.CMS.ICategoryNode">Categories</see> that are associated with this page.
            </summary>
            <returns>Count of associated categories</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategories(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AddCategories(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ICategoryNode})"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.AddCategories(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ICategoryNode})">
            <summary>
            Adds <see cref="T:Ingeniux.CMS.ICategoryNode">Categories</see> association to this Page. Which also means, categorized this page
            with given categories.
            </summary>
            <param name="cat">Categories to associate with this page</param>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategories(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.RemoveCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Removes the association between this page and the specified <see cref="T:Ingeniux.CMS.ICategoryNode">Category</see>.
            </summary>
            <param name="cat">Category to remove</param>
            <returns>True if <see cref="T:Ingeniux.CMS.ICategoryNode">Category</see> was associated with the Page before and successfully removed. Returns false if the category is null or wasn't associated with the page before.</returns>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategories(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssociatedCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AddCategories(System.Collections.Generic.IEnumerable{Ingeniux.CMS.ICategoryNode})"/>
        </member>
        <member name="M:Ingeniux.CMS.IPage.SerializeCheckedInVersion">
            <summary>
            Returns the XML element that was serialized from the checked-in version of this page.
            </summary>
            <returns>XML serialization of the checked-in version</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPage.Save">
            <summary>
            Saves this page's XML content. This method must be called to update a page's XML content.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPage.ContentUnitsInstantiability">
            <summary>
            Gets the collection of information on whether a Content Unit can be instantiated, and how many times it can be instantiated.
            </summary>
            <remarks>This property will fetch the page's schema first. Avoid to use it in large collection iteration.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Hierarchy">
            <summary>
            Gets the hierarchy value of the page in the content tree.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.StartDate">
            <summary>
            Gets and sets the start date of the page. When set, this page will not be included in navigations when current time is less than the StartDate value.
            </summary>
            <remarks>Defaults to null value, which means there is no start date.</remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.EndDate"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.EndDate">
            <summary>
            Gets and sets the end date of the page. When set, this page will not be included in navigations when current time is greater than the EndDate value.
            </summary>
            <remarks>Defaults to null value, which means there is no end date.</remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.StartDate"/>/// 
        </member>
        <member name="P:Ingeniux.CMS.IPage.IsComponent">
            <summary>
            Gets whether this page is a component. Components are used as part of other pages, don't have their own URL entries, and don't have specific view or style sheet rendering specified in content.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.CheckedOut">
            <summary>
            Gets whether this page is checked out. A page has to be checked out to a specific <see cref="T:Ingeniux.CMS.IUser">User</see> to be edited.
            A page's checked-out content is subject to modification by the assigned <see cref="T:Ingeniux.CMS.IUser">User</see>. 
            These modifications can only be published if the page is checked in.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Removed">
            <summary>
            Gets whether the page is under Removed status, which means it is currently a descendant of the <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.
            </summary>
            <remarks>Removed pages cannot be <see cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)">checked out</see> or <see cref="!:Ingeniux.CMS.IPage.MarkForPublish">marked for publish</see>. A removed page must first be moved out of the Recycle Folder before it can behave like a normal page.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.NowSyncing">
            <summary>
            Gets whether the page is currently being synchronized to the latest version of the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> used to create it.
            </summary>
            <remarks>When a page is being synchronzied to its schema, it cannot be checked out or saved.</remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.JustSynced"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.JustSynced">
            <summary>
            Gets whether the page's content was updated via <see cref="T:Ingeniux.CMS.ISchema">Schema</see> synchronization and hasn't yet been modified directly.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPage.NowSyncing"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Icon">
            <summary>
            Gets and sets the icon of the page. The value is the numeric representation of the icon images.
            </summary>
            <remarks>Icon numeric values are subject to change and aren't listed here.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Schema">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> from which this page is based on.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPage.SchemaVersion"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.CreationSchema">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> from which this page was originally created from.
            Note that it is normally the same as <see cref="!:Ingeniux.Runtime.ISchema">Schema</see> property value, unless this Page has presentations and created a new Schema with the presentations.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPage.SchemaVersion"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.SchemaVersion">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISchemaVersion">Schema Version</see> which with this page is synchronized.
            Note that if the schema has not been updated and or sychronized to this page, the page will be on a older version of the schema.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPage.Schema"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.AssignedUser">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUser">User</see> to whom this page is currently assigned. If the page is not assigned to a user, this method returns null.
            </summary>
            <remarks>A page could be unassigned, assigned to a <see cref="T:Ingeniux.CMS.IUser">User</see> or assigned to a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>. Having an assigned user doesn't necessarily mean that the page is checked out to that user.</remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.AssignedGroup"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.AssignedGroup">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> to which this page is currently assigned. If the page is not assigned to a group, this method returns null.
            </summary>
            <remarks>
            A page could be unassigned, assigned to a <see cref="T:Ingeniux.CMS.IUser">User</see>, or assigned to a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>. 
            The method <see cref="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser"/> can only be called if the page is assigned to a group to which the current user belongs.
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.AssignedUser"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Locale">
            <summary>
            Gets and sets the language of this page.
            </summary>
            <remarks>
            <para>Setting the locale of a page is retricted under several conditions:</para>
            <para>The page doesn't inherit its locale from an ancestor page.</para>
            <para>The page isn't the ancestor of a page that has its locale specified already.</para>
            <para>If the above conditions are not met, calling this method throws an exception.</para>
            <para>After the locale is set on a page, all the page's descendants inherit it unless the <see cref="P:Ingeniux.CMS.IPage.CanParentRegionRoots">CanParentRegionRoots</see> property is true.</para>
            <para>If <see cref="P:Ingeniux.CMS.IPage.CanParentRegionRoots">CanParentRegionRoots</see> is true, this page will allow regions to to live under it, potentially allowing pages in another language as descendants.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.LocaleInherited"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.LocaleInherited">
            <summary>
            Gets whether this page inherits its locale from its ancestor page.
            </summary>
            <remarks>When a page doesn't have a locale set, it inherits its ancestor page's null locale. In that case, this property returns true.</remarks>
            <seealso cref="P:Ingeniux.CMS.IPage.Locale"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.MasterLingualMap">
            <summary>
            Gets the lingual map between this page and its Master Page.
            </summary>
            <remarks>If this page is not clone of any page, this method returns null.</remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.CloneLingualMaps(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.SerializeOnCheckIn">
            <summary>
            Determines whether to serialize an xID.xml file to the v9 XML root on check-in.
            </summary>
            <remarks>
            <para>By default, this property is set to false. It should only be used to deal with old XSLT sites that have legacy "document" calls in XSLT style sheets.</para>
            <para>It is recommended to remove these calls from XSLT stylesheets since missing these files could cause the rendering of Page to be completely broken.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.Site">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISite">Site</see> object that owns the current page. This Site object was the object in charge of retrieving or creating the current Page object.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.SecurityInherited">
            <summary>
            Gets and sets whether this page inherits security information from its parent page.
            </summary>
            <remarks>
            <para>By default, all pages inherit security information from the <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see> node x1.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityGroups(Ingeniux.CMS.Enums.EnumNodeLevelPermission,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SetSecurityGroup(Ingeniux.CMS.Enums.EnumNodeLevelPermission,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.RemoveSecurityGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.SecurityLevel(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.AssignmentComment">
            <summary>
            Gets the comments from assignments when the page was not in workflow.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.ClaimPageForCurrentUser"/>
            <remarks>
            <para>This method returns the last comment from the last manual assignment on the page when it wasn't in workflow. It is not necessarily the last comment when page was assigned.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.CurrentWorkflow">
            <summary>
            Gets the workflow this page is in. If page is not in a workflow, this method returns null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.LastVersion">
            <summary>
            Gets the most-recent previous version. It is the version before this page was last checked in.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IPage.Versions(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPage.Version(System.Int32)"/>
        </member>
        <member name="P:Ingeniux.CMS.IPage.RulesInherited">
            <summary>
            Gets and sets whether this page inherits the page creation rule (PCR) settings from its parent page or has its own page creation settings.
            </summary>
            <remarks>
            <para>By default, when a page is just created, this value of this property is true.</para>
            <para>When the first PCR is set to this page, the value becomes false.</para>
            <para>Changing this value from false to true, removes all PCR information from this page.</para>
            <para>Do not set the property to false directly. Instead to <see cref="M:Ingeniux.CMS.IPage.SetPageCreationRule(Ingeniux.CMS.IPageCreationRule,System.Boolean)">SetPageCreationRule</see> method to set a PCR.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPage.PCRDescriptorID">
            <summary>
            Gets the ID of a page creation rule (PCR) descriptor.
            PCR Descriptors are used to mark pages that have specific PCR settings. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.ReferenceMapping">
            <summary>
            Retrieves the directly referenced page IDs for this page. This mappings are reference pages added to this page.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPage.CanParentRegionRoots">
            <summary>
            Gets and sets whether this page allows region roots (pages with a noninherited locale) when the page isn't language-neutral.
            </summary>
            <remarks>
            <para>If this page doesn't have any locale information, the value of this property is alway true, and setting this property will not do anything</para>
            <para>If this page has locale information, then without the value being true, all of its children must inherit the locale this page has.</para>
            </remarks>
        </member>
        <member name="F:Ingeniux.CMS.Page.AdminRightsEnabled">
            <summary>
            Only available internally, mains used by workflow to bypass security restrictions
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.AncestorsInTree(Ingeniux.CMS.IHierarchyId,System.Collections.Generic.Dictionary{System.String,Ingeniux.CMS.IPage})">
            <summary>
            Get the ancestors within the pages provided
            </summary>
            <param name="rootPage"></param>
            <param name="rootDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Page.CheckChildrenIds">
            <summary>
            Depreciated, we use an index for children queries now
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.ResetChildIds">
            <summary>
            Depreciated, we use an index for children queries now
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.ClearChildIds">
            <summary>
            Depreciated, we use an index for children queries now
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.AddChildId(System.String)">
            <summary>
            Depreciated, we use an index for children queries now
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.RemoveChildId(System.String)">
            <summary>
            Depreciated, we use an index for children queries now
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.SecurityLevel(Ingeniux.CMS.IUser)">
            <summary>
            Get the security level of this page to current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Page.SetSystemAttribute(Ingeniux.CMS.Enums.EnumSystemAttributes,Ingeniux.CMS.IAttribute)">
            <summary>
            Set a system attribute
            </summary>
            <param name="attrID"></param>
            <param name="newVal"></param>
        </member>
        <member name="M:Ingeniux.CMS.Page.AssignUser(Ingeniux.CMS.IUser,System.String)">
            <summary>
            Set the assigned user for this page.
            </summary>
            <param name="user"></param>
            <param name="comment"></param>
        </member>
        <member name="M:Ingeniux.CMS.Page.ClaimPageForCurrentUser">
            <summary>
            Assign page to current user, Only allowed if page is assigned to any groups this user belongs to
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Page.IsValidRuleTarget(Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Determine if this page can be used by given rule to create pages under.
            To be a valid rule target, the page must allow given rule
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PageVersion.#ctor(Ingeniux.CMS.IPage,Ingeniux.CMS.ISchema)">
            <summary>
            This constructor is used to create a new version based on current page meta data
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Ingeniux.CMS.PageVersion.PresentationGroup">
            <summary>
            Only used for Checked Out Page Version Indexing
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PageVersion._PageFieldsForIndex">
            <summary>
            Because of the extensive logics involved to pull together the indexable elements listing, 
            it cannot be turned into a straight lamda in index definition and has to be stored here as dups
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.PageCreationRuleEntryForPage">
            <summary>
            Represents an page creation entry for specific page.
            </summary>
            <remarks>This object is used for return information only, not an entity</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IPageCreationRuleEntryForPage">
            <summary>
            Represents page creation information on a specific page. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRuleEntryForPage.Rule">
            <summary>
            Gets the page creation rule.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRuleEntryForPage.DontIncludeDescendants">
            <summary>
            Gets whether this page creation rule covers the descendants of the given page.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPCRParentPage">
            <summary>
            Represents an entry in the parent <see cref="T:Ingeniux.CMS.IPage">Pages</see> collection of a <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see>.
            It contains the parent page's information as well as whether or not this entry includes the parent page's descendants.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPCRParentPage.ParentPage">
            <summary>
            Retrieves the Parent Page object
            </summary>
            <returns>Parent Page object</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPCRParentPage.ParentPageID">
            <summary>
            Gets the ID of the parent page
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPCRParentPage.ParentPageName">
            <summary>
            Gets the name of the parent page
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPCRParentPage.DontIncludeDescendants">
            <summary>
            Gets whether the descendants of the parent page are available to page creation rules.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IExportDefinition">
            <summary>
            <para>Represents an entry in the <see cref="T:Ingeniux.CMS.IExportsElement">exports</see> of a <see cref="T:Ingeniux.CMS.INavigationElement">NavigationElement</see>.</para>
            <para>Exports are additional attributes appended to an expanded Link or Navigation XML element, adding more information to the Link or Navigation entry.</para>
            <para>This interface is used for <see cref="T:Ingeniux.CMS.ISchemaField">SchemaFields</see> on <see cref="T:Ingeniux.CMS.ISchemaVersion">Schemas</see> and for <see cref="T:Ingeniux.CMS.IGlobalExports">GlobalExports</see>.
            It is not for <see cref="P:Ingeniux.CMS.INavigationElement.LocalExports">LocalExports</see> on Navigation elements for <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </para>
            </summary>
            <remarks>Global exports also uses collections of this type.</remarks>
            <seealso cref="T:Ingeniux.CMS.IExportsElement"/>
            <seealso cref="T:Ingeniux.CMS.INavigationElement"/>
            <seealso cref="T:Ingeniux.CMS.ISchema"/>
        </member>
        <member name="P:Ingeniux.CMS.IExportDefinition.Name">
            <summary>
            Gets the name of the export. This is the name of the XML attribute to be added.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IExportDefinition.Query">
            <summary>
            Gets and sets the value of the export. This is the value of the XML attribute to be added.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IGlobalExportEntries">
            <summary>
            Represents the collection of global exports definitions.
            </summary>
            <remarks>
            This object is an entity stored in the content store. It can only be enumerated, not manipulated.
            </remarks>
            <seealso cref="T:Ingeniux.CMS.IGlobalExports"/>
        </member>
        <member name="T:Ingeniux.CMS.ITransactionalEntity">
            <summary>
            The base interface for all manager objects. It manages one or more types of object collections in the content store.
            Transactional entities are exclusive to the sessions that initiated them, and cannot be used across sessions.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IUserSession"/>
            <seealso cref="T:Ingeniux.CMS.IUserWriteSession"/>
        </member>
        <member name="M:Ingeniux.CMS.ITransactionalEntity.QuickWrite(System.Action{Ingeniux.CMS.IUserWriteSession})">
            <summary>
            Creates a temporary <see cref="T:Ingeniux.CMS.IUserWriteSession">Write Session</see> to quickly write something outside the current <see cref="T:Ingeniux.CMS.IUserSession">Session</see>  and transaction.
            This is a way to bypass the transaction and quickly put something into the content store.
            </summary>
            <param name="writeAction">Callback that performs the write action</param>
            <remarks>Do not use this method if transactional saving is intended.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ITransactionalEntity.DeepClone``2(``0)">
            <summary>
            Duplicates an object instance, not including its unique ID.
            </summary>
            <typeparam name="T">Type of the original object</typeparam>
            <typeparam name="TManager">Type of the manager object</typeparam>
            <param name="cloneFrom">Original object to clone from</param>
            <returns>The cloned object.</returns>
            <remarks>
            <para>Deep-cloning an object retains all of the original object's property values except the unique ID, creation user, creation time, last-modified user, and last-modified time.</para>
            <para>The cloned object is re-augmented with all the session information.</para>
            <para>Cloning a null object or an object from another session throws an error.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the cloneFrom object is null</exception>
            <exception cref="T:System.ArgumentException">When the cloneFrom object was retrieved from a different session.</exception>
        </member>
        <member name="P:Ingeniux.CMS.ITransactionalEntity.ContentStore">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransactionalEntity.Session">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUserSession">User Session</see> that this manager instance was initiated from.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransactionalEntity.CurrentUser">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUser">Operating User</see> for the <see cref="T:Ingeniux.CMS.IUserSession">Session</see> .
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.QuickWrite(System.Action{Ingeniux.CMS.IUserWriteSession})">
            <summary>
            This method is for manager to open a new session for immediate saving
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.ReadList``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@)">
            <summary>
            Please note that this is not differred execution, an array is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readListCallback"></param>
            <param name="query"></param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.ReadCount``1(Ingeniux.CMS.IUser)">
            <summary>
            This method is only used for getting the count of object of specific type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.QueryCount``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Do not use this for reduced index, since reduces index return projection.
            Each projection could contain multiple entities
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TManager"></typeparam>
            <typeparam name="TIndex"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.LuceneQuery``3(System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            Do not use it for reduced index. This is for normal map index only
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TManager"></typeparam>
            <typeparam name="TIndex"></typeparam>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="totalCount"></param>
            <param name="query"></param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.ExcuteWithLogging(System.Action,System.String,System.Boolean,System.Action)">
            <summary>
            Execute a Action, logging the begin of end of the action
            </summary>
            <param name="callback">Action to call</param>
            <param name="actionMessage">Message of the action for logging</param>
            <param name="debugLogging">Debug logging or not. If yes, will not log exceptions</param>
            <param name="cleanupCallback">Action to call at the end, success or fail.</param>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.ExcuteWithLogging``1(System.Func{``0},System.String,System.Boolean,System.Action)">
            <summary>
            Execute a Function with return value, logging the begin and end of the action.
            If not debug logging, log exception as error.
            </summary>
            <typeparam name="T">Return value type</typeparam>
            <param name="callback">Function to call</param>
            <param name="actionMessage">Message of the action for logging</param>
            <param name="debugLogging">Debug logging or not. If yes, will not log exceptions</param>
            <param name="cleanupCallback">Action to call at the end, success or fail.</param>
            <returns>Function return value</returns>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.DeleteById(System.String)">
            <summary>
            Delete an entity by id without loading it, in a transactional manner within given session
            </summary>
            <param name="entityId"></param>
            <param name="operatingUser"></param>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity.DeleteByIds(System.String[])">
            <summary>
            Delete a list of entities by ids without loading them, in a transactional manner within given session.
            Please note that the entities can be any type or mix of types. This method is recommanded for transaction based cascading deletes
            </summary>
            <param name="entityIds"></param>
            <param name="operatingUser"></param>
        </member>
        <member name="M:Ingeniux.CMS.TransactionalEntity._LuceneQueryWithinSession``3(System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            We should stick to Linq query when possible for its readibility.
            We only do it this way to get none-entity results
            </summary>
            <typeparam name="TIndex"></typeparam>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="query"></param>
            <param name="session"></param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IGlobalExports">
            <summary>
            Represents the Manager object that manages all global <see cref="T:Ingeniux.CMS.IExportDefinition">Exports</see> for all 
            <see cref="T:Ingeniux.CMS.INavigationElement">Navigation Elements</see> across all <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IExportDefinition"/>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Exports">
            <summary>
            Retrieves the collection of global export entries.
            </summary>
            <returns>Collection of global export entries.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Export(System.String)">
            <summary>
            Retrieves one export entry by its name.
            </summary>
            <param name="name">Name of export entry (must be unique to the collection).</param>
            <returns>The export entry with matching name. Returns null if name doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Count">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IExportDefinition">export entries</see>.
            </summary>
            <returns>Count of export entries.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Set(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see> to the collection.
            </summary>
            <param name="name">Name of export. Must be a valid XML attribute name.</param>
            <param name="query">An XPath query, if null or empty, equal to looking for the first-level child of an element whose name matches the given export name.</param>
            <returns>The export entry with matching name. This entry may already exist and had its query updated, or it didn't exist before and was just added.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Remove(System.String)">
            <summary>
            Removes an <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see> from the collection.
            </summary>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see> to remove.</param>
            <returns>True if an export with a matching name exists, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalExports.Clear">
            <summary>
            Clears all <see cref="T:Ingeniux.CMS.IExportDefinition">export entries</see> in global exports.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUrlMapPageHistoryEntry">
            <summary>
            Represents a historical URL of a <see cref="T:Ingeniux.CMS.IPage">Page</see> when published.
            A historical URL can be generated by renaming, moving, or deleting a <see cref="T:Ingeniux.CMS.IPage">Page</see>, or it can be created manually as custom URL for a specific purpose.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageHistoryEntry.Path">
            <summary>
            Gets and sets the URL's relative path, which always starts with "/".
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageHistoryEntry.HistoryType">
            <summary>
            Gets and sets what <see cref="T:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType">Type</see> of historical entry this is.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageHistoryEntry.Canonical">
            <summary>
            Gets and sets whether the URL this entry holds is the default URL. When true, at runtime, visiting this page from other URLs redirects users to this URL.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUrlMapPageEntry">
            <summary>
            Represents a <see cref="T:Ingeniux.CMS.IPage">Page</see> in the collection of URL maps.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageEntry.PageID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to which this entry belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageEntry.SchemaName">
            <summary>
            Gets the Root Name of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to which this entry belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageEntry.Path">
            <summary>
            Gets and sets this URL's relative path, which should always start with "/".
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageEntry.RequireSSL">
            <summary>
            Gets and sets whether this <see cref="T:Ingeniux.CMS.IPage">Page</see> requires HTTPS access at runtime.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMapPageEntry.PageHistory">
            <summary>
            Gets and sets the history of URLs for this <see cref="T:Ingeniux.CMS.IPage">Page</see> 
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUrlMap">
            <summary>
            Represents a collection of a <see cref="T:Ingeniux.CMS.IPage">Page's</see> URLs on a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUrlMap.Rebuild(System.String,System.Boolean,Ingeniux.CMS.IStructuredUrlSettings,Ingeniux.CMS.IUser,System.Boolean)">
             <summary>
             Rebuilds the complete collection of URL maps and outputs the resulting XML file to a specific location.
             </summary>
             <param name="publishFolder">The full path of the <see cref="T:System.IO.DirectoryInfo">Folder</see> in which to place the generated URL map XML file</param>
             <param name="primeTarget">Determines the name of the URL map XML file. When true, the file name is just "urlmap.xml"; when false, the file name is this entity's unique ID plus ".xml".</param>
             <param name="surlSettings">The structured URL settings. These typically comes from the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> that 
             this collection belongs to. Exposed as parameter so it can be customized.</param>
             <param name="user">The <see cref="T:Ingeniux.CMS.IUser">User</see> that will perform the rebuild</param>
             <remarks>
             <para>
             The generated URL maps file will be placed in the App_Data/pub/[pub target folder]/settings folder.
             </para>
             </remarks>
             <example>
             Generated urlmap.xml example:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Site HomePageID="x2" ForceLowerCaseURL="false" AutoRedirectCanonicalURL="true" EnabledExtensions="" URLExtension="" UseStructuredURL="true">
              <Page ID="x11" Path="/Champlain" Schema="CaseStudy" />
              <Page ID="x12" Path="/Mica" Schema="CaseStudy" />
              <Page ID="x13" Path="/Midwestern" Schema="CaseStudy" />
              <Page ID="x14" Path="/Company/News" Schema="NewsandEventsFront" />
              <Page ID="x15" Path="/Company/News/News-Archive" Schema="NewsArchive" />
              <Page ID="x17" Path="/Company/News/News-Archive/Ingeniux-Announces-Dates-for-2014-User-Conference" Schema="NewsDetail" />
              <Page ID="x2" Path="/" Schema="Home" />
              <Page ID="x28" Path="/Company" Schema="SectionDetail" />
              <Page ID="x34" Path="/Products" Schema="ProductFront" />
              <Page ID="x35" Path="/Products/Cartella-x35" Schema="ProductDetail">
            	<Renamed Path="/Products/Cartella" Canonical="true" />
              </Page>
              <Page ID="x41" Path="/Solutions" Schema="SolutionsFront" />
              <Page ID="x43" Path="/Products/Cartella-x43" Schema="ProductDetail" />
              <Page ID="x44" Path="/Products/CMS" Schema="ProductDetail" />
              <Page ID="x47" Path="/Solutions/Mainstream" Schema="SolutionsDetail" />
            </Site>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IUrlMap.Rebuild(System.String,System.Boolean,Ingeniux.CMS.IStructuredUrlSettings,Ingeniux.CMS.IUser,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
             <summary>
             Rebuilds the complete collection of URL maps and outputs the XML file to a specific location, with an explicitly specified list of marked <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
             </summary>
             <param name="publishFolder">The full path of the <see cref="T:System.IO.DirectoryInfo">Folder</see> in which to place the generated URL map XML file</param>
             <param name="primeTarget">Determines the name of the URL map XML file. When true, the file name is just "urlmap.xml"; when false, the file name is this entity's unique ID plus ".xml"</param>
             <param name="surlSettings">The structured URL settings. These typically come from the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> that 
             this collection belongs to. Exposed as parameter so it can be customized.</param>
             <param name="user">The <see cref="T:Ingeniux.CMS.IUser">User</see> that will perform the rebuild</param>
             <param name="markedPages">Dictionary of marked <see cref="T:Ingeniux.CMS.IPage">Pages</see> for the given <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>. 
             The keys of the dictionary are xIDs; the values are marked version numbers.</param>
             <remarks>
             <para>
             The generated URL maps file will be placed in the App_Data/pub/[pub target folder]/settings folder.
             </para>
             </remarks>
             <example>
             Generated urlmap.xml example:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Site HomePageID="x2" ForceLowerCaseURL="false" AutoRedirectCanonicalURL="true" EnabledExtensions="" URLExtension="" UseStructuredURL="true">
              <Page ID="x11" Path="/Champlain" Schema="CaseStudy" />
              <Page ID="x12" Path="/Mica" Schema="CaseStudy" />
              <Page ID="x13" Path="/Midwestern" Schema="CaseStudy" />
              <Page ID="x14" Path="/Company/News" Schema="NewsandEventsFront" />
              <Page ID="x15" Path="/Company/News/News-Archive" Schema="NewsArchive" />
              <Page ID="x17" Path="/Company/News/News-Archive/Ingeniux-Announces-Dates-for-2014-User-Conference" Schema="NewsDetail" />
              <Page ID="x2" Path="/" Schema="Home" />
              <Page ID="x28" Path="/Company" Schema="SectionDetail" />
              <Page ID="x34" Path="/Products" Schema="ProductFront" />
              <Page ID="x35" Path="/Products/Cartella-x35" Schema="ProductDetail">
            	<Renamed Path="/Products/Cartella" Canonical="true" />
              </Page>
              <Page ID="x41" Path="/Solutions" Schema="SolutionsFront" />
              <Page ID="x43" Path="/Products/Cartella-x43" Schema="ProductDetail" />
              <Page ID="x44" Path="/Products/CMS" Schema="ProductDetail" />
              <Page ID="x47" Path="/Solutions/Mainstream" Schema="SolutionsDetail" />
            </Site>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Ingeniux.CMS.IUrlMap.PublishingTargetID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which this collection belongs.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.UrlMap.Rebuild(System.String,System.Boolean,Ingeniux.CMS.IStructuredUrlSettings,Ingeniux.CMS.IUser,System.Boolean)">
            <summary>
            Rebuild the UrlMap
            </summary>
            <param name="user">CMS User performing the Rebuild</param>
        </member>
        <member name="M:Ingeniux.CMS.UrlMap.AddOrUpdate(Ingeniux.CMS.IPage,Ingeniux.CMS.IUser)">
            <summary>
            Add or Update the UrlMap entry for a page
            </summary>
            <param name="page">CMS Page to update</param>
            <param name="user">CMS User performing the add/update</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.UrlMap.AddOrUpdate(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add or Update the UrlMap entry for a page
            </summary>
            <param name="pageId">XID of the page to update</param>
            <param name="schemaName">Schema Name of the page</param>
            <param name="path">SURL path for the page</param>
            <param name="user">CMS User performing the update</param>
            <param name="requireSSL">Boolean if SSL is required on the page SURL</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.UrlMap._comparePaths(Ingeniux.CMS.IUrlMapPageEntry,Ingeniux.CMS.IUrlMapPageEntry)">
            <summary>
            Compares new and existing entries to determine if there are any changes.
            Will update new entry's history with correct change type and existing path.
            </summary>
            <param name="newEntry">New/Updated UrlMap entry</param>
            <param name="existingEntry">Old/Existing UrlMap entry</param>
        </member>
        <member name="M:Ingeniux.CMS.UrlMap._getSurlPath(Ingeniux.CMS.IPage,System.String,Ingeniux.CMS.IUser)">
            <summary>
            Generate SURL path for targetPage.
            </summary>
            <param name="targetPage">page/component to generate SURL for</param>
            <param name="user">CMS User performing the update/rebuild</param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ISettings">
            <summary>
            Represents the collection of settings of a Ingeniux CMS site instance.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.SetSetting(System.String,System.String,System.String)">
            <summary>
            Sets a string setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="settingValue">String value of this setting</param>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.SetSetting(System.String,System.String,System.Int32)">
            <summary>
            Sets a integer setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="settingValue">Integer value of this setting</param>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Sets a Boolean setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="settingValue">Boolean value of this setting</param>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.SetSetting(System.String,System.String,System.String[])">
            <summary>
            Sets a string array setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="settingValue">String array value of this setting</param>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.GetSetting(System.String,System.String,System.String)">
            <summary>
            Gets a string setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="defaultValue">Default value to return, in case the setting doesn't exist</param>
            <returns>Value of the setting. If the setting doesn't exist, returns default value.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.GetSetting(System.String,System.String,System.Int32)">
            <summary>
            Gets a integer setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="defaultValue">Default value to return, in case the setting doesn't exist</param>
            <returns>Value of the setting. If the setting doesn't exist, returns default value.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.GetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Gets a Boolean setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="defaultValue">Default value to return, in case the setting doesn't exist</param>
            <returns>Value of the setting. If the setting doesn't exist, returns default value.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.GetSetting(System.String,System.String,System.String[])">
            <summary>
            Gets a string array setting value.
            </summary>
            <param name="sectionName">Section name</param>
            <param name="settingName">Setting name within section</param>
            <param name="defaultValue">Default value to return, in case the setting doesn't exist</param>
            <returns>Value of the setting. If the setting doesn't exist, returns default value.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISettings.SerializeForPubTarget(Ingeniux.CMS.IPublishingTarget)">
             <summary>
             Produces a runtime-only settings document for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
             </summary>
             <param name="target">Publishing target for which to serialize settings</param>
             <returns>Serialized XML for runtime.</returns>
             <example>
             <code language="xml">
             <![CDATA[
             <?xml version="1.0" encoding="utf-8"?>
            <Settings>
              <Resources>
            	<applicationName>Ingeniux CMS</applicationName>
            	<autoSave>True</autoSave>
            	<maxChildPages>50</maxChildPages>
              </Resources>
              <VersionControl>
            	<VersioningOn>True</VersioningOn>
            	<VersionLimitOn>True</VersionLimitOn>
            	<VersionLimit>7</VersionLimit>
            	<SchemaVersionLimit>10</SchemaVersionLimit>
              </VersionControl>
              <Publish>
            	<EnableMobileDevices>true</EnableMobileDevices>
            	<MediaServerDirectories></MediaServerDirectories>
            	<AutoPublishComponents>false</AutoPublishComponents>
              </Publish>
              <Logging>
            	<MaxFileSizeKB>1024</MaxFileSizeKB>
            	<MaxKeptArchives>1000</MaxKeptArchives>
            	<DesignTimeLogLevel></DesignTimeLogLevel>
              </Logging>
              <SiteProperties>
            	<DefaultLocale>en-us</DefaultLocale>
            	<UsePageCompTypes>False</UsePageCompTypes>
              </SiteProperties>
              <WorldView>
            	<ContentLocaleChoices>en-us</ContentLocaleChoices>
            	<EnableWorldView>False</EnableWorldView>
              </WorldView>
              <TimeZones>
            	<AvailableTimeZonesForTimeField></AvailableTimeZonesForTimeField>
              </TimeZones>
              <InContextEditing>
            	<Enabled>True</Enabled>
            	<HtmlEditorMatchPreviewStyle>True</HtmlEditorMatchPreviewStyle>
            	<FieldMarkerColor>#3064b7</FieldMarkerColor>
            	<InvokedFieldMarkerColor>#ff8000</InvokedFieldMarkerColor>
            	<BaseZIndex>100</BaseZIndex>
              </InContextEditing>
              <FileLocations>
            	<ExternalImageURLPrefix></ExternalImageURLPrefix>
            	<ExternalMediaURLPrefix></ExternalMediaURLPrefix>
            	<ExternalDocumentURLPrefix></ExternalDocumentURLPrefix>
            	<DocumetLocation></DocumetLocation>
            	<PrebuiltLocation></PrebuiltLocation>
            	<ImageLocation></ImageLocation>
            	<MediaLocation></MediaLocation>
              </FileLocations>
              <Presentations>
            	<Formatter></Formatter>
              </Presentations>
              <TaxonomySystem>
            	<CopyCategorizationOnPageCopy>False</CopyCategorizationOnPageCopy>
              </TaxonomySystem>
              <StructuredURL>
            	<UseStructuredURL>true</UseStructuredURL>
            	<AutoRedirectToCanonical>true</AutoRedirectToCanonical>
            	<UseLowerCaseURL>false</UseLowerCaseURL>
            	<HomePageID>x2</HomePageID>
            	<NotFoundID>x56</NotFoundID>
            	<URLExtension></URLExtension>
            	<URLSeparator>-</URLSeparator>
            	<IncludeFoldersInURL>false</IncludeFoldersInURL>
            	<BaseURL></BaseURL>
              </StructuredURL>
            </Settings>
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingManager">
             <summary>
             Represents the manager object that provides the means to query and manage the following publishing- and runtime-related objects:
             <para>
             <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>,
             <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see>,
             <see cref="T:Ingeniux.CMS.IUrlMap">Structured Url Maps</see>,
             <see cref="T:Ingeniux.CMS.IRedirect">Runtime Redirects</see>,
             <see cref="T:Ingeniux.CMS.IReplicator">Replication System</see>, Publishing Tasks and Replication Tasks.
             </para>
             <para>It also provides ways to manage InSite Search configuration of CMS published content.</para>
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object, and it only works within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IPublishingManager taxonomyManager = session.PublishingManager;
            		...
             }
             </code>
             </remarks>
             <example>
             The Publishing Manager can serialize two output XML documents: Publishing Targets and Publishing Profiles.
             <para>
             Publishing Target serialization resembles the the publishingtargets.xml file before CMS 9.0:
             </para>
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <PublishingTargets>
            	<PublishingTarget ID="PublishingTargets/1" Name="Production" PublishFolder="production" RootPageID="x2" UserAgentSearchString="" SiteSearchString="" Transform="false" ReplicationTarget="" 
            										ReplicationTargetModule="" LastPublishDate="20140314T23:49:39" UseStructuredURL="true" HomePageID="x11" NotFoundID="x722" URLExtension="" URLSeparator="-" ForceLowerCaseURL="true" 
            										AutoRedirectCanonicalURL="true" IncludeFoldersInURL="false" NormalizeURLSeparators="true" BaseURL="http://services1.ingeniux.com/centraulv75rt/" UseExternalPreviewURL="true" DynamicPublishing="true"
            										ExternalPreviewURL="/cms80/DssPreview/IGXDynamicPreview" ICEFieldMarkupUpdateURL="/cms80/DssPreview/IGXDTICEUpdate" GlobalContentRoot="">
            		<Replication DoReplication="false" SimultaneousReplication="false"/>
            		<Page ID="x2" Version="0"/>
            		<Page ID="x11" Version="2"/>
            		<Page ID="x37" Version="0"/>
            	</PublishingTarget>
            	<PublishingTarget ID="PublishingTargets/3" Name="Staging" PublishFolder="stagin" RootPageID="x2" Transform="false" UserAgentSearchString="" SiteSearchString="" UseStructuredURL="true" HomePageID="x11" NotFoundID="x7" URLExtension=""
            										URLSeparator="-" ForceLowerCaseURL="true" AutoRedirectCanonicalURL="true" IncludeFoldersInURL="true" NormalizeURLSeparators="false" BaseURL="" DynamicPublishing="true" UseExternalPreviewURL="true" 
            										ExternalPreviewURL="/cms80/DssPreview/IGXDynamicPreview" ICEFieldMarkupUpdateURL="/cms80/DssPreview/IGXDTICEUpdate" GlobalContentRoot="">
            		<Replication DoReplication="false" SimultaneousReplication="false"/>
            	</PublishingTarget>
            </PublishingTargets>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IPublishingTarget"/>
             <seealso cref="T:Ingeniux.CMS.IPublishingProfile"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.UrlMap(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IUrlMap">URL Maps Collection</see> by its unique ID.
            </summary>
            <param name="id">The unique ID of the URL maps collection. It is always tied to the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> it belongs to.
            <example>
            URL map unique ID example: "UrlMap_PublishingTargets_1" is the ID of URL map for the publishing target "PublishingTargets/1".
            </example>
            </param>
            <returns>URL maps collection with matching ID. Returns null if this collection doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.UrlMaps(System.Int32@)">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IUrlMap">URL Map Collections</see>
            </summary>
            <param name="count">Output count of the URL map collections</param>
            <returns>Collection of URL maps. Returns empty collection if no URL maps exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitors(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicationTaskMonitor">Replication Task Monitors</see>. 
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicationTaskMonitor">Replication Task Monitors</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitor(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddReplicationTaskMonitor(Ingeniux.CMS.IReplicationTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveReplicationTaskMonitor(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitor(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IReplicationTaskMonitor">Replication Task Monitor</see> by its unique ID.
            </summary>
            <param name="monitorId">Unique ID of the replication task monitor to retrieve</param>
            <returns>Replication task monitor with matching ID. Returns null if this ID doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitors(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddReplicationTaskMonitor(Ingeniux.CMS.IReplicationTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveReplicationTaskMonitor(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddReplicationTaskMonitor(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IReplicationTaskMonitor">Replication Task Monitor</see> for a <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see>
            to track the replication progress for this target.
            </summary>
            <param name="target">Replication Target to create Task Monitor for, cannot be null</param>
            <returns>The newly created replication task monitor</returns>
            <remarks>
            <para>If the target parameter is null, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the target parameter is null.</exception>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitor(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitors(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveReplicationTaskMonitor(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveReplicationTaskMonitor(System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IReplicationTaskMonitor">Replication Task Monitor</see> by a specified unique ID.
            </summary>
            <param name="monitorId">Unique ID of the replication task monitor to remove</param>
            <returns>True if a replication task monitor with matching ID exists and is successfully removed. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitor(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ReplicationTaskMonitors(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddReplicationTaskMonitor(Ingeniux.CMS.IReplicationTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Replicators(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicator">Replicators</see>. Each replicator belongs to a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicator">Replicators</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Target(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> by its unique ID.
            </summary>
            <param name="id">ID of the publishing target to retrieve</param>
            <returns>Publishing target with matching ID, null if ID doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TargetsCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)">
            <summary>
            Retrieves either the collection of all <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> 
            or the collection of publishing targets that belongs to the specified 
            <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="profile">Publishing profile that the publishing targets belong to. When not provided, returns all publishing targets.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of publishing targets.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Target(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TargetsCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Targets(System.String[])">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>, by their unique IDs.
            </summary>
            <param name="pubTargetIds">IDs of publishing targets to retrieve</param>
            <returns>Collection of publishing targets with matching IDs. Invalid IDs are ignored.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Target(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TargetsCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="name">Name of the new publishing target</param>
            <param name="rootPage">Root page of the new publishing target. This value cannot be null.</param>
            <param name="publishingFolder">The name of the folder to publish to. This folder is a subdirectory of App_Data\pub.</param>
            <returns>Newly created publishing target</returns>
            <remarks>
            <para>If name is null or whitespace, an error is thrown.</para>
            <para>If rootPage is null, an error is thrown.</para>
            <para>If rootPage is the <see cref="!:Ingeniux.CMS.RecycleFolder">Recycle Folder</see>, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When name is null or whitespace, or rootPage is null</exception>
            <exception cref="T:System.ArgumentException">When rootPage is the Recycle Folder</exception>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Target(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TargetsCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
            <param name="pubTarget">Publishing target to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> is not null and exists in the <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see>. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Target(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TargetsCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.TargetsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
            <returns>Count of Publishing targets.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Target(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see> by its unique ID.
            </summary>
            <param name="id">ID of the publishing profile to retrieve</param>
            <returns>Publishing profile with matching ID. Returns null if a matching ID doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ProfilesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of all <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ProfilesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Profiles(System.String[])">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see> by their unique IDs.
            </summary>
            <param name="pubProfileIds">IDs of publishing profiles to retrieve</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see> with matching IDs. Invalid IDs are ignored.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ProfilesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)">
            <summary>
            Adds a new blank <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>.
            </summary>
            <param name="name">Name of the publishing profile</param>
            <returns>Newly created blank publishing profile without any <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ProfilesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see> from the collection.
            </summary>
            <param name="pubProfile">Publishing profile to remove</param>
            <returns>True if the pubProfile parameter is not null and exists in the collection. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.ProfilesCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.ProfilesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see>.
            </summary>
            <returns>Count of publishing profiles.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddProfile(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of the InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> entries that apply to all <see cref="T:Ingeniux.CMS.ISchema">page types</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pubTarget">Publishing targets associated with the exceptions. When this parameter is null, returns all exception entries.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of InSite Search field exception entries.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchFieldGlobalException(System.String,System.Boolean,System.Decimal)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchFieldGlobalException(Ingeniux.CMS.ISearchFieldException)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddSearchFieldGlobalException(System.String,System.Boolean,System.Decimal)">
            <summary>
            Adds a new InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> that applies to all <see cref="T:Ingeniux.CMS.ISchema">page types</see>.
            </summary>
            <param name="fieldName">Name of the <see cref="T:Ingeniux.CMS.IElement">Element</see> or <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> for the Field Exception</param>
            <param name="include">Whether this field will be included in, or excluded from, search indexing</param>
            <param name="boost">Boost value for indexing, when this field is included in search indexing</param>
            <returns>Newly created InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> that applies to all page types.</returns>
            <returns>Newly created InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> that applies to all page types.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchFieldGlobalException(Ingeniux.CMS.ISearchFieldException)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveSearchFieldGlobalException(Ingeniux.CMS.ISearchFieldException)">
            <summary>
            Removes a InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> that applies to all <see cref="T:Ingeniux.CMS.ISchema">page types</see>.
            </summary>
            <param name="fieldGlobalException">The InSite Search field exception to remove from collection</param>
            <returns>True if "fieldGlobalException" is not null and exists in colleciton. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchFieldGlobalException(System.String,System.Boolean,System.Decimal)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptionsCount(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Gets the count of InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exceptions</see> that apply to all <see cref="T:Ingeniux.CMS.ISchema">page types</see>.
            </summary>
            <param name="pubTarget">Publishing target that the field exceptions are associated with. When null, returns count of all field exceptions.</param>
            <returns>Count of InSite Search <see cref="T:Ingeniux.CMS.ISearchFieldException">Field Exception</see> that applies to all <see cref="T:Ingeniux.CMS.ISchema">page types</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchFieldGlobalExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchFieldGlobalException(System.String,System.Boolean,System.Decimal)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchFieldGlobalException(Ingeniux.CMS.ISearchFieldException)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see> entries.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pubTarget">Publishing targets associated with the exceptions. When null, returns all exception entries.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection on InSite Search schema exception entries.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchSchemaException(Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchSchemaException(Ingeniux.CMS.ISearchSchemaException)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddSearchSchemaException(Ingeniux.CMS.ISchema,System.Boolean)">
            <summary>
            Adds a new InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see>.
            </summary>
            <param name="schema">Schema to add configuration entry for</param>
            <param name="include">Whether to include in searching indexing</param>
            <returns>Newly created InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see> entry.</returns>
            <remarks>
            <para>If the schema parameter is null, an error isthrown.</para>
            <para>If there is already an exception for this schema, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the schema parameter is null.</exception>
            <exception cref="T:System.ArgumentException">When an exception for the given schema already exists.</exception>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchSchemaException(Ingeniux.CMS.ISearchSchemaException)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveSearchSchemaException(Ingeniux.CMS.ISearchSchemaException)">
            <summary>
            Removes a InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see> entry.
            </summary>
            <param name="fieldGlobalException">The schema exception entry to remove</param>
            <returns>True if the fieldGlobalException parameter is not null and exists in the collection. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchSchemaException(Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveSearchSchemaException(Ingeniux.CMS.ISchema)">
            <summary>
            Removes InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see> entry for specified <see cref="T:Ingeniux.CMS.ISchema">Schema</see>.
            </summary>
            <param name="schema">Schema whose schema exception is to be removed</param>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchSchemaException(Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptionsCount(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptionsCount(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Retrieves the count of InSite Search <see cref="T:Ingeniux.CMS.ISearchSchemaException">Schema Exception</see> entries for all or specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>.
            </summary>
            <param name="pubTarget">The publishing target to retrieve the InSite Search Schema exceptions count for. Defaults to null to retrieve all search schema exceptions.</param>
            <returns>Count of InSite Search schema exceptions</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.SearchSchemaExceptions(System.Int32@,Ingeniux.CMS.IPublishingTarget,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.AddSearchSchemaException(Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveSearchSchemaException(Ingeniux.CMS.ISearchSchemaException)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Task(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> by its unique ID.
            </summary>
            <param name="taskId">Unique ID, of the publishing task to retrieve</param>
            <returns>Publishing task with matching ID. Returns null if this task doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TasksCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.CreateTask(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IPublishingTarget,System.Action{System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry}},System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTask(Ingeniux.CMS.IPublishingTask)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.CreateTask(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IPublishingTarget,System.Action{System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry}},System.Boolean)">
            <summary>
            Creates a new publishing task and pushes this task into publishing queue.
            Tasks in the queue are executed in sequence and purged after being executed.
            </summary>
            <param name="pages">Collection of pages to be published</param>
            <param name="incremental">Incremental or full publish. Incremental publishes only add or update pages and components that have been added or changed. Full publishes publish all marked pages and components; delete pages and components that are no longer marked; and clean up assets at the publishing target location.</param>
            <param name="pubTarget">The target to publish pages to</param>
            <param name="postPageFilterCallback">The action to call after filter out the Pages that don't need to be published</param>
            <param name="replicate">Whether or not to perform replication after the publish completes. Default is to perform replication.</param>
            <returns>The created and queue publishing task</returns>
            <exception cref="T:System.InvalidOperationException">During an incremental publish, when there are no pages or components that have been added or updated since the most-recent publish.</exception>
            <remarks>
            <para><see cref="T:Ingeniux.CMS.IPublishingTask">Publish Tasks</see> are centered around pages and components, not assets, for incremental publishes.</para>
            <para>If no pages or components changed since last publish, it doesn't matter whether any assets are changed. The publish will not occur.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Task(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TasksCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTask(Ingeniux.CMS.IPublishingTask)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveTask(Ingeniux.CMS.IPublishingTask)">
            <summary>
            Removes a pending <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
            <param name="task">The Publishing Task to remove</param>
            <returns>True if task is removed, false otherwise.</returns>
            <remarks>
            <para>
            If task parameter value is null, returns false.
            </para>
            <para>
            It is possible to remove a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> that is being executed, but it will not stop execution.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Task(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.TasksCount"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.CreateTask(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IPublishingTarget,System.Action{System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry}},System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.TasksCount">
            <summary>
            Retrieves the number of pending and ongoing <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Tasks</see>.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Tasks</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.Task(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.CreateTask(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IPublishingTarget,System.Action{System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry}},System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingManager.RemoveTask(Ingeniux.CMS.IPublishingTask)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.TaskMonitors(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPublishTaskMonitor">Publishing Task Monitors</see> that are used to monitor the
            status of pending and ongoing <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Tasks</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of publishing task monitors</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.TaskMonitor(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPublishTaskMonitor">Publishing task monitor</see> by its unique ID.
            </summary>
            <param name="pubTargetId">The ID of the publishing target whose task monitor is to be retrieved</param>
            <returns>Publishing task monitor with matching publishing target ID or null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Redirects(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of runtime <see cref="T:Ingeniux.CMS.IRedirect">Redirect</see> entries in a paginated manner.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of redirect entries</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.Redirect(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IRedirect">Redirect entry</see> by its unique ID.
            </summary>
            <param name="redirectId">ID of the <see cref="T:Ingeniux.CMS.IRedirect">Redirect entry</see> to retrieve.</param>
            <returns>Redirect entry with matching id, null if doesn't exist</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.AddRedirect(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IRedirect">Redirect entry</see>
            </summary>
            <param name="from">From address. Can be absolute or relative.</param>
            <param name="target">Target relative address. Can also be absolute or relative.</param>
            <param name="pubTgtIds">Specifies which <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> the redirect entry is for.</param>
            <returns>Newly created redirect entry</returns>
            <exception cref="T:System.ArgumentException">When either the from or target parameters are null or empty, or when another redirect entry with the same from address (case-insensitive) already exists.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.RemoveRedirect(System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IRedirect">Redirect entry</see> by its unique ID.
            </summary>
            <param name="redirectId">ID of the <see cref="T:Ingeniux.CMS.IRedirect">Redirect</see> entry to remove.</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IRedirect">Redirect entry</see> exists, false if it doesn't.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.SerializeRedirects(Ingeniux.CMS.IPublishingTarget)">
             <summary>
             Produces XML serialization of the <see cref="T:Ingeniux.CMS.IRedirect">Redirect</see> entries that apply to the given <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
             The Dynamic Site Server depends on the results of this serialization to control redirects.
             </summary>
             <param name="pubTarget">The publishing target to serialize redirects for</param>
             <returns>XML serialization of <see cref="T:Ingeniux.CMS.IRedirect">Redirect</see> entries that apply to the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.</returns>
             <example>
             Example of redirects serialization:
             <code language="xml">
             <![CDATA[
             <Site>
              <redirect id="redirects/34" from="/giveaway" to="x837" />
              <redirect id="redirects/35" from="/easy-cms" to="/products/web-cms/ease-of-use" />
              <redirect id="redirects/36" from="/promotion" to="http://bannersis.site.edu" />
            </Site>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.PublishingTargetsSerialize">
            <summary>
            Produces the XML serialization of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> collection. The result matches the XML format of publishingTargets.xml prior to CMS 9.0.
            </summary>
            <returns>XML serialization of publishing targets their publish markings.</returns>
            <example>
            Example of publishing targets serialization:
            <code language="xml">
            <![CDATA[
            <PublishingTargets >
            	<PublishingTarget ID="PublishingTargets/12" Name="Production" PublishFolder="production" RootPageID="x2" UserAgentSearchString="" 
            		SiteSearchString="" Transform="false" ReplicationTarget="" ReplicationTargetModule="" LastPublishDate="20140324T23:11:00" 
            		UseStructuredURL="true" HomePageID="x11" NotFoundID="x722" URLExtension="" URLSeparator="-" ForceLowerCaseURL="true" AutoRedirectCanonicalURL="true" 
            		IncludeFoldersInURL="false" NormalizeURLSeparators="true" BaseURL="" UseExternalPreviewURL="false">
            			<Page ID="x2" Version="6"/>
            			<Page ID="x11" Version="2"/>
            			<Page ID="x37" Version="3"/>
            			<Page ID="x201" Version="0"/>
            	</PublishingTarget>
            </PublishingTargets>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingManager.PublishingProfilesSerialize">
             <summary>
             Produces the XML serialization of the <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profiles</see> collection. 
             The result matches the XML format of PublishingProfiles.xml prior to CMS 9.0.
             </summary>
             <returns>XML serialization of publishing profiles and the publishing targets they include.</returns>
             <example>
             Example of publishing profiles serialization:
             <code language="xml">
             <![CDATA[
             <PublishingProfiles >
            	 <PubProfile ID="PublishingProfile/43" Name="Production for All Languages">
            		<BlockedAccess>
            			<Group ID="UserGroups/125" />
            		</BlockedAccess>
            		<PubTarget ID="PublishingTargets/1" />
            		<PubTarget ID="PublishingTargets/6" />
            	</PubProfile>	
            </PublishingProfiles>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingManager.CurrentTask">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPublishTaskMonitor">Publishing Task Monitor</see> of the <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> that is being executed.
            If no publishing task is being executed at the time of property call, this method returns null.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingManager.PendingTasks"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingManager.PendingTasks">
            <summary>
            Gets the collection of pending <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Tasks</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingManager.CurrentTask"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingManager.ForceIncrementPublishWithNoChangedPages">
            <summary>
            Gets/sets whether to do incremental publishes, even when no pages are changed.
            This is an one time set property. Set it before submitting publishes. Upon submission it will reset itself to false.
            The value of this property will not persist.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.#ctor(Ingeniux.CMS.IUserSession)">
            <summary>
            Create the PublishingManager and assign it a content store
            </summary>
            <param name="store">Assigned content store</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Target(System.String)">
            <summary>
            Retrieve a publishing target from its ID
            </summary>
            <param name="id">Publishing target ID</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Profile(System.String)">
            <summary>
            Retrieve a publishing profile from its ID
            </summary>
            <param name="id">Publishing profile ID</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.AddReplicationTaskMonitor(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Add a replication session document to the database. This keeps track of replication status async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Targets(System.Int32@,Ingeniux.CMS.IPublishingProfile,System.Int32,System.Int32)">
            <summary>
            Retrieve a list of publishing targets
            </summary>
            <param name="count">Set to the number of retrieved publishing targets</param>
            <param name="profile">Optional publishing profile filter</param>
            <param name="pageSize">Optional max number of retrievals</param>
            <param name="startIndex">Optional starting index</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.AddTarget(System.String,Ingeniux.CMS.IPage,System.String)">
            <summary>
            Add new publishing target to the manager
            </summary>
            <param name="name">Publishing target Name</param>
            <param name="rootPage">Publishing target Root Page</param>
            <param name="publishingFolder">Publishing target Folder</param>
            <param name="operatingUser">CMS User performing the Add</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.RemoveTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Remove publishing target from the manager
            </summary>
            <param name="pubTarget">Publishing target to be removed</param>
            <param name="operatingUser">CMS User performing the Remove</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.TargetsCount">
            <summary>
            Return the number of publishing targets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Profiles(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieve a list of publishing profiles
            </summary>
            <param name="count">Set to the number of retrieved publishing profiles</param>
            <param name="pageSize">Optional max number of retrievals</param>
            <param name="startIndex">Optional starting index</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.AddProfile(System.String)">
            <summary>
            Add a new publishing profile to the manager
            </summary>
            <param name="name">Publishing profile name</param>
            <param name="operatingUser">CMS User performing the Add</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.RemoveProfile(Ingeniux.CMS.IPublishingProfile)">
            <summary>
            Remove publishing profile from manager
            </summary>
            <param name="pubProfile">Publishing profile to be removed</param>
            <param name="operatingUser">CMS User performing the Remove</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.ProfilesCount">
            <summary>
            Return the number of publishing profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.PublishingTargetsSerialize">
            <summary>
            Serialize the publishing targets to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.PublishingProfilesSerialize">
            <summary>
            Serialize the publishing profiles to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.CreateTask(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IPublishingTarget,System.Action{System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry}},System.Boolean)">
            <summary>
            Create a new publishing task and enqueue it in the publishing queue
            </summary>
            <param name="pages">IPageVersions to publish</param>
            <param name="incremental">Incremental publish or full</param>
            <param name="pubTarget">Publishing Target for the task</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Task(System.String)">
            <summary>
            Retrieve Publishing Task from database
            </summary>
            <param name="taskId">Publishing Task ID to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.RemoveTask(Ingeniux.CMS.IPublishingTask)">
            <summary>
            Remove Publishing Task from database
            </summary>
            <param name="taskId">Pubkishing Task ID to remove</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingManager.Serialize">
            <summary>
            Serialize the publishing manager to XElement
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ingeniux.CMS.IPublishingProfile" -->
        <member name="M:Ingeniux.CMS.IPublishingProfile.Targets(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> that 
            belong to this publishing profile.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> that belong to this profile.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingProfile.AddTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to this profile.
            </summary>
            <param name="target">The Publishing target to add to this profile</param>
            <remarks>
            <para>If the value of the target parameter is null, nothing happens.</para>
            <para>If this profile already contains the specified <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>, nothing happens.</para>
            </remarks>
            <exception cref="T:System.Security.SecurityException">When the current <see cref="T:Ingeniux.CMS.IUser">User</see> is not an administrator.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingProfile.RemoveTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> from this profile.
            </summary>
            <param name="target">Publishing Target to remove from this profile</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> belongs to this profile. Otherwise, this method returns false. </returns>
            <exception cref="T:System.Security.SecurityException">When the current <see cref="T:Ingeniux.CMS.IUser">User</see> is not an administrator.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingProfile.Count">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> that belong to this profile.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see> that belong to this profile.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingProfile.PublishingSystemSecurity">
            <summary>
            Gets and sets the system settings for this publishing profile.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.#ctor">
            <summary>
            Create a blank publishing profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.#ctor(Ingeniux.CMS.IPublishingManager)">
            <summary>
            Create a publishing profile with a specified publishing manager
            </summary>
            <param name="pubMgr">Parent publishing manager</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.ValidateData">
            <summary>
            Validate publishing profile's internal data
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Validate that user has permission to manipulate publishing profile
            </summary>
            <param name="user">CMS User to test</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.Targets(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieve a list of publishing targets in the publishing profile
            </summary>
            <param name="count">Set to the number of publishing targets retrieved</param>
            <param name="pageSize">Optional max number of publishing targets</param>
            <param name="startIndex">Optional starting intex</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.AddTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Add a publishing target to the publishing profile
            </summary>
            <param name="target">Publishing target to add</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.RemoveTarget(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Remove a publishing target from the publishing profile
            </summary>
            <param name="target">Publishing target to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.Count">
            <summary>
            Returns the number of publishing targets in the publishing profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingProfile.Serialize">
            <summary>
            Serialize the publishing profile to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.PublishingProfile.PublishingSystemSecurity">
            <summary>
            Permission settings for the publishing profile
            </summary>		
        </member>
        <member name="T:Ingeniux.CMS.IPublishingSystemSecurity">
            <summary>
            Represents the settings of the <see cref="T:Ingeniux.CMS.IUser">User</see> or <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> that access a
            <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPublishingTarget"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.BlockedUserGroups(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IUser">Users</see> and <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> that are not allowed
            to publish to the represented <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUser">Users</see> and <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> that are not allowed
            to publish to the represented <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.BlockUserGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Blocks <see cref="T:Ingeniux.CMS.IUser">Users</see> from the specified <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> from publishing to the 
            represented <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="group">The group to which to block access</param>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.RemoveUserGroupBlock(Ingeniux.CMS.IUserGroup)">
            <summary>
            Removes the blocking to a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>
            </summary>
            <param name="group">The group to which to allow access</param>
            <returns>True if this <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> was blocked prior to this method call. Otherwise, this method returns false.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.ClearBlocks">
            <summary>
            Clears all blocks and allows everybody to publish to the represented <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.IsUserAllowed(Ingeniux.CMS.IUser)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.IUser">User</see> is allowed to publish to the represented 
            <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="user">User on which to check access</param>
            <returns>True if user is allowed to publish, false otherwise.</returns>
            <remarks>
            <para>
            If the "user" parameter value is null, this method returns false.
            </para>
            <para>
            A <see cref="T:Ingeniux.CMS.IUser">User</see> is blocked when any <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> it belongs
            to is blocked.
            </para>
            <para>
            Administrators are always allowed to publish to a publishing target.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.IsGroupAllowed(Ingeniux.CMS.IUserGroup)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> is allowed to publish to the represented 
            <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <param name="group">Group on which to check access</param>
            <returns>True if the group is allowed, false otherwise.</returns>
            <remarks>
            <para>
            If the "group" parameter value is null, this method returns false.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingSystemSecurity.Serialize">
            <summary>
            Serialize to an XML format
            </summary>
            <returns>Serialized XML</returns>
            <example>
            Sample serialization output:
            <code language="xml">
            <![CDATA[
            <BlockedAccess>
            	<Group ID="UserGroups/23" />
            	<Group ID="UserGroups/25" />
            </BlockedAccess>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingSystemSecurity.Session">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUserSession">Session</see> that retrieved or created this instance.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingSystemSecurity.Manager">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPublishingManager">Publishing Manager</see> 
            that retrieved or created this instance.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.#ctor">
            <summary>
            Create an empty publishing system security set
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.#ctor(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUserGroup})">
            <summary>
            Create a publishing system security set consisting of a list of groups
            </summary>
            <param name="groups">List of blocked groups</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.BlockedUserGroups(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieve a list of blocked user groups from the publishing system security set
            </summary>
            <param name="count">Set to the number of groups retrieved</param>
            <param name="pageSize">Optional max number of groups</param>
            <param name="startIndex">Optional starting index</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.BlockUserGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Add a group to the blocked list of publishing system security set
            </summary>
            <param name="group">CMS Group to add to the blocked list</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.RemoveUserGroupBlock(Ingeniux.CMS.IUserGroup)">
            <summary>
            Remove a group from the blocked list of publishing system security set
            </summary>
            <param name="group">CMS Group to remove from the blocked list</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.ClearBlocks">
            <summary>
            Clears the Blocked User Groups list.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.IsUserAllowed(Ingeniux.CMS.IUser)">
            <summary>
            Test if a user has permissions in the publishing system security set
            </summary>
            <param name="user">CMS User to test</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.IsGroupAllowed(Ingeniux.CMS.IUserGroup)">
            <summary>
            Test if a group is not present in the blocked user groups list
            </summary>
            <param name="group">CMS UserGroup to test</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingSystemSecurity.Serialize">
            <summary>
            Serialize publishing system security set to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IStructuredUrlSettings">
            <summary>
            Represents the settings of a structured URL for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPublishingTarget"/>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.UseStructuredUrl">
            <summary>
            Gets/sets whether the structured URL is enabled for the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.HomePage">
            <summary>
            Gets/sets the ID of the published site's home page. This <see cref="T:Ingeniux.CMS.IPage">Page</see> will be the root of a published site. All
            its descendants will obtain their structured URL based on their relative path from the Home Page.
            </summary>
            <remarks>
            <para>If the <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.UseStructuredUrl">UseStructuredUrl</see> property is true, this property is required. Publishing will generate an error if it is null or empty.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.UrlExtension">
            <summary>
            Gets/sets the extension of the URL to access pages at a run-time site. Can be left empty to have an extensionless URL.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.UrlSeparator">
            <summary>
            Gets/sets the character used to replace spaces in <see cref="T:Ingeniux.CMS.IPage">Page</see> names for the generated page URLs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.Handle404Page">
            <summary>
            Gets/sets the ID of the 404 response handling <see cref="T:Ingeniux.CMS.IPage">Page</see>. If not specified, the Dynamic Site Server uses the ASP.NET default 404 handling page to indicate missing resources.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.BaseUrl">
            <summary>
            Gets/sets the base URL of the runtime site to which this <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> publishes.
            It should always be an absolute URL.
            </summary>
            <example>
            http:///www.yourfirm.com/stagin/
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.ForceLowerCaseUrl">
            <summary>
            Gets/sets whether to convert to lowercase for generated URL characters.
            This setting is effective during publish.
            </summary>
            <remarks>This property on matters for non-DSS integrations of runtime sites. Standard IIS sites are case insensitive.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.StripDiacritics">
            <summary>
            Gets/sets whether to remove diacritics and accents from extended characters in the Western European/Latin-1/Windows-1251 character set in the URL.
            </summary>
            <example>"š" will be converted to "s"</example>
            <remarks>Please note that any single-byte characters beyond Western European/Latin-1/Windows-1251 will not be converted and all multiple-byte characters (Chinese, Japanese, Korean, etc.) will not be converted.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.AutoRedirectCanonical">
            <summary>
            Gets/sets whether pages with multiple URL mappings automatically redirect from a noncanonical to a canonical URL.
            If true, redirects will happen automatically. Otherwise, users visit the page's noncanonical URL (normally from the page's past names or paths due to renaming the page or moving it in the site tree) and no redirect occurs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.IncludeFoldersInUrl">
            <summary>
            Gets/sets whether to include names of the ancestors that are folders in a page's URL.
            If true, names of folders will be included. If false, they won't be.
            </summary>
            <remarks>
            <para>Including folders in the URL is neither right nor wrong; it's simply a matter of preference.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.IncludeComponentsInUrl">
            <summary>
            Gets/sets whether to include names of the ancestors that are components in a page's URL.
            If true, names of comonents will be included. If false, they won't be.
            </summary>
            <remarks>
            <para>As with the <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.IncludeFoldersInUrl"/> property, including components in the URL is neither right nor wrong; it's simply a matter of preference.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.NormalizeUrlSeparators">
            <summary>
            Gets/sets whether to change all of the "-" and "-" to the value of the
            <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.UrlSeparator">UrlSeparator</see> property.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.EnabledExtensions">
            <summary>
            Gets/sets extra extensions to support besides the specified <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.UrlExtension">UrlExtension</see>.
            Normally, .xml, .htm, and .html are automatically supported if this setting is left null or empty. If the setting is not null or empty,
            this property's values are explicited followed.
            </summary>
            <remarks>
            <para>
            The list of extensions can start with or without ".".
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IStructuredUrlSettings.LastModified">
            <summary>
            Last time the SURL settings were modified. For use when building url map.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.UseStructuredUrl">
            <summary>
            True if using structured URLs
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.HomePage">
            <summary>
            Hope page to act as root for Structured URL names
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.UrlExtension">
            <summary>
            URL Extension
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.UrlSeparator">
            <summary>
            Separator for structured URLs
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.Handle404Page">
            <summary>
            404 handling page
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.BaseUrl">
            <summary>
            Base URL
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.ForceLowerCaseUrl">
            <summary>
            True if all Structured URLs to be made lower case
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.AutoRedirectCanonical">
            <summary>
            Auto-Redirect Canonical
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.IncludeFoldersInUrl">
            <summary>
            True if folders included in SURL path
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.IncludeComponentsInUrl">
            <summary>
            True if components included in SURL path
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.NormalizeUrlSeparators">
            <summary>
            Normalize URL Separators
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.EnabledExtensions">
            <summary>
            semi-colon separated list of available url extensions
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.StripDiacritics">
            <summary>
            Convert non-ascii characters to ascii for url or not
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.StructuredUrlSettings.LastModified">
            <summary>
            Last time the SURL settings were modified. For use when building url map.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingTarget">
            <summary>
            Represents the location to which a list of marked <see cref="T:Ingeniux.CMS.IPage">Pages</see> is published as well as
            the settings on how the published contents get replicated. Also provides information on how the Dynamic Site Server
            hosts the published content in a runtime environment.
            </summary>
            <example>
            Serialization of a publishing target is very similar to the publishingtargets.xml file's PublishingTarget
            element before CMS 9.0:
            <code language="xml">
            <![CDATA[
            <PublishingTarget ID="PublishingTargets/1" Name="Production" PublishFolder="production" RootPageID="x2" UserAgentSearchString="" SiteSearchString="" Transform="false" ReplicationTarget="" 
            									ReplicationTargetModule="" LastPublishDate="20140314T23:49:39" UseStructuredURL="true" HomePageID="x11" NotFoundID="x722" URLExtension="" URLSeparator="-" ForceLowerCaseURL="true" 
            									AutoRedirectCanonicalURL="true" IncludeFoldersInURL="false" NormalizeURLSeparators="true" BaseURL="http://services1.ingeniux.com/centraulv75rt/" UseExternalPreviewURL="true" DynamicPublishing="true"
            									ExternalPreviewURL="/cms80/DssPreview/IGXDynamicPreview" ICEFieldMarkupUpdateURL="/cms80/DssPreview/IGXDTICEUpdate" GlobalContentRoot="">
            	<Replication DoReplication="false" SimultaneousReplication="false"/>
            	<Page ID="x2" Version="0"/>
            	<Page ID="x11" Version="2"/>
            	<Page ID="x37" Version="0"/>
            </PublishingTarget>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.UrlMap">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IUrlMap">URL Map</see> for this publishing target.
            </summary>
            <returns>URL map for this publishing target</returns>
            <remarks>
            <para>
            When a publishing target is not published yet, the URL map will be empty. The very first full publish populates the URL map for all pages marked for publish on that publishing target.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.Replicator">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IReplicator">Replicator</see> object, which is in charge of performing replication tasks.
            </summary>
            <returns>The Replicator object for this publishing target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.Publish(System.Boolean,System.Boolean)">
            <summary>
            <para>
            Performs a publish on this publishing target, including all <see cref="T:Ingeniux.CMS.IPage">Pages</see> marked on this target as candidates to be published.
            </para>
            <para>
            For a non-<see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, this action creates XML files for pages and components 
            marked for this target; generates all metadata files needed for the Dynamic Site Server; and copies all updated assets.
            </para>
            <para>
            For a <see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, <see cref="T:Ingeniux.CMS.IPage">Pages</see> will be fully expanded and XSLT transformed,
            then saved to target folder in a structural format. Updated assets are also copied.
            </para>
            </summary>
            <param name="incremental">Whether to only publish changed <see cref="T:Ingeniux.CMS.IPage">Pages</see> or all pages. Default is incremental.</param>
            <param name="replicate">Whether to perform replication after a successful publish. Default is to replicate.</param>
            <remarks>
            <para>
            This method is in charge of handling the task that performs the actual publishes. It does not wait for the publish to finish.
            </para>
            <para>
            All publish tasks are pushed into a queue and executed in sequence.
            </para>
            <para>
            Incremental publishes will detect if any pages were changed (checked in, marked for publish changes, etc.), since the last publish. If no pages have changed since the last publish, an
            error is thrown.
            </para>
            <para>A full publish first cleans up the target folder by deleting all files and directories.</para>
            <para>If the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">current user</see> doesn't have access to this publishing target, a publish doesn't happen and an error log entry is written to the design-time log.</para>
            <para>All <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheets</see> in the "xml/Stylesheets" folder are validated during publish.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublish">BeforePublish</see> is fired prior to creating a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.Published">BeforePublish</see> is fired after a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> completes the actual publish, not after the Publishing Task is created.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When this Publishing Target is retrieved via a <see cref="T:Ingeniux.CMS.IUserSession">Read-only Session</see>.</exception>
            <exception cref="!:System.SecurityException">When <see cref="T:Ingeniux.CMS.IUser">current user</see> doesn't have the permission to perform a publish; when the current user can't access this publishing target; or when performing an incremental publish and the current user doesn't have permision to incrementally publish.</exception>
            <exception cref="T:System.Xml.XmlException">When any <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheet</see> failed to load as an XML document.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.RepublishPage(Ingeniux.CMS.IPage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Performs publish on a <see cref="T:Ingeniux.CMS.IPage">Page</see>, or the page and its descendants, towards this publishing target.
            </para>
            <para>
            For a non-<see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, this action creates XML files for pages and components 
            marked for this target; generates all metadata files needed for the Dynamic Site Server; and copies over all updated assets.
            </para>
            <para>
            For a <see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, <see cref="T:Ingeniux.CMS.IPage">Pages</see> will be fully expanded and XSLT transformed,
            then saved to target folder in a structured format. Updated assets are also copied over.
            </para>
            </summary>
            <param name="page">The root <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published</param>
            <param name="recursive">Whether to only publish the <see cref="T:Ingeniux.CMS.IPage">Page</see> itself, or with with its descendants.</param>
            <param name="incremental">Whether to only publish changed <see cref="T:Ingeniux.CMS.IPage">Pages</see> or all pages. Default is incremental.</param>
            <param name="replicate">Whether to perform replication after a successful publish. Default is to replicate.</param>
            <remarks>
            <para>
            This method is in charge of handling the task that carries out the actual publishes. It will not wait for the publish to finish.
            </para>
            <para>
            All publish tasks are pushed into a queue and executed in sequence.
            </para>
            <para>
            Incremental publishes will detect if any pages were changed (checked in, marked for publish changes, etc.) since the last publish. If no pages are changed since the last publish, an
            error is thrown.
            </para>
            <para>Full publishes first clean up the target folder by deleting all files and directories.</para>
            <para>If current user doesn't have access right to use this publishing target, the publish will not happen and an error log entry will be written to design-time log.</para>
            <para>All <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheets</see> in the "xml/Stylesheets" folder are validated during publish.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublish">BeforePublish</see> is fired prior to creating a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.Published">BeforePublish</see> is fired after a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> completes the actual publish, not after the Publishing Task is created.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When this Publishing Target is retrieved via a <see cref="T:Ingeniux.CMS.IUserSession">Read-only Session</see>.</exception>
            <exception cref="!:System.SecurityException">When <see cref="T:Ingeniux.CMS.IUser">current user</see> doesn't have the permission to perform a publish; when the current user can't access this publishing target; or when performing an incremental publish and the current user doesn't have permision to incrementally publish.</exception>
            <exception cref="T:System.Xml.XmlException">When any <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheet</see> failed to load as an XML document.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.PublishPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Performs publishes on multiple root <see cref="T:Ingeniux.CMS.IPage">Pages</see>, or together with their descendants, toward this publishing target.
            </para>
            <para>
            For a non-<see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, this action creates XML files for pages and components 
            marked for publishing on this target; generates all metadata files needed for the Dynamic Site Server; and copies over all updated assets.
            </para>
            <para>
            For a <see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform-on-publish</see> target, <see cref="T:Ingeniux.CMS.IPage">Pages</see> are fully expanded and XSLT transformed,
            then saved to target folder in a structured format. Updated assets are also copied over.
            </para>
            </summary>
            <param name="pages">The root <see cref="T:Ingeniux.CMS.IPage">Pages</see> to be published</param>
            <param name="recursive">Whether to publish only the <see cref="T:Ingeniux.CMS.IPage">Pages</see> themselves, or together with their descendants.</param>
            <param name="incremental">Whether to publish only changed <see cref="T:Ingeniux.CMS.IPage">Pages</see> or all pages. Default is incremental.</param>
            <param name="replicate">Whether to perform replication after a successful publish. Default is to replicate.</param>
            <remarks>
            <para>
            This method is in charge of handling the task that carries out the actual publishes. It will not wait for the publish to finish.
            </para>
            <para>
            All publish tasks are pushed into a queue and executed in sequence.
            </para>
            <para>
            Incremental publishes will detect if any pages were changed (checked in, marked for publish changes, etc.), since the last publish. If no pages are changed since the last publish,
            an error is thrown.
            </para>
            <para>Full publishes first clean up the target folder by deleting all files and directories.</para>
            <para>If the current user doesn't have access right to use this publishing target, a publish will not happen and an error log entry will be written to design-time log.</para>
            <para>All <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheets</see> in the "xml/Stylesheets" folder are validated during publish.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublish">BeforePublish</see> is fired prior to creating a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.Published">BeforePublish</see> is fired after a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> completes the actual publish, not after the Publishing Task is created.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When this Publishing Target is retrieved via a <see cref="T:Ingeniux.CMS.IUserSession">Read-only Session</see>.</exception>
            <exception cref="!:System.SecurityException">When <see cref="T:Ingeniux.CMS.IUser">current user</see> doesn't have the permission to perform a publish; when the current user can't access this publishing target; or when performing an incremental publish and the current user doesn't have permision to incrementally publish.</exception>
            <exception cref="T:System.Xml.XmlException">When any <see cref="T:Ingeniux.CMS.IStylesheet">XSLT style sheet</see> failed to load as an XML document.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.IPage">Page</see> can be marked on this publishing target.
            </summary>
            <param name="page">Page to check on</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IPage">Page</see> can be marked, false otherwise.</returns>
            <remarks>
            <para>If the <see cref="T:Ingeniux.CMS.IPage">Page</see> is a <see cref="P:Ingeniux.CMS.IPage.IsComponent">component</see>, it can be marked for publish on any publishing target.</para>
            <para>If not, it must be the a descendant of the <see cref="P:Ingeniux.CMS.IPublishingTarget.RootPage">Root Page</see> of this publishing target to be marked for publish.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)">
            <summary>
            Checks whether the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is marked for publish on its current checked-in version.
            </summary>
            <param name="page">The page to check marking on</param>
            <returns>True if latest version of the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is marked on this publishing target.</returns>
            <remarks>
            <para>If the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is not marked on this publishing target, but on previous version, this method returns false.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)">
            <summary>
            Checks whether the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is marked on its specific <see cref="T:Ingeniux.CMS.IPageVersion">Version</see>.
            </summary>
            <param name="pageVersion">The page's version on which to check marked-for-publish status</param>
            <returns>True if the version number of the specified <see cref="T:Ingeniux.CMS.IPageVersion">PageVersion</see> is marked on this publishing target.</returns>
            <remarks>
            <para>If the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is marked on this publishing target, but not the specified version number, this method returns false.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)">
            <summary>
            Marks or unmarks a <see cref="T:Ingeniux.CMS.IPage">Page</see> to publish, on a specified version number, on this publishing target.
            </summary>
            <param name="page">The page whose publish marking to change</param>
            <param name="mark">Whether to mark or unmark the <see cref="T:Ingeniux.CMS.IPage">Page</see></param>
            <param name="versionToMark">If to mark for publish, the version number to mark on. Default value is 0, means marking the <see cref="T:Ingeniux.CMS.IPage">Page</see> on its latest version.</param>
            <remarks>
            <para>Recycled <see cref="T:Ingeniux.CMS.IPage">Pages</see> cannot be marked for publish.</para>
            <para>The specified <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="!:Ingeniux.CMS.IPage.LastModified">Last Modified Time</see> will be updated after calling this method.</para>
            <para>The events <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.BeforePublishingTargetMarkForPublishChange">BeforePublishingTargetMarkForPublishChange</see>
            and <see cref="E:Ingeniux.CMS.IPublishingTargetEvents.AfterPublishingTargetMarkForPublishChange">AfterPublishingTargetMarkForPublishChange</see> are fired before and after, respectively, calling this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the "page" parameter value is null.</exception>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see> that are marked on this publishing target.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of marked page versions</returns>
            <remarks>
            <para>Empty collection is returned when no pages are marked on this publishing target.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.Marked(Ingeniux.CMS.IPage)">
            <summary>
            Checks whether the specified <see cref="T:Ingeniux.CMS.IPage">Page</see> is marked on this publishing target.
            </summary>
            <param name="page">The <see cref="T:Ingeniux.CMS.IPage">Page</see> to check marking on</param>
            <returns>True if any version of this <see cref="T:Ingeniux.CMS.IPage">Page</see> (excluding the checked-out version) is marked for publish on this publishing target.</returns>
            <remarks>
            <para>If the "page" parameter value is null, returns false.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.Marked(System.String)">
            <summary>
            Checks whether the <see cref="T:Ingeniux.CMS.IPage">Page</see> specified is marked on this publishing target.
            </summary>
            <param name="pageId">The ID of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to check marking on</param>
            <returns>True if any version of this <see cref="T:Ingeniux.CMS.IPage">Page</see> (excluding the checked-out version) is marked for publish on this publishing target.</returns>
            <remarks>
            <para>If the page ID is null or empty, returns false</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedOnPageVersion(Ingeniux.CMS.IPageVersion)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedVersionForPage(Ingeniux.CMS.IPage)">
            <summary>
            Retrieves the marked <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of the specified <see cref="T:Ingeniux.CMS.IPage">Page</see>
            on this publishing target.
            </summary>
            <param name="page">Page to check marking on</param>
            <returns>The marked <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> for the specified
            <see cref="T:Ingeniux.CMS.IPage">Page</see> on this publishing target.</returns>
            <remarks>
            <para>This method returns null if the "page" parameter value is null, or if the <see cref="T:Ingeniux.CMS.IPage">Page</see> is not marked for publish
            on this Publishing Targer.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedVersionForPage(System.String)">
            <summary>
            Retrieves the marked version number of the <see cref="T:Ingeniux.CMS.IPage">Page</see> with a specified ID.
            </summary>
            <param name="pageId">ID of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to check marking on</param>
            <returns>The marked version of the given <see cref="T:Ingeniux.CMS.IPage">Page</see>. If the page is not marked on this publishing target,
            returns -1.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.MarkedPagesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> marked on this Publishing Target on any version.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that were marked on this Publishing Target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTarget.PendingPublishes">
            <summary>
            Retrieves the collection of pending <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Tasks</see> issued by this Publishing Target.
            </summary>
            <returns>Collection of pending Publishing Tasks from this Publishing Target.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.RelativePublishFolder">
            <summary>
            Gets/sets the name of the folder to which content is published. It is located under the pub folder.
            </summary>
            <remarks>
            <para>
            Note that, as of CMS 9.0, the pub folder is no longer a child of the xml folder, but rather its sibling.
            Both are children of the App_Data folder.
            </para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">
            <summary>
            Gets/sets the full physical path of the folder to which content is published.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.RelativePublishFolder"/>
            <exception cref="T:System.ArgumentException">When sets to a null or an empty value, or the value of path is not under the pub folder.</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.RootPage">
            <summary>
            Gets/sets the root <see cref="T:Ingeniux.CMS.IPage">Page</see> for this target. 
            Pages (not components) must be under this root page in order to be marked for publish. Only marked-for-publish pages under this page will be published.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.GlobalContentRoot">
            <summary>
            Get and sets the root <see cref="T:Ingeniux.CMS.IPage">Location</see> that contains all the components that also needs to be published.
            This setting is only effective when the global content root is not under the <see cref="P:Ingeniux.CMS.IPublishingTarget.RootPage">Root Page</see>.
            </summary>
            <remarks>
            <para>Unlike pages, components can be marked for any <see cref="!:Ingeniux.CMS.IPublishing Target">Publishing Target</see>.
            Only marked components under this page or the <see cref="T:Ingeniux.CMS.IPage">Root Page</see> are published.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.Transform">
            <summary>
            Gets/sets whether to fully expand the <see cref="T:Ingeniux.CMS.IPage">Pages</see> and apply XSLT style sheets during publishing.
            Set this property to true for publishing to non–Dynamic Site Server content locations.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.UserAgentSearchString">
            <summary>
            Gets/sets the search string for the User Agent. This setting only applies when the <see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform</see> property is true,
            transforms on publishes behave very similarly to a browser request on a page at runtime.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.Transform"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.SiteSearchString">
            <summary>
            Gets/sets the search string for site branding. This setting only applies when the<see cref="P:Ingeniux.CMS.IPublishingTarget.Transform">Transform</see> property is true,
            since transforms on publishes behave very similarly to a browser request on a page at runtime.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.Transform"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.PublishingSystemSecurity">
            <summary>
            Gets/sets the security settings for this publishing target.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPublishingSystemSecurity"/>
            <exception cref="T:System.ArgumentException">When setting a null value to this property</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.SURLSettings">
            <summary>
            Gets/sets the structured URL settings for this publishing target.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IStructuredUrlSettings"/>
            <exception cref="T:System.ArgumentException">When setting null value to this property</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.ExcludedFiles">
            <summary>
            Gets/sets the asset files that will be excluded during publish.
            </summary>
            <remarks>
            <para>When setting a null value to this property, the excluded files list is emptied.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.ExcludedDirectories"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.ExcludedDirectories">
            <summary>
            Gets/sets the asset directories that will be excluded during publish. Any files in these directories will not be copied to the target location.
            </summary>
            <remarks>
            <para>When setting a null value to this property, the excluded directories list is emptied.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.ExcludedFiles"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.LastPublishDate">
            <summary>
            Gets the time when this publishing target last performed a publish. 
            The property returns null if this publishing target never published.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.UseExternalPreviewUrl">
            <summary>
            Gets/sets whether the Publishing Target uses an external preview URL.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.ExternalPreviewUrl">
            <summary>
            Gets/sets the URL for previewing <see cref="T:Ingeniux.CMS.IPage">Pages</see> with this Publishing Target on the Ingeniux CMS user interface.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.IceFieldMarkupUpdateUrl"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.IceFieldMarkupUpdateUrl">
            <summary>
            Gets/sets the URL for providing markup feedback upon updating a Page's <see cref="T:Ingeniux.CMS.IElement">Element</see> value,
            via In-Context Editing or Page Builder.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTarget.ExternalPreviewUrl"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.Profile">
            <summary>
            Gets/sets the <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see> to which this Publishing Target belongs.
            </summary>
            <remarks>
            <para>If this Publishing Target doesn't belong to any <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>, this property returns null.</para>
            <para>If this property is set to a null value, then it will not belong to any <see cref="T:Ingeniux.CMS.IPublishingProfile">Publishing Profile</see>.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.EnableDynamicPublishing">
            <summary>
            Gets/sets whether Dynamic Publishing is enabled for this Publishing Target.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.PresentationFormatter">
            <summary>
            Gets/sets the full class name of the formatter for presentations formatting on this Publishing Target.
            </summary>
            <remarks>
            <para>If not explicitly set, or set to null or empty, this property returns the value
            in the settings at the "Presentations/Formatter" section.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTarget.ExcludeLingualMaps">
            <summary>
            Gets/sets whether to exclude lingual maps, during publishing and preview
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.#ctor">
            <summary>
            Create a blank publishing target
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.#ctor(Ingeniux.CMS.IPublishingManager,System.String,Ingeniux.CMS.IPage,System.String,Ingeniux.CMS.IUser)">
            <summary>
            Create a named publishing target with a parent publishing manager
            </summary>
            <param name="pubMgr">Parent publishing manager</param>
            <param name="name">Publishing target name</param>
            <param name="creationUser">CMS User performing the creation</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.ValidateData">
            <summary>
            Validate publishing target internal data
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Validate that user has permissions to manipulate the publishing target
            </summary>
            <param name="user">CMS User to test</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.Publish(System.Boolean,System.Boolean)">
            <summary>
            Execute a publish of the publishing target
            </summary>
            <param name="incremental">True if the publish is incremental and not full</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.RepublishPage(Ingeniux.CMS.IPage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Publish a single page
            </summary>
            <param name="page">CMS Page to be published</param>
            <param name="recursive">True if decendent pages should also be published</param>
            <param name="incremental">True if publish is incremental and not full</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.CanMarkPage(Ingeniux.CMS.IPage)">
            <summary>
            Test if a page resides under the root page of the publishing target
            </summary>
            <param name="page">CMS Page to test</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.MarkedOnPageCurrentVersion(Ingeniux.CMS.IPage)">
            <summary>
            Test if a page and its current version is marked for publish on the publishing target
            </summary>
            <param name="page">CMS Page to test</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)">
            <summary>Mark/Unmark a page for publish on the publishing target</summary>
            <param name="page">CMS Page to be marked/unmark</param>
            <param name="mark">True if mark for publish, False if unmark</param>
            <param name="versionToMark">Page version number to mark/unmark</param>
            <exception cref="T:System.ArgumentNullException">page</exception>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieve a list of pages marked for publish on the publishing target
            </summary>
            <param name="count">Set to the number of pages retrieved</param>
            <param name="pageSize">Optional max number of pages</param>
            <param name="startIndex">Optional starting index</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.MarkedVersionForPage(Ingeniux.CMS.IPage)">
            <summary>
            Retrieve the version number of a page marked for publish on the publishing target
            </summary>
            <param name="page">CMS Page to get marked version of</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.MarkedPagesCount">
            <summary>
            Returns the number of pages marked for publish on the publishing target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.Replicator">
            <summary>
            The publishing target's replicator
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.PendingPublishes">
            <summary>
            Return queue of pending publishes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTarget.Serialize">
            <summary>
            Serialize publishing target to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.RelativePublishFolder">
            <summary>
            Relative Path to the folder the publishing target will publish to
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.PublishFolder">
            <summary>
            Folder the publishing target will publish to
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.RootPage">
            <summary>
            Root Page of the publishing target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.GlobalContentRoot">
            <summary>
            Global Content root of the publishing target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.Transform">
            <summary>
            True if the publishing target should transform pages on publish
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.UserAgentSearchString">
            <summary>
            User Agent Search String
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.SiteSearchString">
            <summary>
            Site Search String
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.LastPublishDate">
            <summary>
            Last date and time the publishing target was published
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.ExternalPreviewUrl">
            <summary>
            External Preview URL
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.UseExternalPreviewUrl">
            <summary>
            True if publishing target should use External Preview URL
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.IceFieldMarkupUpdateUrl">
            <summary>
            ICE Field Markup Update URL
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.Profile">
            <summary>
            The publishing profile the publishing target belongs to if any
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.EnableDynamicPublishing">
            <summary>
            True if publishing target will use dynamic publishing
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.PublishingSystemSecurity">
            <summary>
            Publishing system security set for the publishing target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTarget.SURLSettings">
            <summary>
            Structured URL settings for the publishing target
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingPageEntry">
            <summary>
            Represents a <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published in a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingPageEntry.PageID">
            <summary>
            Gets and sets the ID of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingPageEntry.Version">
            <summary>
            Gets and sets the version of given <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingPageEntry.TransformOnPublish">
            <summary>
            Gets and sets the whether publish results of this <see cref="T:Ingeniux.CMS.IPage">Page</see> will be fully expanded and have an XSLT style sheet applied to them.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingPageEntry.#ctor">
            <summary>
            Create an empty publishing page entry
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingPageEntry.#ctor(Ingeniux.CMS.IPageVersion,System.Boolean)">
            <summary>
            Create a publishing page entry from a page version
            </summary>
            <param name="page">CMS Page Version to use for publishing page entry</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingPageEntry.ValidateData">
            <summary>
            Validate the publishing page entry internal data
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingPageEntry.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Test if user has permissions to manipulate publishing page entry
            </summary>
            <param name="user">CMS User to test</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingPageEntry.Serialize">
            <summary>
            Serialize publishing page entry to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.PublishingPageEntry.PageID">
            <summary>
            Page ID
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingPageEntry.Version">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingPageEntry.TransformOnPublish">
            <summary>
            True if page is to be transformed on publish
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingTask">
             <summary>
             Represents a task to publish a set of <see cref="T:Ingeniux.CMS.IPage">Pages</see> and assets.
             </summary>
             <example>
             Serialization:
             <code language="xml">
             <![CDATA[
             <PublishTask PubDoneFileName="publishdone.txt" SyncDoneFilename="synchdone.lck">
              <Settings>
                <IsFullPublish>true</IsFullPublish>
                <PublishingTarget ID="PublishingTargets/23" Name="Production" />
                <RootPage>x3</RootPage>
                <Submitted UTC="true">20140618T19:21:14</Submitted>
                <SubmitUser UserID="ingeniux\\admin1" IPAddress="10.10.2.254" ServerId="5B9D6571-F894-45EF-AD83-D930CEF3E89D" />
              </Settings>
              <Pages Count="3">
                <Page ID="x45" Version="9" TransformOnPublish="false" />
                <Page ID="x789" Version="2" TransformOnPublish="false" />
                <Page ID="x6" Version="13" TransformOnPublish="false" />
              </Pages>
            </PublishTask>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTask.Execute">
            <summary>
            Executes the publishing task.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTask.ReadyToExecute(Ingeniux.CMS.IUserSession)">
            <summary>
            Checks whether this publishing task is ready to be executed.
            </summary>
            <param name="session">The session used to retrieve and modify related entities for this publishing task</param>
            <returns>True if task is ready. Otherwise, this method returns false.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTask.Pages">
            <summary>
            Retrieves the information of the <see cref="T:Ingeniux.CMS.IPage">Pages</see> to be published.
            </summary>
            <returns>Collection of information on the pages to be published</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTask.AddPage(Ingeniux.CMS.IPublishingPageEntry)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published.
            </summary>
            <param name="page">The information on how to publish the page</param>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTask.PagesCount">
            <summary>
            Retrieves the count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> to be published.
            </summary>
            <returns>Count of pages to be published.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.PubDoneFilename">
            <summary>
            Gets the "publishing done" marker file name.
            </summary>
            <remarks>This property is for compatibility of external synchronization framework only; it will always return "publishdone.txt".</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.SyncDoneFilename">
            <summary>
            Gets the "synchronization/replication done" marker file name.
            </summary>
            <remarks>This property is for compatibility of external synchronization framework only; it will always return "synchdone.lck".</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.IsFullPublish">
            <summary>
            Gets whether this task is for a full publish or an incremental publish.
            A full publish will forces the publication of marked pages, changed or not, and cleans up the target location.
            An incremental publish only publishes changed pages and doesn't perform any clean up.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.PublishingTargetID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> toward which to publish.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTask.PublishingTargetName"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.PublishingTargetName">
            <summary>
            Gets the name of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> toward which to publish.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IPublishingTask.PublishingTargetID"/>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.RootPageID">
            <summary>
            Gets the ID of the root <see cref="T:Ingeniux.CMS.IPage">Page</see> of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> toward which to publish.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.SubmitTime">
            <summary>
            Gets the time when this task was submited.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.SubmitUserID">
            <summary>
            Gets the user name of the <see cref="T:Ingeniux.CMS.IUser">User</see> that submitted this task.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.SubmitUserIP">
            <summary>
            Gets the IP address of the computer where the user submitted the task.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.SubmitServerGuid">
            <summary>
            Gets the unique ID of the CMS server that received this submission.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTask.ForcedIncremental">
            <summary>
            Gets whether this publishing system bypassed change time checking and proceed with a forced incremental publish
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.#ctor">
            <summary>
            Create an empty publishing task
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.#ctor(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingPageEntry},System.Boolean,Ingeniux.CMS.IUser,Ingeniux.CMS.IPublishingTarget,System.Guid,System.Boolean)">
            <summary>
            Create a publishing task from a publishing target consisting of a number of pages
            </summary>
            <param name="pages">CMS Pages to add to the publishing task</param>
            <param name="incremental">True if publish is incremental</param>
            <param name="user">CMS User creating the publishing task</param>
            <param name="pubTarget">Publishing Target used to create the publishing task</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.ValidateData">
            <summary>
            Validate publishing task internal data
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Test if user has permissions to manipulate the publishing task
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.Pages">
            <summary>
            Retrieve a list of pages to be published
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.AddPage(Ingeniux.CMS.IPublishingPageEntry)">
            <summary>
            Add publishing page entry
            </summary>
            <param name="page">Publishing Page Entry to add</param>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.PagesCount">
            <summary>
            Returns the number of pages marked for the publishing task
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PublishingTask.Serialize">
            <summary>
            Serialize the publishing task to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.IsFullPublish">
            <summary>
            True if full publish, false if incremental
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.PublishingTargetID">
            <summary>
            Publishing Target ID
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.RootPageID">
            <summary>
            Root Page ID from the publishing target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.GlobalContentRootID">
            <summary>
            Global Content Root Page ID from the publishing target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.SubmitTime">
            <summary>
            Date and time the publishing task was created
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.SubmitUserID">
            <summary>
            CMS User ID which created the publishing task
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishingTask.SubmitServerGuid">
            <summary>
            Server Guid from submitted content store. Used to restore tasks on server failure.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Stylesheet">
            <summary>
            Represent an xslt stylesheet in stylesheets folder
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IStylesheet">
            <summary>
            Represents a XSLT style sheet file in the App_Dat/xml/Stylesheets folder.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IStylesheet.Document">
            <summary>
            Retrieves the XML document of this XSLT style sheet.
            </summary>
            <returns>XML document of the XSLT style sheet.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IStylesheet.Validate(System.Action{System.Xml.Schema.ValidationEventArgs})">
            <summary>
            Validates the XSLT style sheet, both as a valid XML document and/or with provided callback.
            </summary>
            <param name="validationCallback">Callback to perform the validation. Can be null.</param>
        </member>
        <member name="P:Ingeniux.CMS.IStylesheet.FilePath">
            <summary>
            Gets the full path of the XSLT style sheet <see cref="T:System.IO.FileInfo">File</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStylesheet.FileName">
            <summary>
            Gets and sets the name of the XSLT stylesheet <see cref="T:System.IO.FileInfo">File</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Stylesheet.Validate(System.Action{System.Xml.Schema.ValidationEventArgs})">
            <summary>
            Perform validation in xml level, not in xslt level
            </summary>
            <param name="validationCallback"></param>
        </member>
        <member name="T:Ingeniux.CMS.IAttribute">
            <summary>
            Represents an attribute in <see cref="T:Ingeniux.CMS.IPage">Page</see> or <see cref="T:Ingeniux.CMS.IElement">Element</see> content, 
            or in a Workflow <see cref="T:Ingeniux.CMS.IAction">Action</see>. Attributes are always uniquely named.
            Attribute objects are already serialized into an XAttribute object.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
            <see cref="T:Ingeniux.CMS.IElement"/>
            <see cref="T:Ingeniux.CMS.IAction"/>
        </member>
        <member name="M:Ingeniux.CMS.IAttribute.Serialize">
            <summary>
            Serializes the Attribute object to an XML Attribute 
            </summary>
            <returns>An XAttribute instance</returns>
        </member>
        <member name="P:Ingeniux.CMS.IAttribute.Name">
            <summary>
            Gets the name of the attribute
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAttribute.Value">
            <summary>
            Gets and sets the value of the attribute
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAttribute.Readonly">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IElement">Element</see> as read-only on the Edit Form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAttribute.Hidden">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IElement">Element</see> as hidden on the Edit Form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAttribute.Required">
            <summary>
            Gets sets the <see cref="T:Ingeniux.CMS.IElement">Element's</see> value as required. <see cref="T:Ingeniux.CMS.IPage">Pages</see> containing required <see cref="T:Ingeniux.CMS.IElement">Elements</see> with empty values cannot be checked in.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.HierarchyId">
            <summary>
            The hierarchy 
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IHierarchyId">
            <summary>
            The object that stores hierarchy information on an entity.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.IsDescendantOf(Ingeniux.CMS.IHierarchyId)">
            <summary>
            Checks whether this hierarchy descends from another hierarchy.
            </summary>
            <param name="hid">The potential ancestor hierarchy</param>
            <returns>True if the parameter is the ancestor of this hierarchy, false if not.</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsDescendantOrSelfOf(Ingeniux.CMS.IHierarchyId)"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsChildOf(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.IsDescendantOrSelfOf(Ingeniux.CMS.IHierarchyId)">
            <summary>
            Checks whether this hierarchy is descends from another hierarchy or is the hierarychy itself.
            </summary>
            <param name="hid">The potential ancestor hierarchy</param>
            <returns>True if the parameter is the ancestor of this hierarchy or is the hierarchy itself, false if not.</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsDescendantOf(Ingeniux.CMS.IHierarchyId)"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsChildOf(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.IsChildOf(Ingeniux.CMS.IHierarchyId)">
            <summary>
            Checks whether this hierarchy is child of another hierarchy.
            </summary>
            <param name="hid">The potential parent hierarchy</param>
            <returns>True if the parameter is the parent of this hierarchy, false if not.</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsDescendantOrSelfOf(Ingeniux.CMS.IHierarchyId)"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.IsDescendantOf(Ingeniux.CMS.IHierarchyId)"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.MoveAncestor(Ingeniux.CMS.IHierarchyId,Ingeniux.CMS.IHierarchyId,System.Boolean)">
            <summary>
            Moves the hierarchy to be under another ancestor
            </summary>
            <param name="oldAncestor">Old ancestor node</param>
            <param name="newAncestor">New ancestor node</param>
            <param name="copyMode"><para>Specifies if the ancestor moving is due to a copy action of the node object that is taking this hierarchy. </para>
            <para>When in copy mode, validation of current hierary under the old ancestor, and new ancestor is not descendant of this hierarchy will not be carried out.</para></param>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.Parent">
            <summary>
            Retrieves the parent hierarchy of this hierarchy. 
            </summary>
            <returns>If this hierarchy is root, returns null</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.Ancestors"/>		
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.Ancestors">
            <summary>
            Retrieves the collection of this hierarchy's ancestors
            </summary>
            <returns>Collection of ancestors. If root hierarchy, returns empty collection</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.Ancestors"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.Next">
            <summary>
            Retrieves the next sibling hierarchy available.
            </summary>
            <returns>The next sibling hierarchy, it is the same parent hierarchy, the last digit is the rounded last digit of this hierarchy plus 1</returns>
            <remarks>This method is used when adding a new sibling to a tree node and finding out what hierarchy should be assigned to the new node.</remarks>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.NextChild"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.AddChild"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.NextChild">
            <summary>
            Retrieves the next child hierarchy available
            </summary>
            <returns>The next child hierarchy, parent hierarchy is this, the last digit is the rounded last digit of tracked next avaible child hierarchy position. </returns>
            <remarks>This method is used when adding a new child to a tree node and finding out what hierarchy should be assigned to the new node.</remarks>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.Next"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.AddChild"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.AddChild">
            <summary>
            Adds a new child hierarchy. This will cause the next available child position to increment by one.
            </summary>
            <returns>The next available child hierarchy</returns>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.NextChild"/>
            <seealso cref="M:Ingeniux.CMS.IHierarchyId.AddChild"/>
        </member>
        <member name="M:Ingeniux.CMS.IHierarchyId.SiblingPosition">
            <summary>
            Retrieves the position of this hierarchy to its siblings.
            </summary>
            <returns>The last digit value of this hierarchy</returns>
        </member>
        <member name="P:Ingeniux.CMS.IHierarchyId.Value">
            <summary>
            Gets the value of hierary in string format.
            </summary>
            <example>
            1|2|3.5|32
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IHierarchyId.Level">
            <summary>
            Gets the number of levels the hierarchy has
            </summary>
            <example>Hierarchy 1|2|3.5 has 3 levels</example>
        </member>
        <member name="M:Ingeniux.CMS.HierarchyId.MoveAncestor(Ingeniux.CMS.IHierarchyId,Ingeniux.CMS.IHierarchyId,System.Boolean)">
            <summary>
            This method should only be called all the descendant of a node that just been moved. Because it doesn't care about positioning
            </summary>
            <param name="oldAncestor"></param>
            <param name="newAncestor"></param>
        </member>
        <member name="M:Ingeniux.CMS.HierarchyId.Between(Ingeniux.CMS.IHierarchyId,Ingeniux.CMS.IHierarchyId)">
            <summary>
            Return the hierarychy between 2 sibling hierarchies.
            Please note that this newNextSib cannot be null. Use AddChild instead if to
            append a new child at the end.
            </summary>
            <param name="newPreviousSib"></param>
            <param name="newNextSib"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IGroupRole">
            <summary>
            Represents a specific <see cref="T:Ingeniux.CMS.IUserRights">permissions set</see> that is stored and provides a way to set permission on a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IGroupRole.Permissions">
            <summary>
            Gets/sets the <see cref="T:Ingeniux.CMS.IUserRights">permissions set</see> for this role.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUser">
            <summary>
            Represents a user in the Content Store. The Ingeniux CMS CSAPI is an protected environment that requires a user account to create any kind of reading or writing sessions.
            </summary>
            <remarks>
            <para><see cref="T:Ingeniux.CMS.IUser">User</see> objects are retrieved directly from <see cref="T:Ingeniux.CMS.IUserSession">Session</see> objects.</para>
            <code language="C#">
            IUser currentUser = Session.OperatingUser;
            </code>
            </remarks>
        </member>
        <member name="T:Ingeniux.CMS.IReadonlyUser">
            <summary>
            Represents the basic collection of information to be used to create a <see cref="T:Ingeniux.CMS.IUserSession">Session</see>.
            </summary>
            <remarks>
            <para>
            The ReadOnlyUser object is retrieved from the <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see> object via the method <see cref="M:Ingeniux.CMS.IContentStore.GetStartingUser(System.String,System.Net.IPAddress)">GetStartingUser</see>.
            </para>
            <code language="C#">
            IReadonlyUser currentUser = contentStore.GetStartingUser(@"ingeniux\someuserid", visitorIp);
            
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	...
            }
            </code>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IReadonlyUser.UserId">
            <summary>
            Gets the UserId of the user.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReadonlyUser.IsAdministrator">
            <summary>
            Gets whether the user is an administrator. Administrators have the privilege of working with any object in the CSAPI.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReadonlyUser.LastLogin">
            <summary>
            Gets the time when this user last logged in.
            </summary>
            <remarks>If this user has never logged in before, returns null.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IReadonlyUser.IP">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress">IP Address</see> of the browser's computer.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUser.Groups(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves in a paginated fashion the <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> this user belongs to.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of groups this user belongs to. Empty collection if the user belongs to no existing groups.</returns>
            <seealso cref="M:Ingeniux.CMS.IUser.IsMemberOf(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IUser.GroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IUser.IsMemberOf(Ingeniux.CMS.IUserGroup)">
            <summary>
            Checked whether this user is a member of the specified <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
            <param name="group">The group to check</param>
            <returns>True if this user is a member of the specified <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>, false otherwise.</returns>
            <remarks>
            <para>When the value of the "group" parameter is null, returns false.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IUser.Groups(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IUser.GroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IUser.GroupsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> this user belongs to.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> this user belongs to. Returns 0 if this user belongs to no groups.</returns>
            <seealso cref="M:Ingeniux.CMS.IUser.Groups(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="!:Ingeniux.CMS.IUser.IsMemberOof"/>
        </member>
        <member name="M:Ingeniux.CMS.IUser.UserRightGranted(Ingeniux.CMS.IUserRights)">
            <summary>
            Checks whether the specified <see cref="T:Ingeniux.CMS.IUserRights">User Right</see> is granted to this User.
            </summary>
            <param name="right">The User Right to check on</param>
            <returns>True if any <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> this user belongs to include the specified <see cref="T:Ingeniux.CMS.IUserRights">User Right</see>.</returns>
            <remarks>
            <para>When the value of the "right" parameter is null, returns true.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUser.Notifications">
            <summary>
            Gets the collection <see cref="!:Ingeniux.Runtime.IUserNotifications">Notifications</see> issued to this User.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.IUser.EmailAddress">
            <summary>
            Gets and sets the email address of this User.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUser.IntegratedMembershipProvider">
            <summary>
            Gets and sets the full name of the <see cref="T:System.Type">Type</see> of the provider object that authenticates this user.
            </summary>
            <remarks>
            <para>A User being an integrated membership provider means the CSAPI can create, update, and remove this user account directly via the specified <see cref="T:System.Type">Type</see>.</para>
            <para>When the value of this property is null or empty, the user is not an integrated user.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IUser.ReadLocales">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.ILocale">Languages</see> this user can read.
            </summary>
            <remarks>
            <para>
            A user can only access the Translation interface if the user's <see cref="P:Ingeniux.CMS.IUser.ReadLocales">Read Locales</see> 
            include the Locale of the master <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="P:Ingeniux.CMS.IPage.Locale">Locale</see> and its
            <see cref="P:Ingeniux.CMS.IUser.WriteLocales">Write Locales</see> include the clone <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="P:Ingeniux.CMS.IPage.Locale">Locale</see>.
            </para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IUser.WriteLocales"/>
        </member>
        <member name="P:Ingeniux.CMS.IUser.WriteLocales">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.ILocale">Languages</see> this user can write.
            </summary>
            <remarks>
            <para>
            A user can only access the  Translation interface if the user's <see cref="P:Ingeniux.CMS.IUser.ReadLocales">Read Locales</see> 
            include the locale of the mster <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="P:Ingeniux.CMS.IPage.Locale">Locale</see> and its
            <see cref="P:Ingeniux.CMS.IUser.WriteLocales">Write Locales</see> include the clone <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="P:Ingeniux.CMS.IPage.Locale">Locale</see>.
            </para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IUser.ReadLocales"/>
        </member>
        <member name="P:Ingeniux.CMS.IUser.ReceiveWorkFlowNotificationMail">
            <summary>
            Gets and sets whether this user will receive notification emails after a <see cref="T:Ingeniux.CMS.IPage">Page</see> advances through is <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.
            </summary>
            <remarks>
            <para>During <see cref="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">Workflow Advance</see>, the CMS tries to send emails to the page's <see cref="P:Ingeniux.CMS.IPage.AssignedUser">Assigned User</see>,
            and the <see cref="T:Ingeniux.CMS.IUser">User</see> the <see cref="T:Ingeniux.CMS.IPage">Page</see> will be assigned to. The value of this property sets whether those users receive their notification
            emails or not.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IUser.UserRights">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IUserRights">User Rights</see> for this User.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUser.Activities">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUserActivities">Actities</see> of the user, including its recently visited <see cref="T:Ingeniux.CMS.IPage">Pages</see>
            and its favorite <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserActivityPageEntry">
            <summary>
            Represents a single activity on a <see cref="T:Ingeniux.CMS.IPage">Page</see> by a <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserActivityPageEntry.Name">
            <summary>
            Gets the Name of the <see cref="T:Ingeniux.CMS.IPage">Page</see> that was worked on.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserActivityPageEntry.Icon">
            <summary>
            Gets the Icon value of the <see cref="T:Ingeniux.CMS.IPage">Page</see> that was worked on.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.UserActivities">
            <summary>
            Encapsulate user activities, including favorite pages and recent pages.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserActivities">
            <summary>
            Represents the collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> with which a <see cref="T:Ingeniux.CMS.IUser">User</see> interacted.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUserActivities.AddWatchedPage(Ingeniux.CMS.IPage)">
            <summary>
            Adds a <see cref="T:Ingeniux.CMS.IPage">Page</see> to <see cref="T:Ingeniux.CMS.IUser">User</see>'s watched/favorites list
            </summary>
            <param name="page">Page to watch</param>
        </member>
        <member name="M:Ingeniux.CMS.IUserActivities.RemoveWatchedPage(Ingeniux.CMS.IPage)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IPage">Page</see> from a <see cref="T:Ingeniux.CMS.IUser">User</see>'s watched/favorites list.
            </summary>
            <param name="page">Page to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IPage">Page</see> was on the watched/favorites list before, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserActivities.AddRecentPage(Ingeniux.CMS.IPage)">
            <summary>
            Adds a <see cref="T:Ingeniux.CMS.IPage">Page</see> that a <see cref="T:Ingeniux.CMS.IUser">User</see> recently visited.
            </summary>
            <param name="page">Page that was visited</param>
        </member>
        <member name="P:Ingeniux.CMS.IUserActivities.FavoritePages">
            <summary>
            Gets the collection of favorite page entries.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserActivities.RecentPages">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that a <see cref="T:Ingeniux.CMS.IUser">User</see> has recently visited.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserGroup">
            <summary>
            Represents a collection of <see cref="T:Ingeniux.CMS.IUser">Users</see> that share the same <see cref="T:Ingeniux.CMS.IUserRights">Security Permissions</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IUser"/> 
            <seealso cref="T:Ingeniux.CMS.IUserManager"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.Users(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves, in a paginated fashion, the collection of <see cref="T:Ingeniux.CMS.IUser">Users</see> that belong to this group.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection oof <see cref="T:Ingeniux.CMS.IUser">Users</see> that belongs to this group.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.AddUser(Ingeniux.CMS.IUser)">
            <summary>
            Adds a <see cref="T:Ingeniux.CMS.IUser">User</see> to this group.
            </summary>
            <param name="user">The user to add to this group</param>
            <remarks>
            <para>This method does nothing if the "user" parameter value is null or if the user was already member of this group.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.RemoveUser(Ingeniux.CMS.IUser)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IUser">User</see> from this group.
            </summary>
            <param name="user">The user to remove from this group</param>
            <returns>True if "user" was member of this Group, falses otherwise</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.HasMember(Ingeniux.CMS.IUser)">
            <summary>
            Verifies whether the specified <see cref="T:Ingeniux.CMS.IUser">User</see> is a member of this group.
            </summary>
            <param name="user">The user to verify</param>
            <returns>True if the user was a member of this group, false otherwise</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.UsersCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IUser">Users</see> that belong to this group.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IUser">Users</see> that belong to this group.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.UserRightGranted(Ingeniux.CMS.UserRight)">
            <summary>
            Checks whether a specific set of permissions is granted to this group.
            </summary>
            <param name="right">The permission to check on</param>
            <returns>True if the permissions are granted, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.IUserGroup.GrantUserRight(Ingeniux.CMS.UserRight)"/>
            <seealso cref="M:Ingeniux.CMS.IUserGroup.DenyUserRight(Ingeniux.CMS.UserRight)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.GrantUserRight(Ingeniux.CMS.UserRight)">
            <summary>
            Grants a specific set of permissions to this group.
            </summary>
            <param name="right">The permissions to grant</param>
            <seealso cref="M:Ingeniux.CMS.IUserGroup.UserRightGranted(Ingeniux.CMS.UserRight)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserGroup.DenyUserRight(Ingeniux.CMS.UserRight)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserGroup.DenyUserRight(Ingeniux.CMS.UserRight)">
            <summary>
            Denies a specific set of permissions to this group.
            </summary>
            <param name="right">The permissions to deny</param>
            <seealso cref="M:Ingeniux.CMS.IUserGroup.UserRightGranted(Ingeniux.CMS.UserRight)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserGroup.GrantUserRight(Ingeniux.CMS.UserRight)"/>
        </member>
        <member name="P:Ingeniux.CMS.IUserGroup.UserRights">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IUserRights">Security Permissions</see> this group carries.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserManager">
             <summary>
             Represents the manager object that is in charge of managing <see cref="T:Ingeniux.CMS.IUser">Users</see> and <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object and only work within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IUserManager userManager = session.UserManager;
            		...
             }
             </code>
             </remarks>
             <example>
             Serialization of this manager object is similar to users.xml before CMS 9.0:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0"?>
            <UserManager nextID="4" NTDomain="ingeniux" SMTPDomain="mydomain.com" Version="9.0">
            	<Users>
            		<User UserID="ingeniux\ashley" Name="Admin" Email="admin@mydomain.com" LastLogin="6/11/14 11:24 AM"/>
            		<User UserID="ingeniux\someuser" Name="Some User" Email="someuser@mydomain.com" LastLogin="7/27/14 4:24 PM"/>
            	</Users>
            	<Groups>
            		<Group Name="Editors" ID="UserGruops/3">
            			<Users/>
            			<UserRights>
            				<UserRight Name="CanAddWordsToDictionary"/>
            				<UserRight Name="CanViewSearch"/>
            				<UserRight Name="CanViewHistory"/>
            				<UserRight Name="CanViewEditForm"/>
            				<UserRight Name="ViewHiddenElements"/>
            				<UserRight Name="ViewXmlTab"/>
            				<UserRight Name="Categorize"/>
            				<UserRight Name="EditSS;"/>
            				<UserRight Name="ReorderAssignedOthers"/>
            				<UserRight Name="Create"/>
            				<UserRight Name="CheckinCheckOut"/>
            				<UserRight Name="Tree"/>
            				<UserRight Name="Transition"/>
            				<UserRight Name="Rollback"/>
            				<UserRight Name="Mark"/>
            				<UserRight Name="Delete"/>
            				<UserRight Name="CheckIn"/>
            				<UserRight Name="Edit"/>
            				<UserRight Name="Assignment"/>
            				<UserRight Name="Reorder"/>
            			</UserRights>
            		</Group>
            		<Group Name="Authors" ID="UserGroups/2">
            			<Users/>
            			<UserRights>
            				<UserRight Name="Categorize"/>
            				<UserRight Name="Transition"/>
            				<UserRight Name="Create"/>
            				<UserRight Name="CheckinCheckOut"/>
            				<UserRight Name="Edit"/>
            				<UserRight Name="Assignment"/>
            			</UserRights>
            		</Group>
            		<Group Name="Administrators" ID="UserGroup/1">
            			<Users>
            				<User UserID="ingeniux\ashley"/>
            				<User UserID="ingeniux\awang"/>
            			</Users>
            			<UserRights>
            				<UserRight Name="EditSS;"/>
            				<UserRight Name="EditPasswords"/>
            				<UserRight Name="ReorderAssignedOthers"/>
            				<UserRight Name="Create"/>
            				<UserRight Name="PageTypes"/>
            				<UserRight Name="ForcePCR"/>
            				<UserRight Name="CheckinCheckOut"/>
            				<UserRight Name="Main"/>
            				<UserRight Name="Tree"/>
            				<UserRight Name="Transition"/>
            				<UserRight Name="Workflow"/>
            				<UserRight Name="Rollback"/>
            				<UserRight Name="Publish"/>
            				<UserRight Name="IncrementalPublish"/>
            				<UserRight Name="Mark"/>
            				<UserRight Name="Delete"/>
            				<UserRight Name="CheckIn"/>
            				<UserRight Name="Edit"/>
            				<UserRight Name="Admin"/>
            				<UserRight Name="Assignment"/>
            				<UserRight Name="Reorder"/>
            				<UserRight Name="Categorize"/>
            				<UserRight Name="ManageTaxonomy"/>
            				<UserRight Name="ViewXmlTab"/>
            				<UserRight Name="ViewHiddenElements"/>
            				<UserRight Name="ManageAssetSecurity"/>
            				<UserRight Name="DeleteAssetFiles"/>
            				<UserRight Name="ManageAssetFolders"/>
            				<UserRight Name="LocalizeSiteDefinitions"/>
            				<UserRight Name="SetPageLocale"/>
            				<UserRight Name="CanViewEditForm"/>
            				<UserRight Name="CanViewHistory"/>
            				<UserRight Name="CanViewSearch"/>
            				<UserRight Name="CanViewApps"/>
            				<UserRight Name="CanAddWordsToDictionary"/>
            				<UserRight Name="CanPublishDuplicated"/>
            				<UserRight Name="CanManageSchema"/>
            				<UserRight Name="CanEditAssets"/>
            			</UserRights>
            		</Group>
            	</Groups>
            </UserManager>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.Administrators">
            <summary>
            Retrieves the Administrators <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            The Administrators group always exists on any site instance.
            No matter how the <see cref="T:Ingeniux.CMS.IUserRights">Permissions</see> are assigned to this group, it always has all administrative privileges.
            </summary>
            <returns>The Administrator group</returns>
            <seealso cref="!:Ingeniux.CMS.IUserManager.IUsers"/> 
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.Users(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves, in a paginated fashion, the collection of <see cref="T:Ingeniux.CMS.IUser">Users</see>.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUser">Users</see></returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UsersCount"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUser(System.String,System.String,System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.User(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.Users(System.String[])">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IUser">Users</see> by either their <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity ID</see>.
            </summary>
            <param name="userIds">Array of either <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User IDs</see> or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity IDs</see> of the 
            <see cref="T:Ingeniux.CMS.IUser">Users</see> to retrieve.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUser">Users</see></returns>
            <remarks>
            <para>
            Each stirng in the array can be either <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> ("ingeniux\someuser") or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity ID</see> ("User/INGENIUX___someuser").
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UsersCount"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUser(System.String,System.String,System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.User(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.UsersCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IUser">Users</see>.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IUser">Users</see> </returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.Users(System.Int32@,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves, in a paginated fashion, the collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.
            </summary>
            <param name="count">Outputs the total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.</returns>
            <seealso cref="!:Ingeniux.CMS.IUserManager.UserGroupsCount"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUserGroup(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUserGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.UserGroups(System.String[])">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> by their unique IDs.
            </summary>
            <param name="grpIds">Array of unique IDs of the <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> to retrieve. For example, "UserGroups/42"</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.</returns>
            <seealso cref="!:Ingeniux.CMS.IUserManager.UserGroupsCount"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUserGroup(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUserGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.GroupsCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.AddUser(System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="userId">The ID of the <see cref="T:Ingeniux.CMS.IUser">User</see></param>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.IUser">User</see></param>
            <param name="userEmail">The Email address of the <see cref="T:Ingeniux.CMS.IUser">User</see></param>
            <returns>The <see cref="T:Ingeniux.CMS.IUser">User</see> that was created.</returns>
            <remarks>
            <para>
            The new <see cref="T:Ingeniux.CMS.IUser">User</see> that was created was not yet saved to the Content Store. It will be saved when the <see cref="T:Ingeniux.CMS.IUserWriteSession">Write Session</see> is disposed.
            </para>
            <para>
            The new <see cref="T:Ingeniux.CMS.IUser">User</see> cannot yet login to the CMS until it is added to at least one <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </para>
            <para>If "name" parameter value is null or empty, the "userId" parameter value will be used for the <see cref="P:Ingeniux.CMS.IEntity.Name">User Name</see>.</para>
            <para>The event <see cref="E:Ingeniux.CMS.IUserEvents.UserCreated">UserCreated</see> is fired after the new <see cref="T:Ingeniux.CMS.IUser">User</see> is created in 
            <see cref="T:Ingeniux.CMS.IUserSession">Session</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "userId" is null or empty.</exception>
            <exception cref="T:System.ArgumentException">When another <see cref="T:Ingeniux.CMS.IUser">User</see> with the same <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User Id</see> already exists.</exception>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.User(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.Users(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.RemoveUser(Ingeniux.CMS.IUser)">
            <summary>
            Permanently removes a <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="user">The <see cref="T:Ingeniux.CMS.IUser">User</see> to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IUser">User</see> still exists in Content Store, false otherwise.</returns>
            <remarks>
            <para>
            If the "user" parameter value is null, returns false.
            </para>
            <para>
            The method also removes this <see cref="T:Ingeniux.CMS.IUser">User</see> from all <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> it belonged to.
            </para>
            <para>
            This method fires two events: <see cref="E:Ingeniux.CMS.IUserEvents.BeforeUserDelete">BeforeUserDelete</see> and <see cref="E:Ingeniux.CMS.IUserEvents.AfterUserDelete">AfterUserDelete</see>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the "user" is the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Current Operating User</see>.</exception>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUser(System.String,System.String,System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.User(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.Users(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.User(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IUser">User</see> by its <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity ID</see>.
            </summary>
            <param name="userId"><see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity ID</see> of the <see cref="T:Ingeniux.CMS.IUser">User</see> to retrieve</param>
            <returns>The <see cref="T:Ingeniux.CMS.IUser">User</see> with matching <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> or <see cref="P:Ingeniux.CMS.IObjectWithId.Id">Entity ID</see>, null if the user doens't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUser(System.String,System.String,System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.User(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.AddUserGroup(System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see>.
            </summary>
            <param name="name">Name of the new <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> to create</param>
            <returns>The <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> that was created.</returns>
            <remarks>
            <para>
            The new <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> that was created was not yet saved to the Content Store. It will be saved when the <see cref="T:Ingeniux.CMS.IUserWriteSession">Write Session</see> is disposed.
            </para>
            <para>
            The new <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> doesn't have any member <see cref="T:Ingeniux.CMS.IUser">Users</see> associated with it.
            </para>
            <para>The event <see cref="E:Ingeniux.CMS.IUserGroupEvents.UserGroupCreated">UserGroupCreated</see> is fired after the new <see cref="T:Ingeniux.CMS.IUserGroup">UserGroup</see> is created in 
            <see cref="T:Ingeniux.CMS.IUserSession">Session</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "name" is null or empty.</exception>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUserGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.RemoveUserGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> from the Content Store.
            </summary>
            <param name="userGroup">The <see cref="T:Ingeniux.CMS.IUser">User Group</see> to remove</param>
            <returns>True if "userGroup" is not null and exists, false otherwise.</returns>
            <remarks>
            <para>
            If the "userGroup" parameter value is null, returns false.
            </para>
            <para>The Administrators <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> cannot be removed.</para>
            <para>
            This method fires two events: <see cref="E:Ingeniux.CMS.IUserGroupEvents.BeforeUserGroupDelete">BeforeUserGroupDelete</see> and 
            <see cref="E:Ingeniux.CMS.IUserGroupEvents.AfterUserGroupDelete">AfterUserGroupDelete</see>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the "userGroup" is the Administrators <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>, which cannot be removed</exception>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUserGroup(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.UserGroup(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> by its unique <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see>.
            </summary>
            <param name="groupId">Unique ID of the <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> to retrieve</param>
            <returns>The <see cref="T:Ingeniux.CMS.IUserGroup">User Group</see> with a matching unique <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see>. Returns null if this group doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.AddUserGroup(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.IUserManager.RemoveUserGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IUserManager.UserGroups(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.Roles(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves, in a paginated fashion, the collection of <see cref="T:Ingeniux.CMS.IGroupRole">Group Roles</see>.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>The collection of <see cref="T:Ingeniux.CMS.IGroupRole">Group Rofles</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.RolesCount"/> 
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.RolesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IGroupRole">Group Roles</see>.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IGroupRole">Group Roles</see></returns>
            <seealso cref="M:Ingeniux.CMS.IUserManager.Roles(System.Int32@,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.Role(System.String,System.Boolean)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> by either its <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see> or its <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>.
            </summary>
            <param name="idOrName">Unique <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see> or <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> of the <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see></param>
            <param name="isName">Whether the "idOrName" parameter value <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see> or <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> of the 
            <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see></param>
            <returns>The <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> with matching <see cref="P:Ingeniux.CMS.IObjectWithId.Id">ID</see> or <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.AddRole(System.String,Ingeniux.CMS.IUserRights)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> with specified <see cref="T:Ingeniux.CMS.IUserRights">Permissions</see>.
            </summary>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see></param>
            <param name="permissions"><see cref="T:Ingeniux.CMS.IUserRights">Permission</see> for the role</param>
            <returns>The <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> that was created.</returns>
            <remarks>
            <para>
            The new <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> that was created was not yet saved to the Content Store. It will be saved when the <see cref="T:Ingeniux.CMS.IUserWriteSession">Write Session</see> is disposed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When the "name" parameter value is null or empty or the "permissions" parameter value is null</exception>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IUserManager.RemoveRole(Ingeniux.CMS.IGroupRole)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> from the Content Store.
            </summary>
            <param name="role">The <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IGroupRole">Group Role</see> exists, false otherwise</returns>
            <exception cref="T:System.Security.SecurityException">When the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have administrative privileges.</exception>
        </member>
        <member name="P:Ingeniux.CMS.IUserManager.SendWorkFlowNotificationMail">
            <summary>
            Gets and sets whether to send notification emails during <see cref="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">Workflow Advance</see>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserRights">
            <summary>
            Represents the collection of security permissions for a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> or <see cref="T:Ingeniux.CMS.IUser">User</see>.
            It contains two enum sections, each of which contains its own collection of permission types.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUserRights.ToStringNames">
            <summary>
            Retrieves the friendly names of all permission entries from both sections.
            </summary>
            <returns>Array of friendly names of all permission entries.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IUserRights.UserRight1">
            <summary>
            Gets and sets the first section of the permissions.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserRights.UserRight2">
            <summary>
            Gets and sets the second section of the permissions.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUserSession">
            <summary>
            Represents a communication session used to retrieve objects from the content store.
            It is also the place to get all manager instances.
            </summary>
            <remarks>
            <para>
            Objects retrieved within the session are only usable before the session is disposed.
            Their methods do not work outside the created session, and their properties are not guaranteed to work outside of the created session.
            </para>
            <para>
            UserSessions are created from a persisting <see cref="T:Ingeniux.CMS.IContentStore">ContentStore</see> object
            via the method <see cref="M:Ingeniux.CMS.IContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)"/>.
            The best way to open a UserSession, and to make sure it is closed properly, is with a "using" statement:</para>
            <example>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	...
            }
            </code>
            </example>
            <para>
            Objects retrieved via UserSession are read-only. An error is thrown upon closing the session if any of the objects were updated.
            </para>
            <para>
            If the objects are intended to be changed, use the <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession</see> object.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When any objects retrieved within a read-only UserSession are modified.</exception>
            <seealso cref="M:Ingeniux.CMS.IContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)"/>
            <seealso cref="T:Ingeniux.CMS.IUserWriteSession"/>
            <seealso cref="T:Ingeniux.CMS.ITransactionalEntity"/>
            <seealso cref="T:Ingeniux.CMS.IUser"/>
        </member>
        <member name="T:Ingeniux.CMS.IManagersHost">
            <summary>
            Represents collection of all user-specific, session-specific, and publically available Manager objects.
            </summary>
            <remarks>Instance of each manager is only created once and is available for free afterwards.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.Site">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IPage">pages</see>, <see cref="T:Ingeniux.CMS.IPageVersion">page versions</see>,
            and pages tree structure.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.Settings">
            <summary>
            Gets the CMS <see cref="T:Ingeniux.CMS.Settings">settings</see> collection. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.GlobalVariables">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IGlobalVariable">global variables</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.SchemasManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.ISchema">schemas</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.PageCreationRulesManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IPageCreationRule">page creation rules</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.PublishingManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing targets</see> and 
            <see cref="T:Ingeniux.CMS.IPublishingProfile">publishing profiles</see>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.LoggingManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.PublishLog">publishing logs</see> and 
            <see cref="T:Ingeniux.CMS.ReplicationLog">replication logs</see>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.MobileDeviceManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundles</see> for mobile preview emulation.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.UserManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IUser">users</see>, <see cref="T:Ingeniux.CMS.IUserGroup">user groups</see>,
            and <see cref="T:Ingeniux.CMS.IGroupRole">group roles for custom permissions collections</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.WorkflowAdministrator">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IWorkflowDefinition">workflow definitions</see>, 
            <see cref="T:Ingeniux.CMS.IWorkState">workstates</see>, and <see cref="T:Ingeniux.CMS.IWorkflow">workflows</see>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.SiteMap">
            <summary>
            Gets the manager of branding types like <see cref="T:Ingeniux.CMS.ISiteBranding">sites</see> and <see cref="T:Ingeniux.CMS.IUserAgent">user agents</see>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.GlobalExports">
            <summary>
            Gets the definition of exports that will be included as attributes in every link and navigation entry.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.TaxonomyManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.ICategoryNode">category nodes</see> as well as their structure.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.ReferencesManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IReferenceEntry">references between pages</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.AssetSecurityManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IAssetNodeLevelPermission">asset permissions</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.LingualMappingManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.ILingualPageMap">lingual maps between pages within a specific locale</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.SecurityDescriptorsManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.ISecurityDescriptor">site tree security</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.PCRDescriptorsManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.IPCRDescriptor">site tree PCRs</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.LocalesManager">
            <summary>
            Gets the manager of <see cref="T:Ingeniux.CMS.ILocale">built-in locales</see> and <see cref="T:Ingeniux.CMS.ICustomLocale">custom locales</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.SiteContentLocalizationProvider">
            <summary>
            Gets the manager of translations of <see cref="T:Ingeniux.CMS.IPageCreationRule">page creation rules</see>,
            <see cref="T:Ingeniux.CMS.ISchema">schemas</see>, <see cref="T:Ingeniux.CMS.IWorkState">workstates</see> and
            <see cref="T:Ingeniux.CMS.IWorkflowDefinition">workflow definitions</see>.
            </summary>
            <remarks>
            <para>
            These translations are for Ingeniux CMS user interfaces in localized languages. Only the following languages need to be provided:
            </para>
            <para>
            en-us : English (United States)
            </para>
            <para>
            es-mx : Spanish (Mexico) ~ Español (México)
            </para>
            <para>
            fr-ca : French (Canada) ~ Français (Canada)
            </para>
            <para>
            de-de : German (Germany) ~ Deutsch (Deutschland)
            </para>
            <para>
            zh-ch: Chinese (People's Republic of China) ~ 中文(中华人民共和国)
            </para>
            <para>
            ja-jp: Japanese (Japan) ~ 日本語 (日本)
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.PresentationsManager">
            <summary>
            Gets the presentations manager for managing presentation content units.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IManagersHost.NotificationsManager">
            <summary>
            Gets the notifications manager for managing notifications
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.Exists(System.String)">
            <summary>
            Checks whether an object with given unique ids exists or not
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.Get``1(System.String)">
            <summary>
            Retrieves an object that implements the <see cref="T:Ingeniux.CMS.IObjectWithId"/> interface by its unique ID,
            from the content store.
            </summary>
            <typeparam name="T">Type of the object to retrieve</typeparam>
            <param name="id">Unique ID of the object to retrieve</param>
            <returns>Returns the object with matching ID. If object with that ID doesn't exist, or the object's type doesn't match the type parameters, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.GetManager``1(System.Func{``0})">
            <summary>
            Retrieves an objec that <see cref="T:Ingeniux.CMS.IEntity`1"/> interface.
            </summary>
            <typeparam name="TManager">An entity manager type, which must implement <see cref="T:Ingeniux.CMS.ITransactionalEntity"/>.</typeparam>
            <returns>Returns the object with matching ID. 
            If an object with a matching ID doesn't exist, the object's type doesn't match the type parameters, 
            or the object's manager type doesn't match the given manager type,
            returns null.</returns>
            <remarks>It is better to use the corresponding manager to retrieve the object.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.GetEntity``2(System.String,``1)">
            <summary>
            Retrieves by unique ID from the content store an entity object that implements the <see cref="T:Ingeniux.CMS.IEntity`1"/> interface.
            </summary>
            <typeparam name="T">Type of the entity to retrieve, Must be non-abstract type that implements <see cref="T:Ingeniux.CMS.IEntity`1"/> interface</typeparam>
            <typeparam name="TManager">The entity's manager type, which must implement <see cref="T:Ingeniux.CMS.ITransactionalEntity"/>.</typeparam>
            <param name="id">Unique ID of the entity to retrieve</param>
            <param name="manager">The manager that retrieves the entity.</param>
            <returns>Returns the object with matching ID. 
            If an object with a matching ID doesn't exist, the object's type doesn't match the type parameters, 
            or the object's manager type doesn't match the given manager type,
            returns null.</returns>
            <remarks>It is better to use the corresponding manager to retrieve the object.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ingeniux.CMS.IUserSession.GetEntities``2(System.String[],``1)" -->
        <member name="M:Ingeniux.CMS.IUserSession.CompositeGet``2(System.String,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Retrieves an entity with given ID and objects related to the entity.
            The includeExpression defines what to include.
            </summary>
            <remarks>The purpose of this method is to load objects that are returns on properties for given entity.
            Therefore, when calling the properties of an entity, no additional calls to the content store are required.
            Callbacks with too many additional objects will slow loading time for the specified entity.</remarks>
            <typeparam name="T">Type of the entity to retrieve. The entity must be a non-abstract type that implements the <see cref="T:Ingeniux.CMS.IEntity`1"/> interface.</typeparam>
            <typeparam name="TManager">The entity's manager type, which must implement <see cref="T:Ingeniux.CMS.ITransactionalEntity"/>.</typeparam>
            <param name="id">Unique ID of the entity to retrieve.</param>
            <param name="manager">The manager that retrieves the entity.</param>
            <param name="includeExpressions">The callbacks that determine which additional objects are retrieved.</param>
            <returns>Returns the object with a matching ID. 
            Returns null if an object with a matching ID doesn't exist; 
            the object's type doesn't match the type parameters;
            or the object's manager type doesn't match the given manager type. At the same time, included objects are retireved to reduce content-store calls.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.List``1">
            <summary>
            Retrieves the collection of all objects of a given type.
            </summary>
            <remarks>The actual execution of a query is deferred; therefore, additional queries can apply to the result and be executed on the content-store side.
            In order for the query to be executed on content-store side, additional queries cannot use any of the object's methods, only fields and direct properties.
            If content store–side execution is not required, you should first convert the result to an array using the "ToArray()" method.</remarks>
            <typeparam name="T">Type of object to retrieve</typeparam>
            <returns>Collection of objects of given type. Deferred execution.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.CompositeList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Retrieves the collection of all objects of a given type as well as all objects related to the object type.
            The includeExpression defines what to include.
            </summary>
            <typeparam name="T">Type of the objects to retrieve</typeparam>
            <param name="includeExpressions">The callbacks to determine what additional objects are retrieved together</param>
            <returns>Collection of objects with a given type. At the same time, included objects are retireved to reduce content-store calls. Deferred execution.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.Query``2">
            <summary>
            <para>
            Queries the content store and returns a collection of objects of a given type.
            The query is based on the type of index provided.
            </para>
            <para>
            THe CSAPI creates indexes in the content store to expedite object lookup. CSAPI comes with a set of indexes for its basic functionality.
            All strong-typed queries go through this method. Additional custom indexes can be created to provide even further flexibilities 
            on fast lookup. Please refer to the <conceptualLink target="7f0fd58d-21bb-493a-b9a5-7d40456e5b1a" /> topic for more information on indexes and custom indexes.
            </para>
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <typeparam name="TIndex">Type of index to use</typeparam>
            <returns>Collection of objects with a given type. Deferred execution.</returns>
            <remarks>
            <para>
            By default, the query returns all objects indexed with a given index type.
            </para>
            <para>
            Because the execution of query is deferred, additional queries can be applied to the result and executed on content-store side.
            In order for the query to be executed on content-store side, additional queries cannot use any of the object's methods, only fields and direct properties.
            If content store–side execution is not required, you should first convert the result to an array using the "ToArray()" method.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.LuceneQuery``2(System.String)">
            <summary>
            <para>
            Queries the content store using Lucene query syntax and returns a collection of objects of given type.
            </para>
            <para>
            The CSAPI creates indexes in the content store to expedite object lookup. The CSAPI comes with a set of indexes for its basic functionality.
            All strong-typed queries go through this method. Additional custom indexes can be created to provide further flexibility 
            on fast lookup. Please refer to the <conceptualLink target="7f0fd58d-21bb-493a-b9a5-7d40456e5b1a" /> topic for more information on indexes and custom indexes.
            </para>
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <typeparam name="TIndex">Type of index to use</typeparam>
            <param name="luceneQueryExpression">The Lucene query</param>
            <returns>Collection of objects of the given type. Deferred execution.</returns>
            <remarks>
            <para>
            Because the execution of the query is deferred, additional queries can be applied to the result and be executed on content-store side.
            For the query to be executed on content-store side, additional queries cannot use any of the object's methods, only fields and direct properties.
            If content store side–execution is not required, you should first convet the result to an array using the "ToArray()" method.
            </para>
            </remarks>
            <example>
            <para>Lucene query syntax is fairly straightforward. Use the indexable property names and check if they contain the value.</para>
            <para>For example, searching by name for a page that starts with the word "test" would look something like this:</para>
            <code language="C#">
            <![CDATA[
            var pages = session.LuceneQuery<Page, PagesByHierarchy>(out c, "Name:test*");
            ]]>
            </code>
            <para>For more information on Lucene indexing, refer to <a href="http://ravendb.net/docs/2.5/client-api/querying/query-and-lucene-query"/>.</para>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.LuceneQuery``1(System.String)">
            <summary>
            <para>
            Queries the content store using Lucene query syntax, returning a collection of objects of the given type.
            </para>
            <para>
            The CSAPI creates indexes in the content store to expedite object lookup. The CSAPI comes with a set of indexes for its basic functionality.
            All strong-typed queries go through this method. Additional custom indexes can be created to provide further flexibility 
            on fast lookup. Please refer to the <conceptualLink target="7f0fd58d-21bb-493a-b9a5-7d40456e5b1a" /> topic for more information on indexes and custom indexes.
            </para>
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="indexName">The full class name of the index class</param>
            <returns>A collection of objects with the given type. Deferred execution.</returns>
            <remarks>
            <para>
            Because the execution of the query is deferred, additional queries can be applied to the result and be executed on content-store side.
            For the query to be executed on content-store side, additional queries cannot use any of the object's methods, only fields and direct properties.
            If content store side–execution is not required, you should first convet the result to an array using the "ToArray()" method.
            </para>
            </remarks>
            <example>
            <para>Lucene query syntax is fairly straightforward. Use the indexable property names and check if they contain the value.</para>
            <para>For example, searching by name for a page that starts with the word "test" would look something like this:</para>
            <code language="C#">
            <![CDATA[
            var pages = session.LuceneQuery<Page, PagesByHierarchy>(out c, "Name:test*");
            ]]>
            </code>
            <para>For more information on Lucene indexing, refer to <a href="http://ravendb.net/docs/2.5/client-api/querying/query-and-lucene-query"/>.</para>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.LuceneQueryAll``2(System.String,System.Action{System.Int32})">
            <summary>
            <para>
            Queries the content store using Lucene query syntax, returning a collection of objects of the given type.
            </para>
            <para>
            The CSAPI creates indexes in the content store to expedite object lookup. The CSAPI comes with a set of indexes for its basic functionality.
            All strong-typed queries go through this method. Additional custom indexes can be created to provide further flexibility 
            on fast lookup. Please refer to the <conceptualLink target="7f0fd58d-21bb-493a-b9a5-7d40456e5b1a" /> topic for more information on indexes and custom indexes.
            </para>
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="indexName">The full class name of the index class</param>
            <returns>A collection of objects of the given type. Deferred execution.</returns>
            <remarks>
            <para>
            Because the execution of the query is deferred, additional queries can be applied to the result and be executed on content-store side.
            For the query to be executed on content-store side, additional queries cannot use any of the object's methods, only fields and direct properties.
            If content store side–execution is not required, you should first convet the result to an array using the "ToArray()" method.
            </para>
            </remarks>
            <example>
            <para>Lucene query syntax is fairly straightforward. Use the indexable property names and check if they contain the value.</para>
            <para>For example, searching by name for a page that starts with the word "test" would look something like this:</para>
            <code language="C#">
            <![CDATA[
            var pages = session.LuceneQuery<Page, PagesByHierarchy>(out c, "Name:test*");
            ]]>
            </code>
            <para>For more information on Lucene indexing, refer to <a href="http://ravendb.net/docs/2.5/client-api/querying/query-and-lucene-query"/>.</para>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IUserSession.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the count of query results
            </summary>
            <typeparam name="T">Entity type in the query results</typeparam>
            <param name="queryResults">Collection of query results</param>
            <returns>Count of results.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.Id">
            <summary>
            Gets the unique ID of this session.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.IP">
            <summary>
            The IP address this session was created for. Could be null if request is from http access
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.Closed">
            <summary>
            Checks if this session was already closed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.OperatingUser">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUser">user</see> who owns this session.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.StartTime">
            <summary>
            Gets the time that this session was opened.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserSession.ContentFreezeStartingTime">
            <summary>
            Gets the time when content freeze is about to start. Null if no content freeze looming.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.UserSession._RavenDbSessions">
            <summary>
            UserSession maintain a list of raven sessions. Since each raven session only has up to 30 actions allowed,
            We need to make sure before it reaches its limit, we will create another raven session and use that for upcoming
            actions until that run out of actions too.
            
            But we want to save 1 empty action per session for final saving.
            
            With this system, we can load a lot of entities in one user session and update them together in one shot.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.UserSession._LoadedObjects">
            <summary>
            Raven session do cache loaded objects to make sure they are not being loaded again. We will put all of them in this dictionary too
            Since it is reference based, it will not take too much memory.
            
            The nice thing about it is we can always reuse the same object that has been loaded, thus greatly reduce database traffic
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.UserSession.Save">
            <summary>
            Save changes for Objects in session
            </summary>
            <remarks>This can be called in the middle of the session to save the objects. It will not close the sessions</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IUserWriteSession">
            <summary>
            Represents a communication session used not only to retrieve objects from the content store, but also to create, delete, and modify objects.
            It is also the place to get all manager instances.
            </summary>
            <remarks>
            <para>
            Objects retrieved within the session are only usable until the session is disposed.
            That means their methods don't work outside the session, their properties are not guaranteed to work outside the session.
            </para>
            <para>
            UserSession objects are created from a persisting <see cref="T:Ingeniux.CMS.IContentStore">ContentStore</see> object
            via the method <see cref="M:Ingeniux.CMS.IContentStore.OpenReadSession(Ingeniux.CMS.IReadonlyUser)"/>.
            The best way to open and close a UserSession is with a "using" statement:</para>
            <example>
            <code language="C#">
            using (IUserWriteSession session = store.OpenWriteSession(currentUser))
            {
            	...
            }
            </code>
            </example>
            <para>
            Objects retrieved via UserWriteSession are automatically tracked for their changes. The changes are saved to the content store when the sesison is disposed.
            However, you can always manually perform saves via <see cref="M:Ingeniux.CMS.IUserWriteSession.Commit"/> method at any time.
            </para>
            <para>
            If the objects are intended to be changed, use the <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession</see> object.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IContentStore.OpenWriteSession(Ingeniux.CMS.IReadonlyUser)"/>
            <seealso cref="T:Ingeniux.CMS.IUserSession"/>
            <seealso cref="T:Ingeniux.CMS.ITransactionalEntity"/>
            <seealso cref="T:Ingeniux.CMS.IUser"/>
        </member>
        <member name="M:Ingeniux.CMS.IUserWriteSession.Add``1(``0)">
            <summary>
            Adds a new object to the content store. Objects are saved to the content store upon session closure.
            </summary>
            <typeparam name="T">The type of object to add</typeparam>
            <param name="obj">The object to add.</param>
            <exception cref="T:System.ArgumentNullException">When the parameter is null</exception>
            <remarks>When the parameter "obj" is null value, an error will be thrown.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserWriteSession.Delete``1(``0)">
            <summary>
            Deletes an existing object from the content store. Deletion occurs upon session closure.
            </summary>
            <typeparam name="T">The type of object to delete</typeparam>
            <param name="obj">The object to be deleted</param>
            <remarks>
            When the parameter value is null, nothing happens. Any objects with IDs that do not exist in the content store are ignored.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserWriteSession.DeleteByIds(System.String[])">
            <summary>
            Deletes existing objects by their object IDs.
            </summary>
            <param name="objIds">IDs of the objects to delete</param>
            <remarks>This method automatically ignores invalid and non-existent IDs.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IUserWriteSession.Commit">
            <summary>
            Manually saves changes to the content store.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IUserWriteSession.CancelSaving">
            <summary>
            Prevents session from saving any changes.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserWriteSession.CompleteProgressOnClose">
            <summary>
            Gets/sets whether to complete the progress upon closing this session.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserWriteSession.Progress">
            <summary>
            Gets the progress report tracker
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAction">
            <summary>
            <para>
            Represents a task to be completed when a transition is executed. 
            An action is associated with a transition through the <see cref="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)"/> method. 
            </para>
            <para>
            There are actions for common operations in the content tree, such as checking in a page and marking a page for publish. 
            If the built-in actions are not adequate, developers can create custom workflow actions. 
            Custom workflow actions assemblies must be put in App_Data/xml/custom/plugins/CustomWorkflowActions directory. The actual Action class must implement the
            <see cref="T:Ingeniux.CMS.ICustomWorkflowAction"/> interface. The custom action uses its full class name as the value of the ProgID attribute and calls the Execute method to perform the action.
            </para>
            <para>
            The actions associated with a transition are executed in the order in which they are added to the transition. 
            If an action fails to execute, the transition will not complete. The workflow remains in the WorkState it was in before the transition executed. 
            </para>
            </summary>
            <example>
            Serialization of the Action object matches the Action elements in the WorkflowDefinitions.xml file in the last-generation CMS:
            <code language="xml">
            <![CDATA[
            <Action ID="action_3" Description="Republish site" Type="Republish" PubTarget="PublishingTargets/2"/>
            ]]>
            </code>
            The difference is that the system no longer stores names of entities as identifiers. For example, the PubTarget attribute of Republish action is now storing the PubTarget ID instead of the name.
            </example>
            <seealso cref="T:Ingeniux.CMS.IWorkflowManager"/>
            <seealso cref="T:Ingeniux.CMS.IWorkflowDefinition"/>
            <seealso cref="T:Ingeniux.CMS.IWorkflow"/>
            <seealso cref="T:Ingeniux.CMS.ITransition"/>
        </member>
        <member name="M:Ingeniux.CMS.IAction.Attribute(System.String)">
            <summary>
            Retrieves an <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> by its name.
            </summary>
            <param name="attributeName">Name of attribute, unique</param>
            <returns>Attribute with matching name, or null if attribute doesn't exist</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAction.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of an <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see>. If Attribute doesn't exist, will create a new one with the given name.
            </summary>
            <param name="name">Attribute name</param>
            <param name="newVal">Attribute new value</param>
            <returns>The <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> that was created or updated</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAction.SetAttribute(Ingeniux.CMS.IWorkflowAttribute)">
            <summary>
            Sets the value of an <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see>. If the Attribute doesn't exist, it creates a new one with the given object data.
            </summary>
            <param name="attribute">Attribute to update or create</param>
            <returns>The <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> that was created or updated</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAction.RemoveAttribute(Ingeniux.CMS.IAttribute)">
            <summary>
            Removes an <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> from collection.
            </summary>
            <param name="attribute">Attribute to remove</param>
            <remarks>If the <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> doesn't exist, nothing will happen.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IAction.AttributesCount">
            <summary>
            Gets the count of the <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see> collection.
            </summary>
            <returns>Count of Attributes</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAction.Execute(Ingeniux.CMS.IWorkflow,System.String,Ingeniux.CMS.IUser,Ingeniux.CMS.ITransition)">
            <summary>
            Executes this action.
            </summary>
            <param name="workFlow">Workflow that is advancing</param>
            <param name="comment">Comments for workflow advancement</param>
            <param name="user">The user who is performing the workflow advancement</param>
            <param name="transition">The transition that is used to advance the workflow</param>
        </member>
        <member name="P:Ingeniux.CMS.IAction.Description">
            <summary>
            Gets and sets the description of the workflow action.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAction.Type">
            <summary>
            Gets and sets the workflow action <see cref="T:Ingeniux.CMS.Enums.EnumActionType">type</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAction.Attributes">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IAttribute">Attributes</see>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ITransition">
             <summary>
             <para>
             Represents a path between two <see cref="T:Ingeniux.CMS.IWorkState">Work States</see>. When a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>
             advances from one workstate to another, it goes through a transition.
             </para>
             <para>
             Transitions allow for ownership change of a page in workflow. Transitions can also can execute built-in or custom <see cref="T:Ingeniux.CMS.IAction">Actions</see>.
             </para>
             <para>
             Transitions are defined in <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see> and carried out in 
             <see cref="T:Ingeniux.CMS.IWorkflow">Workflow Instances</see>.
             </para>
             </summary>
             <example>
             <para>
             Serialization of a transition instance matches the transition entries in the workflowdefinitions.xml file in previous-generation CMS content:
             </para>
             <code language="xml">
             <![CDATA[
            <Transition CurrentStateID="WorkStates/1" Description="" ID="WorkflowTransition_WorkflowDefinitions/33_1" IsDefault="true" 
            		Name="Initial" NextGroupID="UserGroups/4" NextStateID="WorkStates/4" Trigger="OnCreate">
              <Actions NextID="4">
            		<Action ID="action_1" Type="MarkForPublish"/>
            		<Action ID="action_2" Type="CheckIn"/>
            		<Action ID="action_3" Type="Republish"/>
              </Actions>
            </Transition>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IWorkflowDefinition"/>
             <seealso cref="T:Ingeniux.CMS.IWorkflow"/>
             <seealso cref="T:Ingeniux.CMS.IWorkState"/>
        </member>
        <member name="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IAction">Action</see> to the transition, at the end of the list.
            </summary>
            <param name="action">The type of <see cref="T:Ingeniux.CMS.IAction">Action</see> to add</param>
            <param name="description">Description of the <see cref="T:Ingeniux.CMS.IAction">Action</see>; default is empty</param>
            <returns>The newly created <see cref="T:Ingeniux.CMS.IAction">action</see>.</returns>
            <remarks>
            <para>
            Differnt types of actions have different sets of required <see cref="T:Ingeniux.CMS.IAttribute">attributes</see>. Because this method doesn't add those attributes, they need to be added later.
            </para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.ITransition.Actions"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ActionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.RemoveAction(Ingeniux.CMS.IAction)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ReorderActions(System.String[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ITransition.RemoveAction(Ingeniux.CMS.IAction)">
            <summary>
            Removes an <see cref="T:Ingeniux.CMS.IAction">Action</see> from a transition.
            </summary>
            <param name="action">The <see cref="T:Ingeniux.CMS.IAction">Action</see> to remove</param>
            <returns>True if action exists in the transition, false otherwise.</returns>
            <seealso cref="P:Ingeniux.CMS.ITransition.Actions"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ActionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ReorderActions(System.String[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ITransition.ReorderActions(System.String[])">
            <summary>
            Reorders <see cref="T:Ingeniux.CMS.IAction">Actions</see> in the transition. This changes their order of execution.
            </summary>
            <param name="orderedActionIds">The order of new action IDs</param>
            <remarks>
            <para>
            Any action IDs that don't exist in the current actions list are ignored. However, if the new ordered IDs are missing any existing action IDs, an error is thrown
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When there are <see cref="T:Ingeniux.CMS.IAction">action</see> IDs in the parameter that don't exist in the current collection.</exception>
            <seealso cref="P:Ingeniux.CMS.ITransition.Actions"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ActionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.RemoveAction(Ingeniux.CMS.IAction)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITransition.ActionsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IAction">Actions</see> in this transition
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IAction">Actions</see>.</returns>
            <seealso cref="P:Ingeniux.CMS.ITransition.Actions"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.RemoveAction(Ingeniux.CMS.IAction)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ReorderActions(System.String[])"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.Description">
            <summary>
            Gets and sets the description of transition.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.IsDefault">
            <summary>
            Gets and sets whether the transition is the default for a given <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.AssignToGroupOnly">
            <summary>
            Gets and sets whether the transition only assigns the <see cref="T:Ingeniux.CMS.IPage">Page</see> to a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ITransition.NextGroup"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.DisallowDefaultUserOverride">
            <summary>
            Gets and sets whether a <see cref="T:Ingeniux.CMS.IPage">Page</see> can be assigned to a different <see cref="T:Ingeniux.CMS.IUser">User</see>, 
            but only if the <see cref="P:Ingeniux.CMS.ITransition.DefaultUser">Default User</see> is specified in this transition.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ITransition.DefaultUser"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.AllowNextGroupToAdvance">
            <summary>
            Gets and sets whether  <see cref="T:Ingeniux.CMS.IUser">Members</see> of the next <see cref="T:Ingeniux.CMS.IUserGroup">group</see> in the transition can advance the page.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.Actions">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IAction">Actions</see> in this transition.
            </summary>
            <seealso cref="M:Ingeniux.CMS.ITransition.ActionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.RemoveAction(Ingeniux.CMS.IAction)"/>
            <seealso cref="M:Ingeniux.CMS.ITransition.ReorderActions(System.String[])"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.DefaultUser">
            <summary>
            Gets and sets the default <see cref="T:Ingeniux.CMS.IUser">User</see> to whom to assign the <see cref="T:Ingeniux.CMS.IPage">Page</see> in <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> when
            the transition advances to the next workstate.
            The transition doesn't automatically assign the <see cref="T:Ingeniux.CMS.IPage">Page</see> to this <see cref="T:Ingeniux.CMS.IUser">User</see>; 
            It is only a recommendation from the transition on whom should be assigned the <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <remarks>
            <para>
            This property cannot be set before <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/> is set to an existing <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </para>
            <para>
            This user must be a member of <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/>.
            </para>
            <para>
            The Ingeniux CMS client uses the default user information to automatically select a user to assign the page in the UI.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When the <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/> property value is null, or when <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/> doesn't include the provided <see cref="T:Ingeniux.CMS.IUser">user</see>.</exception>
            <seealso cref="P:Ingeniux.CMS.ITransition.NextGroup"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.NextGroup">
            <summary>
            Gets and sets the next <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> to which page assignments are restricted when the transition advances to the next workstate.
            The <see cref="P:Ingeniux.CMS.ITransition.DefaultUser"/> must be a member of this group.
            </summary>
            <remarks>This property is required. It cannot be set as null. If it is set to null, it throws an error upon saving.</remarks>
            <exception cref="T:System.ArgumentNullException">When trying to set the value to null, or when the value is null when you attempt to save the entity.</exception>
            <seealso cref="P:Ingeniux.CMS.ITransition.DefaultUser"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.CurrentState">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> before the <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> advances through this transition.
            Transition is only available for Workflow to advance through, if Workflow is currently on this Work state.
            </summary>
            <remarks>This property is required. It cannot be set as null and will throw error when saving if it is null.</remarks>
            <exception cref="T:System.ArgumentNullException">When trying to set the value to null, or when the value is null when you attempt to save the entity.</exception>
            <seealso cref="P:Ingeniux.CMS.ITransition.NextState"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.NextState">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> that the <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> will be on after advancing through this transition.
            </summary>
            <remarks>This property is required. It cannot be set as null and will throw error when saving if it is null.</remarks>
            <exception cref="T:System.ArgumentNullException">When trying to set the value to null, or when the value is null when you attempt to save the entity.</exception>
            <seealso cref="P:Ingeniux.CMS.ITransition.CurrentState"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.Definition">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> to which this transition belongs.
            </summary>
            <remarks>Each transition always belongs to a specific <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.Trigger">
            <summary>
            Gets and sets the type of <see cref="T:Ingeniux.CMS.Enums.EnumTrigger">Trigger</see> associated with this transition. Decides where the transition is executed.
            </summary>
            <remarks>Removing an <see cref="F:Ingeniux.CMS.Enums.EnumTrigger.IGX_ONCREATE">IGX_ONCREATE</see> trigger from a 
            <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> is not allowed.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransition.UIParameters">
            <summary>
            Gets the behavior settings on for transitions on the Ingeniux CMS user interface.
            Actual changes will be performed on the property value.
            These settings decide this <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>'s icon on the toolbar, the "Advance" button drop-down menu, and the enter/exit prompt dialogs settings.
            </summary>
            <remarks>This is a UI-specific property that only affects the transition's visual presentation, not how the transition is executed on the server.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.Transition.AddAction(Ingeniux.CMS.Enums.EnumActionType,System.String)">
            <summary>
            This action will add the workflow at end of list
            </summary>
            <param name="action"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ITransitionUserInterface">
            <summary>
            Represents the settings for user-interface behavior when the transition is executed.
            This includes the toolbar icons and the enter/exit dialog settings.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ITransition.UIParameters"/>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.ToolbarIcon">
            <summary>
            Gets and sets the toolbar icon. If set, the icon appears in the "Advance in Workflow" toolbar button's drop-down menu item for this transition.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterPrompt">
            <summary>
            Gets and sets the message that displays in the dialog before transition execution starts.
            </summary>
            <remarks>If not set, the dialog doesn't appear before the transition is executed.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterHideDlgButtons">
            <summary>
            Gets and sets whether hide the dialog buttons on the enter dialog.
            </summary>
            <remarks>If <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterPrompt"/> is not set, this property has no effect.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterDisplayTime">
            <summary>
            Get and sets the display time of the of the enter dialog, if <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterHideDlgButtons"/> is set to true.
            </summary>
            <remarks>If <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnEnterHideDlgButtons"/> is set to false, this property has no effect.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnExitPrompt">
            <summary>
            Gets and sets the message that displays in the dialog before transition execution ends.
            </summary>
            <remarks>If not set, the dialog doesn't appear after the transition is executed.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnExitHideDlgButtons">
            <summary>
            Gets and sets whether to hide the dialog buttons on the exit dialog.
            </summary>
            <remarks>If <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnExitPrompt"/> is not set, this property has no effect.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ITransitionUserInterface.OnExitDisplayTime">
            <summary>
            Get and sets the display time of the of the exit dialog if <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnExitHideDlgButtons"/> is set to true.
            </summary>
            <remarks>If <see cref="P:Ingeniux.CMS.ITransitionUserInterface.OnExitHideDlgButtons"/> is set to false, this property has no effect.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflow">
            <summary>
            Represents the an instance of a <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> associated with a single <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            Once a <see cref="T:Ingeniux.CMS.IPage">Page</see> is added to a Workflow, a new instance of the Workflow object is created and attached to the Page.
            This allows precise control of the Page's lifecycle. It's also a good way to track the history of actions that occur on the Page.
            </summary>
            <example>
            <para>
            Serialization of a Workflow instance matches an entry in the Workflows.xml from previous-generation CMS content:
            </para>
            <code language="xml">
            <![CDATA[
            <WorkFlow Comment="Existing page added to workflow" CurrentStateID="WorkStates/2" 
            	TransitionID="WorkflowTransition_WorkflowDefinitions/33_1" CurrentGroupID="UserGroups/2" 
            	WorkFlowDefinitionID="WorkflowDefintions/4" PageID="x1551" Name="News Approval Workflow"/>
            ]]>
            </code>
            <para>
            Please note that the "Name" attribute value is changed from generic "Page WF (x1551)" to the name of the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.
            </para>
            </example>
            <seealso cref="T:Ingeniux.CMS.IWorkflowDefinition"/>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.AssignUser(Ingeniux.CMS.IUser,System.String)">
            <summary>
            Assigns the <see cref="T:Ingeniux.CMS.IPage">Page</see> this workflow holds to a specific <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="user">The user to whom to assign the <see cref="T:Ingeniux.CMS.IPage">Page</see>.</param>
            <param name="comment">The comments to store on this assignment action</param>
            <remarks>The assigned user must be a member of <see cref="P:Ingeniux.CMS.IWorkflow.CurrentGroup"/>.</remarks>
            <seealso cref="P:Ingeniux.CMS.IWorkflow.AssignedUser"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.LogEntries">
            <summary>
            Returns the collection of <see cref="T:Ingeniux.CMS.IWorkflowLogEntry">Log entries</see> on this workflow. These logs entries record the history of Workflow <see cref="T:Ingeniux.CMS.ITransition">Transitions</see>.
            </summary>
            <returns>Collection of workflow log entries.</returns>
            <remarks>If a workflow is removed (page is removed from workflow), the log entries will not be removed. 
            This leaves a history of a workflow that no longer exists, but it does provide the history of the page as it goes in and out of workflows.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.AllowedTransitions">
            <summary>
            Gets the allowed <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> to execute from the workflow's <see cref="P:Ingeniux.CMS.IWorkflow.CurrentWorkState">current Work State</see>.
            </summary>
            <returns>Collections of transitions.</returns>
            <remarks>If no <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> start from the current Work State, returns an empty collection.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">
            <summary>
            Advances this workflow from its <see cref="P:Ingeniux.CMS.IWorkflow.CurrentWorkState">current Work State</see> to the next <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>,
            using a specified <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.
            Meanwhile, determines which <see cref="T:Ingeniux.CMS.IUser">User</see> to whom to assign the workflow, and whether to perform <see cref="T:Ingeniux.CMS.IAction">Actions</see>.
            </summary>
            <param name="transition">The transition that is used to advance the workflow, the next Work State of this workflow will be the <see cref="P:Ingeniux.CMS.ITransition.NextState"/> on the transition.</param>
            <param name="comment">User comments on the advancement</param>
            <param name="assignUser">The user to whom to assign the page. If default, assign to the <see cref="P:Ingeniux.CMS.ITransition.DefaultUser"/> of the transition, 
            or the <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/> on the transition if DefaultUser is not specified.
            </param>
            <param name="performAction">Specifies whether to perform the actions on the transition. Defaults to true.</param>
            <param name="groupAssign">Specifies whether to assign page to next group if no user is provided. If false it will choose the default user if possible before resorting to group. Defaults to false.</param>
            <remarks>If the Workflow's <see cref="P:Ingeniux.CMS.IWorkflow.DontExecuteActions"/> property is set to true, the performAction parameter will not be effective.</remarks>
            <exception cref="T:System.InvalidOperationException">When workflow is locked</exception>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.Jump(Ingeniux.CMS.IWorkState)">
            <summary>
            Puts the workflow directly on the specified <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> without going through any <see cref="T:Ingeniux.CMS.ITransition">Transitions</see>.
            </summary>
            <param name="jumpToState">The Work State to jump to. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">When the jumpToState parameter value is null.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflow.LogEntriesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IWorkflowLogEntry">Log entries</see> on this workflow.
            </summary>
            <returns>Count of log entries.</returns>
            <remarks>The count is for log entries from this workflow only. It doesn't include log entries from the page's previous workflows.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.IsActive">
            <summary>
            Gets whether the workflow's current <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> is active.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.Page">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPage">Page</see> associated with this workflow.
            </summary>
            <remarks>Workflow is also associated with a page. This property cannot be null.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.WorkflowDefinition">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> from which the workflow was created.
            </summary>
            <remarks>A workflow is always created from a <see cref="T:Ingeniux.CMS.IWorkflowDefinition">workflow definition</see>. When there are any workflows from a workflow definition, the workflow definition cannot be removed.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.CurrentWorkState">
            <summary>
            Gets the workflow's current <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.AssignedUser">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IUser">User</see> to whom the <see cref="T:Ingeniux.CMS.IPage">Page</see> this workflow holds is assigned.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IWorkflow.AssignUser(Ingeniux.CMS.IUser,System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.Locked">
            <summary>
            Gets and sets whether this workflow is in lockdown mode. When a workflow is in lockdown mode, advancing it throws an error.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.DontExecuteActions">
            <summary>
            Gets and sets whether or not to execute <see cref="T:Ingeniux.CMS.IAction">Actions</see> during a workflow advance.
            </summary>
            <remarks>If this property is set to true, all actions are bypassed when the workflow advances</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ingeniux.CMS.IWorkflow.CurrentGroup" -->
        <member name="P:Ingeniux.CMS.IWorkflow.Comment">
            <summary>
            Gets the user comments from the last <see cref="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">Advancement</see> of this workflow.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflow.DefaultTransition">
            <summary>
            Gets the default transition of this workflow's <see cref="P:Ingeniux.CMS.IWorkflow.CurrentWorkState"/>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Workflow.Serialize">
            <summary>
            Returns an XML representation on the WorkState Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflowManager">
             <summary>
             Represents the manager object that provides the means to query and manage <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see>,
             <see cref="T:Ingeniux.CMS.IWorkState">Work States</see>, and <see cref="T:Ingeniux.CMS.IWorkflowLogEntry">Workflow Log entry</see> collections.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object and only work within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IWorkflowManager workflowManager = session.WorkflowAdministrator;
            		...
             }
             </code>
             </remarks>
             <example>
             <para>Serialization of the Workflow Manager matches the serialization of workflowdefinitions.xml in previous-generation CMS content:
             </para>
             <code language="xml">
             <![CDATA[
            <WorkFlowDefs>
            	<WorkStates>
            		<WorkState ID="WorkStates/1" Name="Initial"/>
            		<WorkState ID="WorkStates/2" Name="Incomplete"/>
            		<WorkState ID="WorkStates/3" Name="Complete"/>
            	</WorkStates>
            	<WorkFlowDefinitions>
            		<WorkFlowDefinition Description="Used to track News Articles submitted through the website's entry form." ID="WorkflowDefintions/1" Name="Anonymous News Submission">
            			<Transitions>
            				<Transition AllowNextGroupToAdvance="false" CurrentStateID="WorkStates/1" DefaultUserID="" Description="" ID="WorkflowTransition_WorkflowDefinitions/1_1" 
            						IsDefault="true" Name="Initial" NextGroupID="UserGroups/3" NextStateID="WorkStates/2" ToolbarIcon="" Trigger="OnCreate">
            					<Actions NextID="1"/>
            				</Transition>
            				<Transition CurrentStateID="WorkStates/2" Description="" ID="WorkflowTransition_WorkflowDefinitions/33_1" IsDefault="true" Name="Initial" 
            						NextGroupID="UserGroups/4" NextStateID="WorkStates/3" Trigger="OnCreate">
            					<Actions NextID="4">
            						<Action ID="action_1" Type="MarkForPublish"/>
            						<Action ID="action_2" Type="CheckIn"/>
            						<Action ID="action_3" Type="Republish"/>
            					</Actions>
            				</Transition>
            			</Transitions>
            		</WorkFlowDefinition>
            	</WorkFlowDefinitions>
            </WorkFlowDefs>
            ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IWorkflowDefinition"/>
             <seealso cref="T:Ingeniux.CMS.IWorkState"/>
             <seealso cref="T:Ingeniux.CMS.ITransition"/>
             <seealso cref="T:Ingeniux.CMS.IAction"/>
             <seealso cref="T:Ingeniux.CMS.IWorkflowLogEntry"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinition(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> by its unique ID.
            </summary>
            <param name="Id">Unique ID of the workflow definition to retrieve</param>
            <returns>Workflow definition instance with matching ID. Returns null if a matching ID doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitions(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see> in a paginated fashion.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of all workflow definitions</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitions(System.String[])">
            <summary>
            Retrieves <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see> by their IDs.
            </summary>
            <param name="workflowDefIds">IDs of workflow definitions to retrieve</param>
            <returns>Collection of workflow definitions with matching IDs.</returns>
            <remarks>
            Any non-existing entity IDs are automatically ignored. Therefore, the order 
            of returned entities doesn't necessarily match the order of their IDs.
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitionsCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see>.
            </summary>
            <returns>Count of all workflow definitions.</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitions(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.
            </summary>
            <param name="startState">Starting state of the definition. 
            This is the state to which the workflow automatically transitions from the "initial" state. 
            There is an <see cref="T:Ingeniux.CMS.ITransition"/> created from the "initial" state to this state.</param>
            <param name="userGroup">The <see cref="P:Ingeniux.CMS.ITransition.NextGroup"/> of the initial transition</param>
            <param name="name">Name of the workflow definition</param>
            <returns>Newly created workflow definition instance.</returns>
            <remarks>
            <para>Please note that the workflow definition instance returned is not yet stored in the content store.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "userGroup" is null or "name" is null, empty or whitespace.</exception>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitions(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> from collection.
            </summary>
            <param name="workflowDefinition">The workflow definition to remove. If the value is null, method does nothing.</param>
            <returns>True if the definition exists in collection, false otherwise.</returns>
            <remarks>Workflow definition cannot be removed if there are still <see cref="T:Ingeniux.CMS.IWorkflow">Workflow instances</see>
            based on this definition.</remarks>
            <exception cref="T:System.InvalidOperationException">When there are still pages in workflows based on this definition.</exception>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitions(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowDefinitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkState(System.String)">
            <summary>
            Gets a single <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> by its unique ID.
            </summary>
            <param name="Id">Unique ID of the workstate to retrieve</param>
            <returns>WorkState with matching ID. Returns null if a matching ID doesn't exist.</returns>
            <remarks>A null or empty ID causes the method to return null.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkStateByName(System.String)">
            <summary>
            Gets a single <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> by its name.
            Workstate names are unique to the collection.
            </summary>
            <param name="Name">Name of the workstate to retrieve</param>
            <returns>Workstate with matching name.</returns>
            <remarks>A null or empty name causes the method to return null.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkStates(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IWorkState">Work States</see> in collection, in a paginated fashion.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of all workstates.</returns>		
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStatesCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkState(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkState(Ingeniux.CMS.IWorkState)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkStatesCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IWorkState">Work States</see>.
            </summary>
            <returns>Count of all workstates</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStates(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkState(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkState(Ingeniux.CMS.IWorkState)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.AddWorkState(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>.
            The name of the new workstate cannot match that of any existing workstates.
            </summary>
            <param name="name">Name of the workstate to create; must be unique</param>
            <param name="description">Description of the new workstate</param>
            <returns>Newly created workstate.</returns>
            <remarks>
            <para>The workstate instance returned is not yet stored in the content store.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When name is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentException">When name matches an existing workstate's name.</exception>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStates(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStatesCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkState(Ingeniux.CMS.IWorkState)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkState(Ingeniux.CMS.IWorkState)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> from the collection.
            </summary>
            <param name="workState">The workstate to remove</param>
            <returns>True if the workstate exists in collection, false otherwise.</returns>
            <remarks>
            <para>
            If the workstate's name is "Initial" or the workstate is being used in <see cref="!:Ingeniux.CMS.ITransaction">Transitions</see> of any
            <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow defintions</see>, it cannot be deleted.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When workstate's name is "Initial", or workstate is still being used in transitions of any workflow definitions.</exception>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStates(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkStatesCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkState(System.String,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see> in a paginated fashion. It can retrieve the entire collection or filter workflows by <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.
            </summary>		
            <param name="count">Outputs total count of entries</param>
            <param name="workflowDef">If provided, returns workflows based on their defintion; otherwise, returns all workflows</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of workflows.</returns>		
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowsCount(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowsCount(Ingeniux.CMS.IWorkflowDefinition)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see>. It can retrieve all workflows or filter them by <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.
            </summary>
            <param name="workflowDef">If provided, returns the count of workflows based on their defintion; otherwise, returns count of all workflows</param>
            <returns>Count of workflows.</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowsCount(System.String)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see>. It can retrieve all workflows or filter them by <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see>.
            </summary>
            <param name="workflowDefId">If provided, returns the count of workflows based on their defintion; otherwise, returns count of all workflows</param>
            <returns>Count of workflows.</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)">
            <summary>
            Adds a <see cref="T:Ingeniux.CMS.IPage">Page</see> to a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.
            </summary>
            <param name="workflowDefinition">The workflow definition this workflow is based on</param>
            <param name="page">The page to add to the workflow</param>
            <param name="assignToUser">The user to whom to assign the page once it is added to workflow. 
            When not specified, this user is the <see cref="M:Ingeniux.CMS.IWorkflowDefinition.InitialTransition">initial transition</see>'s <see cref="P:Ingeniux.CMS.ITransition.DefaultUser">default user</see>.
            If default user is not specified, Page will be assigned to the <see cref="P:Ingeniux.CMS.ITransition.NextGroup">Next Group</see> of the transition.
            </param>
            <returns>The newly created workflow</returns>
            <remarks>The newly created workflow is not yet saved to the content store.</remarks>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowsCount(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>. This method will take the <see cref="T:Ingeniux.CMS.IPage">Page</see> that is in this workflow out of workflow state.
            </summary>
            <param name="workflow">The workflow to remove</param>
            <returns>True if the workflow exists, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowsCount(Ingeniux.CMS.IWorkflowDefinition)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.AddWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IPage,Ingeniux.CMS.IUser,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.Workflow(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> by its unique ID.
            </summary>
            <param name="Id">Unique ID of the <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.</param>
            <returns>Workflow with matching ID. Returns null if a matching ID doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.WorkflowByPage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowByPage(Ingeniux.CMS.IPage)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> by its containing <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="page"><see cref="T:Ingeniux.CMS.IPage">Page</see> for which to retrieve a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see></param>
            <returns>If the <see cref="T:Ingeniux.CMS.IPage">Page</see> is in a workflow, returns the workflow. Otherwise, returns null.</returns>
            <remarks>A <see cref="T:Ingeniux.CMS.IPage">Page</see> can only be in one <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.</remarks>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflow(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowByPage(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> by its containing <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="pageId"><see cref="T:Ingeniux.CMS.IPage">Page ID</see> for which to retrieve a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see></param>
            <returns>If the <see cref="T:Ingeniux.CMS.IPage">Page</see> is in a workflow, returns the workflow. Otherwise, returns null.</returns>
            <remarks>A <see cref="T:Ingeniux.CMS.IPage">Page id</see> can only be in one <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.</remarks>
            <seealso cref="M:Ingeniux.CMS.IWorkflowManager.Workflow(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.WorkflowsByPages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves an array of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see> by the Ids of the <see cref="T:Ingeniux.CMS.IPage">Pages</see> they are associated with.
            </summary>
            <param name="pageIds">Ids of <see cref="!:Ingeniux.CMS.IPaage">Pages</see></param>
            <returns>Arrays of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see></returns>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.GetInitialWorkflowDefinitionsForGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see> with their initial <see cref="T:Ingeniux.CMS.ITransition">Transition</see>'s
            <see cref="P:Ingeniux.CMS.ITransition.NextGroup">Next Group</see> matching the given <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
            <param name="userGroup">The <see cref="T:Ingeniux.CMS.IUserGroup">group</see> for which to find workflow defintions.</param>
            <returns>All workflow defintions whose initial transition's next group is the provided user group.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.GetAttributesForWorkflowAction(Ingeniux.CMS.Enums.EnumActionType)">
            <summary>
            Retrieves collection of required <see cref="T:Ingeniux.CMS.IWorkflowAttribute">Attributes</see> for a given <see cref="T:Ingeniux.CMS.Enums.EnumActionType">Workflow Action type</see>.
            </summary>
            <param name="workflowAction">The type of <see cref="T:Ingeniux.CMS.IAction">Workflow action</see> for which to retrieve the required attributes.</param>
            <returns>Collection of required attributes for the given action type.</returns>
            <remarks>The returns collection are blank <see cref="T:Ingeniux.CMS.IWorkflowAttribute">Workflow attributes</see> without their values assigned.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowManager.CloneWorkflowsByMasterPage(Ingeniux.CMS.IPage)">
            <summary>
            Retrieves all the <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see> that belong to the the provided <see cref="T:Ingeniux.CMS.IPage">Page</see>'s lingual clone pages.
            </summary>
            <param name="masterPage">The master page for which to find clones</param>
            <returns>Collections of <see cref="T:Ingeniux.CMS.IWorkflow">Workflows</see>. If the master page doesn't have clones, or its clones are not in workflows, returns an empty collection.</returns>
            <remarks>If not all clones pages are in workflow, the count of workflows and the count of clone pages may not match.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ingeniux.CMS.IWorkflowManager.SerializeWorkflows" -->
        <member name="M:Ingeniux.CMS.WorkflowManager.AddWorkflowLogEntry(Ingeniux.CMS.IWorkflow,Ingeniux.CMS.ITransition,Ingeniux.CMS.IUser,Ingeniux.CMS.IUser,System.String)">
            <summary>
            Add a new  to the WorkflowLogEntry administrator.
            </summary>
            <param name="workflow">The workflow to log</param>
            <param name="transition">The trasistion being executed</param>
            <param name="lastAssigned">Previous user</param>
            <param name="assignedBy">User executing the action</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowLogEntry(System.String)">
            <summary>
            Returns a WorkflowLogEntry.
            </summary>
            <param name="id">Id of the WorkflowLogEntry </param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowLogEntries(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Return a list of WorkflowLogEntry.
            </summary>
            <param name="workState">The WorkState you wish to remove.</param>
            <param name="operatingUser">CMS User performing the Remove</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.AddWorkflowDefinition(Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup,System.String)">
            <summary>
            Add a new WorkflowDefinition to the administrator.
            </summary>
            <param name="name">WorkflowDefinition Name</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.RemoveWorkflowDefinition(Ingeniux.CMS.IWorkflowDefinition)">
            <summary>
            Remove a WorkflowDefinition from the administrator.
            </summary>
            <param name="workState">The WorkflowDefinition you wish to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.RemoveWorkflow(Ingeniux.CMS.IWorkflow)">
            <summary>
            Remove a Workflow from the administrator.
            </summary>
            <param name="workState">The Workflow you wish to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.Workflow(System.String)">
            <summary>
            Retrieve Workflow by identity
            </summary>
            <param name="id">Id of the workflow </param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.Workflows(System.Int32@,Ingeniux.CMS.IWorkflowDefinition,System.Int32,System.Int32)">
            <summary>
            Return a list of Workflows.
            </summary>
            <param name="count"></param>
            /// <param name="workflowDef">Workflow Def to filter by</param>
            <param name="pageSize">Number of Workflows objects to return.</param>
            <param name="startIndex">Starting index of a Workflow object.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowByPage(Ingeniux.CMS.IPage)">
            <summary>
            Retrieve Workflow by page
            </summary>
            <param name="page">Page that workflow is for</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.RemoveWorkState(Ingeniux.CMS.IWorkState)">
            <summary>
            Remove a WorkState from the administrator.
            </summary>
            <param name="workState">The WorkState you wish to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkStates(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Return a list of WorkStates.
            </summary>
            <param name="count"></param>
            <param name="pageSize">Number of WorkState objects to return.</param>
            <param name="startIndex">Starting index of a WorkState object.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkStatesCount">
            <summary>
            Return a total count of WorkSpaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowDefinitions(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Remove a WorkState from the administrator.
            </summary>
            <param name="count"></param>
            <param name="pageSize">Number of WorkState objects to return.</param>
            <param name="startIndex">Starting index of a WorkState object.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowDefinitionsCount">
            <summary>
            Remove a WorkState from the administrator.
            </summary>
            <param name="workState">The WorkState you wish to remove.</param>
            <param name="operatingUser">CMS User performing the Remove</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkState(System.String)">
            <summary>
            Returns a WorkState.
            </summary>
            <param name="id">ID of the WorkState </param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkStateByName(System.String)">
            <summary>
            Returns a WorkState.
            </summary>
            <param name="Name">Name of the WorkState </param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.WorkflowDefinition(System.String)">
            <summary>
            Returns a WorkflowDefinition.
            </summary>
            <param name="id">ID of the WorkflowDefinition.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.GetInitialWorkflowDefinitionsForGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Returns the starting WorkflowDefinitions for a group.
            </summary>
            <param name="userGroup">UserGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.GetAttributesForWorkflowAction(Ingeniux.CMS.Enums.EnumActionType)">
            <summary>
            Returns the WorkflowAttributes needed for a WorkflowAction.
            </summary>
            <param name="workflowAction">ActionType</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowManager.AddWorkState(System.String,System.String)">
            <summary>
            Add a new WorkState to the administrator.
            </summary>
            <param name="name">WorkState Name</param>
            <param name="description">A description of the workstate.</param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflowAttribute">
            <summary>
            Represents an attrbrite of a <see cref="T:Ingeniux.CMS.IAction">Workflow Action</see>.
            Used to store the action's settings.
            </summary>
            <remarks>Depending on the <see cref="T:Ingeniux.CMS.Enums.EnumActionType">Action type</see>, there are different sets of required attributes.</remarks>
            <example>
            Serialization of a workflow attribute is a standard XML attribute of the Action element.
            For example, "PubTarget="PublishingTargets/2"
            </example>
            <seealso cref="T:Ingeniux.CMS.IAction"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowAttribute.AddWorkflowActionType(Ingeniux.CMS.Enums.EnumActionType)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.Enums.EnumActionType">Action type</see> to the attribute's allowed action types.
            </summary>
            <param name="workflowActionType">Action type to add</param>
            <remarks>Method has no effect if the specified <see cref="T:Ingeniux.CMS.Enums.EnumActionType">Action type</see> already exists in allow action types.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowAttribute.WorkflowActionTypes">
            <summary>
            Gets the list of <see cref="T:Ingeniux.CMS.Enums.EnumActionType">Action types</see> on which this attribute can be used.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowAttribute.Values">
            <summary>
            Gets the values of the attribute.
            </summary>
            <remarks>Certain attributes only need one value item.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflowDefinition">
            <summary>
            Represents a definition of workflow. Defines a <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> tree/loop to move 
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> through, the <see cref="T:Ingeniux.CMS.IUser">Users</see> to assign page to, and the <see cref="T:Ingeniux.CMS.IAction">Actions</see> to perform on these transitions.
            </summary>
            <remarks>
            <para>Note the conceptual difference between a Workflow Definition and a <see cref="T:Ingeniux.CMS.IWorkflow">workflow</see>:</para>
            <para>A Workflow Definition is the host of all the transition information.</para>
            <para>A <see cref="T:Ingeniux.CMS.IWorkflow">workflow</see> is based on a workflow defintion and is specific to one <see cref="T:Ingeniux.CMS.IPage">Page</see>, 
            but it only holds the information on the current state, the most recent transition, and user comments on the most recent transition.</para>
            </remarks>
            <example>
            <para>
            Serialization of a workflow defintion matches a definition entry in the workflowdefinitions.xml file in previous-generation CMS site content:
            </para>
            <code language="xml">
            <![CDATA[
            	<WorkFlowDefinition Description="Used to track News Articles submitted through the website's entry form." 
            			ID="WorkflowDefintions/1" Name="Anonymous News Submission">
            		<Transitions>
            			<Transition AllowNextGroupToAdvance="false" CurrentStateID="WorkStates/1" DefaultUserID="" Description="" 
            					ID="WorkflowTransition_WorkflowDefinitions/1_1" IsDefault="true" Name="Initial" NextGroupID="UserGroups/3" 
            					NextStateID="WorkStates/2" ToolbarIcon="" Trigger="OnCreate">
            				<Actions NextID="1"/>
            			</Transition>
            			<Transition CurrentStateID="WorkStates/2" Description="" ID="WorkflowTransition_WorkflowDefinitions/33_1" 
            					IsDefault="true" Name="Initial" NextGroupID="UserGroups/4" NextStateID="WorkStates/3" Trigger="OnCreate">
            				<Actions NextID="4">
            					<Action ID="action_1" Type="MarkForPublish"/>
            					<Action ID="action_2" Type="CheckIn"/>
            					<Action ID="action_3" Type="Republish"/>
            				</Actions>
            			</Transition>
            		</Transitions>
            	</WorkFlowDefinition>
            ]]>
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.IWorkflow"/>
            <seealso cref="T:Ingeniux.CMS.ITransition"/>
            <seealso cref="T:Ingeniux.CMS.IAction"/>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.AddTransition(System.String,Ingeniux.CMS.Enums.EnumTrigger,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.ITransition">Transition</see> to this Workflow Definition.
            </summary>
            <param name="name">Name of the transition</param>
            <param name="trigger">Transition trigger type (on create or on change)</param>
            <param name="currentState">Starting workstate</param>
            <param name="nextState">Ending workstate</param>
            <param name="nextGroup">The target <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> for this transition</param>
            <returns>Newly created transition instance.</returns>
            <remarks>The newly created <see cref="T:Ingeniux.CMS.ITransition">Transition</see> is not yet stored in the content store.</remarks>
            <seealso cref="P:Ingeniux.CMS.IWorkflowDefinition.Transitions"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.TransitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.RemoveTransition(Ingeniux.CMS.ITransition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.RemoveTransition(Ingeniux.CMS.ITransition)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> from the collection.
            </summary>
            <param name="transition">Transition to remove</param>
            <returns>True if transition exists in collection, false otherwise.</returns>
            <remarks>The transition to remove doesn't have to be the exact instance of the transition stored in this object; it just needs to have a matching ID.</remarks>
            <seealso cref="P:Ingeniux.CMS.IWorkflowDefinition.Transitions"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.TransitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.AddTransition(System.String,Ingeniux.CMS.Enums.EnumTrigger,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.TransitionsCount">
            <summary>
            Gets the count the <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> in the collection.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.ITransition">Transitions.</see></returns>
            <seealso cref="P:Ingeniux.CMS.IWorkflowDefinition.Transitions"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.AddTransition(System.String,Ingeniux.CMS.Enums.EnumTrigger,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.RemoveTransition(Ingeniux.CMS.ITransition)"/>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.TransitionByName(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> from the collection by its name.
            </summary>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.ITransition">Transition</see> to retrieve</param>
            <returns>Transition with matching name. Returns null if a matching name doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.Transition(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> from the collection by its unique ID.
            </summary>
            <param name="id">ID of the <see cref="T:Ingeniux.CMS.ITransition">Transition</see> to retrieve</param>
            <returns>Transition with matching ID. Returns null if a matching ID doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IWorkflowDefinition.InitialTransition">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.ITransition">Transition</see> that takes the <see cref="T:Ingeniux.CMS.IPage">Page</see>
            from the initial <see cref="T:Ingeniux.CMS.IWorkState">Work State</see> to the next state.
            </summary>
            <returns>The initial transition.</returns>
            <remarks>All Workflow Definitions have an initial <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowDefinition.Description">
            <summary>
            Gets and sets the description of this Workflow Definition.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowDefinition.Transitions">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> that belong to this Workflow Definition.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.TransitionsCount"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.AddTransition(System.String,Ingeniux.CMS.Enums.EnumTrigger,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IWorkflowDefinition.RemoveTransition(Ingeniux.CMS.ITransition)"/>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowDefinition.AddTransition(System.String,Ingeniux.CMS.Enums.EnumTrigger,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IWorkState,Ingeniux.CMS.IUserGroup)">
            <summary>
            Add a new Transition to the WorkflowDefintion.
            </summary>
            <param name="name">Transition name</param>
            <param name="trigger">The transition trigger.</param>
            <param name="currentState">The current state (starting state) to attach to the transition.</param>
            <param name="nextState">The next work state after the transition.</param>
            <param name="nextGroup">The next group assignment after the transition.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowDefinition.RemoveTransition(Ingeniux.CMS.ITransition)">
            <summary>
            Remove a Transition from the WorkflowDefintion.
            </summary>
            <param name="transition">The transistion you wish to remove.</param>
            <param name="user">The user preforming the Remove action.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkflowDefinition.TransitionsCount">
            <summary>
            Returns the total count of Transition objects attached to the WorkFlowDefintion.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IWorkflowLogEntry">
            <summary>
            Represents an entry in a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>'s history.
            Each time a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> is executed on the workflow, a log entry is created.
            </summary>
            <remarks>Log entries are for record keeping. They store a snapshot of the <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>, <see cref="T:Ingeniux.CMS.ITransition">Transition</see>
            information at the time when a transition executed.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.NextWorkStateName">
            <summary>
            Gets the next <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>'s name.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.CurrentWorkStateName"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.CurrentWorkStateName">
            <summary>
            Gets the starting <see cref="T:Ingeniux.CMS.IWorkState">Work State</see>'s name.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.NextWorkStateName"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.TimeStamp">
            <summary>
            Gets the time when the <see cref="T:Ingeniux.CMS.ITransition">Transition</see> is executed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.TransitionID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.ITransition">Transition</see> executed.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.TransitionName"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.PageID">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPage">Page</see> advanced through workflow.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedToUser">
            <summary>
            Gets the name of the <see cref="T:Ingeniux.CMS.IUser">User</see> to whom the <see cref="T:Ingeniux.CMS.IPage">Page</see> was assigned.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedByUser"/>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.LastAssignedUser"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedByUser">
            <summary>
            Gets the name of the <see cref="T:Ingeniux.CMS.IUser">User</see> who performed the <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedToUser"/>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.LastAssignedUser"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.LastAssignedUser">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPage">Page</see>'s <see cref="P:Ingeniux.CMS.IPage.AssignedUser">Assigned User</see> before the <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedToUser"/>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedByUser"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.TransitionName">
            <summary>
            Gets the name of the <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.TransitionID"/>
        </member>
        <member name="P:Ingeniux.CMS.IWorkflowLogEntry.Comment">
            <summary>
            Gets the comments the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> put in before the <see cref="T:Ingeniux.CMS.ITransition">Transition</see>.
            </summary>
            <seealso cref="P:Ingeniux.CMS.IWorkflowLogEntry.AssignedByUser"/>
        </member>
        <member name="T:Ingeniux.CMS.IWorkState">
            <summary>
            Represents a stage of a <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>. 
            <see cref="T:Ingeniux.CMS.ITransition">Transitions</see> push a <see cref="T:Ingeniux.CMS.IPage">Page</see> from one workstate to another.
            </summary>
            <example>
            Serialization of a workstate matches a workstate entry in the workflowdefinitions.xml file in previous-generation CMS site content:
            <code language="xml">
            <WorkState ID="WorkStates/1" Name="Initial"/>
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IWorkState.Icon">
            <summary>
            Gets and sets the icon of a workstate. For visual editing only.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkState.IsActive">
            <summary>
            Gets and sets whether this workstate is active.
            The CMS uses this property to filter inactive <see cref="T:Ingeniux.CMS.IPage">Pages</see> from a 
            <see cref="T:Ingeniux.CMS.IUser">user</see>'s assignments pane. If a the workstate page currently on is not active, a user won't see it in the assignments pane.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IWorkState.Description">
            <summary>
            Gets and sets the description of the workstate.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.WorkState.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkState.ValidateData">
            <summary>
            
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when name is Null or an empty string.</exception>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.WorkState.Serialize">
            <summary>
            Returns an XML representation on the WorkState Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.WorkState.Icon">
            <summary>
            This does nothing currently.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.WorkState.Name">
            <summary>
            Retrun the Name of the WorkState.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.WorkState.IsActive">
            <summary>
            Retrun the active state of the WorkState.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.WorkState.Description">
            <summary>
            The description of the WorkState.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.INotification">
            <summary>
            Represents a notification message
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.INotification.Recipients">
            <summary>
            Retrieves the list of recipients for this message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.INotification.ReadByUser(System.String)">
            <summary>
            Checks whether a user read the message or not
            </summary>
            <param name="userId">Id of the user to check</param>
            <returns>True if user read the notification already, false if not</returns>
        </member>
        <member name="M:Ingeniux.CMS.INotification.SetUserRead(System.String)">
            <summary>
            Set the status of this notification after read by given user
            </summary>
            <param name="userId">Id of the user that read the notification</param>
        </member>
        <member name="P:Ingeniux.CMS.INotification.Type">
            <summary>
            Gets the type of notification
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.INotification.Message">
            <summary>
            Gets/sets the notification message
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.INotification.Sender">
            <summary>
            Gets the name of the sender
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.INotification.IssueTime">
            <summary>
            Gets the issue time of the notification
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.INotification.RecipientUserIds">
            <summary>
            Gets the user ids fo the recipient users
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.INotificationManager">
            <summary>
            Represents the manager object to manage the collection of notifications
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Add(System.String,System.String[],System.Boolean)">
            <summary>
            Adds a new <see cref="!:Ingeniux.Runtime.INotification">Notification</see>, to collection of <see cref="!:Ingeniux.Runtime.IUser">Users</see>, by by specifying either
            <see cref="!:Ingeniux.Runtime.IUser">User</see> ids or <see cref="!:Ingeniux.Runtime.IUserGroup">Group</see> ids/
            </summary>
            <param name="message">Message of the notification</param>
            <param name="recipientIds">Ids of recipients, could be either <see cref="!:Ingeniux.Runtime.IUser">User</see> ids or <see cref="!:Ingeniux.Runtime.IUserGroup">Group</see> ids</param>
            <param name="recipientsAreGrps">Whether the list of recipient ids are user ids or group ids</param>
            <returns>Newly added notification</returns>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Add(System.String,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUser})">
            <summary>
            Adds a new <see cref="!:Ingeniux.Runtime.INotification">Notification</see>, to collection of <see cref="!:Ingeniux.Runtime.IUser">Users</see>.
            </summary>
            <param name="message">Message of the notification</param>
            <param name="recipients">Users to receive the notification</param>
            <returns>Newly added notification</returns>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Add(System.String,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUserGroup})">
            <summary>
            Adds a new <see cref="!:Ingeniux.Runtime.INotification">Notification</see>, to collection of <see cref="!:Ingeniux.Runtime.IUser">Users</see> that are members of specified <see cref="!:Ingeniux.Runtime.IUserGroup">Groups</see>.
            </summary>
            <param name="message">Message of the notification</param>
            <param name="recipientGrps">Groups that <see cref="!:Ingeniux.Runtime.IUser">Users</see> to receive the notification belong to</param>
            <returns>Newly added notification</returns>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.NotificationsForUser(Ingeniux.CMS.IUser,System.Boolean)">
            <summary>
            Retrieves collection of notifications for given user, either by specifies count, or all.
            </summary>
            <param name="user">The recipient of the notifications to retrieve</param>
            <param name="allEntries">Retrieve all entries, or just recent entries</param>
            <returns>Collection of <see cref="!:Ingeniux.Runtime.INotification">Notifications</see> that have given <see cref="!:Ingeniux.Runtime.IUser">User</see> as one of the recipients</returns>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Notifications(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves collection of notifications
            </summary>
            <param name="c">Output count of notifications</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Remove(System.String[])">
            <summary>
            Removes collection of notification by specified unique ids.
            </summary>
            <param name="notificationIds">Unique ids for notifications to be removed. Non-existing ids are ignored</param>
        </member>
        <member name="M:Ingeniux.CMS.INotificationManager.Notification(System.String)">
            <summary>
            Retrieves one notification by its unique id
            </summary>
            <param name="id">Unique id of the notification to retrieve</param>
            <returns>Notification with matching id, null if doesn't exist</returns>
        </member>
        <member name="P:Ingeniux.CMS.INotificationManager.RecentNotificationsCount">
            <summary>
            Gets/sets the number of recent notifications to return. Default is 5.
            </summary>
            <remarks>The value of this property is based on the settings value of "Notifications/RecentCount".</remarks>
        </member>
        <member name="T:Ingeniux.CMS.Messaging.IProgressReport">
            <summary>
            Represents the event based progress tracking system.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IProgressReport.Complete(System.String)">
            <summary>
            Completes the progress, set the progression as 100%
            </summary>
            <param name="information">Optional message</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IProgressReport.Progress(System.Int32,System.String)">
            <summary>
            Make one step in the progress, with operational message
            </summary>
            <param name="information">Optional message</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IProgressReport.SetDataStep(System.Int32)">
            <summary>
            Sets how many data steps to complete the progress
            </summary>
            <param name="dataStepsCount">count of data steps</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IProgressReport.DataProgress">
            <summary>
            Make on step on progress to save data to content store. The progress is counted differently
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IProgressReport.Start(System.Int32,System.Boolean,System.String)">
            <summary>
            Starts the progress, cannot be restarted
            </summary>
            <param name="count">Total count of the progression</param>
            <param name="information">Optional message</param>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IProgressReport.CurrentProgress">
            <summary>
            Gets the current progress steps count
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IProgressReport.CurrentProgressPercentage">
            <summary>
            Gets the current progress as percent times 100
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IProgressReport.Started">
            <summary>
            Gets whether the progress has started
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.Messaging.IProgressReport.ProgressStarted">
            <summary>
            Event fired when progress started
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.Messaging.IProgressReport.Progressed">
            <summary>
            Event fired when making one step forward in progress
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.Messaging.IProgressReport.Completed">
            <summary>
            Event fired when progress completed
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Messaging.IPushMessenger">
            <summary>
            Represents the object that is in charge of sending SignalR server message to clients
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToAll(System.String)">
            <summary>
            Sends a message to all connected user.
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToAll``1(``0)">
            <summary>
            Sends an object to all connected users. The object is automatically parsed on client side.
            </summary>
            <typeparam name="T">Type of message object</typeparam>
            <param name="obj">Message object to send</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToGroups(System.String,Ingeniux.CMS.IUserGroup[])">
            <summary>
            Sends a message to users in specified groups
            </summary>
            <param name="message">Message to send</param>
            <param name="groups">The groups to send to</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToGroups``1(``0,Ingeniux.CMS.IUserGroup[])">
            <summary>
            Sends a object to users in specified groups
            </summary>
            <typeparam name="T">Type of message object</typeparam>
            <param name="obj">Message object to send</param>
            <param name="groups">The groups to send to</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToMe(System.String)">
            <summary>
            Sends a message to the sender only
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToMe``1(``0)">
            <summary>
            Sends an object to the sender only
            </summary>
            <typeparam name="T">Type of message object</typeparam>
            <param name="obj">Message object to send</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToUser(System.String,System.String)">
            <summary>
            Sends a message to the specified user, via the user's <see cref="!:Ingeniux.Runtime.IUser.UserId">UserId</see>.
            </summary>
            <param name="message">Message to send</param>
            <param name="userId">The user id of the receiving user</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToUser``1(``0,System.String)">
            <summary>
            Sends an object to the specified user, via the user's <see cref="!:Ingeniux.Runtime.IUser.UserId">UserId</see>.
            </summary>
            <typeparam name="T">Type of message object</typeparam>
            <param name="obj">Message object to send</param>
            <param name="userId">The user id of the receiving user</param>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToUsers(System.String,System.String[])">
            <summary>
            Sends a message to the specified users, via the users' <see cref="!:Ingeniux.Runtime.IUser.UserId">UserId</see>.
            </summary>
            <param name="message">Message to send</param>
            <param name="userIds">The user ids of the receiving users</param>
            <remarks>When "userIds" parameter is not passed in, will send to all users.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.Messaging.IPushMessenger.SendToUsers``1(``0,System.String[])">
            <summary>
            Sends an object to the specified users, via the users' <see cref="!:Ingeniux.Runtime.IUser.UserId">UserId</see>.		
            </summary>
            <typeparam name="T">Type of message object</typeparam>
            <param name="obj">Message object to send</param>
            <param name="userIds">The user ids of the receiving users</param>
            <remarks>When "userIds" parameter is not passed in, will send to all users.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IPushMessenger.SiteName">
            <summary>
            Gets the Name of the Site
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IPushMessenger.UserId">
            <summary>
            Gets the <see cref="!:Ingeniux.Runtime.IUser.UserId">UserId</see> of the user that is the sending the message
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Messaging.IPushMessenger.UserName">
            <summary>
            Gets the name of the user that is sending the message
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IActionTypeAttribute">
            <summary>
            Represents a list of attribute names required for a particular type of workflow action.
            </summary>
            <example>
            <para>
            The action type <see cref="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_SET_LIFETIME_ATTRIBUTES">IGX_ACTION_SET_LIFETIME_ATTRIBUTES</see> requires StartDate and EndDate attributes.
            </para>
            </example>
            <remarks>A list of ActionTypeAttributes is automatically created for a CMS content store.</remarks>
            <see cref="T:Ingeniux.CMS.Enums.EnumActionType"/>
        </member>
        <member name="P:Ingeniux.CMS.IActionTypeAttribute.ActionType">
            <summary>
            Gets the type of action.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IActionTypeAttribute.AttributeNames">
            <summary>
            Gets the list of attribute names required for this action type.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IGlobalVariable">
            <summary>
            <para>
            Represents the Global Variable entry. As the name indicates, global variables are placeholders that hold specific values 
            They can be used in any part of an <see cref="T:Ingeniux.CMS.IElement">element</see> value or attribute.
            The purpose of this object is to allow static information that is repeated across multiple <see cref="T:Ingeniux.CMS.IPage">pages</see> or fields
            to be editable in only one place.
            </para>
            <para>
            Global variables always have a global value, which applies to all <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing targets</see>. 
            They may also contain override values for specific publishing targets. During publish, these override values are used for the publishing targets to which the global variables belong.
            </para>
            <para>
            Global variables are defined in the CMS and undergo value replacement in the DSS.
            </para>
            </summary>
            <example>
            <para>
            Global variables are retrieved via the <see cref="T:Ingeniux.CMS.IGlobalVariablesCollection">Global Variables Collection</see> manager object.
            <code language="C#">
            <![CDATA[
            IGlobalVariable copyRightVar = session.GlobalVariables.Variable("CopyRight");
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:Ingeniux.CMS.IGlobalVariablesCollection"/>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariable.Value(System.String)">
            <summary>
            Gets the value for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing target</see>. If no override value exists for this publishing target, returns the <see cref="P:Ingeniux.CMS.IGlobalVariable.GlobalValue">global value</see>.
            </summary>
            <param name="pubTargetId">ID of the publishing target</param>
            <returns>Publishing target override value or global value.</returns>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.SetTargetsSpecificValue(System.String,Ingeniux.CMS.IPublishingTarget[])"/>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.RemoveTargetSpecificValue(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariable.SetTargetsSpecificValue(System.String,Ingeniux.CMS.IPublishingTarget[])">
            <summary>
            Sets the override value for specific <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing targets</see>.
            </summary>
            <param name="value">Variable value to set for the publishing targets</param>
            <param name="pubTargets">Publishing targets that will use this override value.</param>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.Value(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.RemoveTargetSpecificValue(Ingeniux.CMS.IPublishingTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariable.RemoveTargetSpecificValue(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Removes a override value for a given <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing target</see>.
            </summary>
            <param name="pubTarget">The publishing target from which to remove the override value. Does nothing if null.</param>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.Value(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IGlobalVariable.SetTargetsSpecificValue(System.String,Ingeniux.CMS.IPublishingTarget[])"/>
        </member>
        <member name="P:Ingeniux.CMS.IGlobalVariable.Name">
            <summary>
            Gets and sets the name of the variable.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IGlobalVariable.XPathQuery">
            <summary>
            Gets and sets whether the value of the global variable is based the result of XPath query
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IGlobalVariable.GlobalValue">
            <summary>
            Gets and sets the variable's global value. This value is used if a specific publishing target has no override value.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IGlobalVariable.VariableType">
            <summary>
            Gets and sets the variable's type. This is a sort of categorization for the variable; this value doesn't affect runtime. Default is "text".
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.GlobalVariable.SetTargetsSpecificValue(System.String,Ingeniux.CMS.IPublishingTarget[])">
            <summary>
            Set Publishing Target specific override values for Global Variable. This method will
            override existing publishing target entry values
            </summary>
            <param name="value">Value for specific pub targets</param>
            <param name="pubTargets">Pub targets that this value will apply to</param>
        </member>
        <member name="T:Ingeniux.CMS.IGlobalVariablesCollection">
            <summary>
            Represents the Manager object that manages <see cref="T:Ingeniux.CMS.IGlobalVariable">global variables</see>.
            </summary>
            <remarks>
            <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object. IGlobalVariablesCollection only works within that session object.</para>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	IGlobalVariablesCollection globalVariables = session.GlobalVariables;
            	...
            }
            </code>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.IGlobalVariable"/>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariablesCollection.Variable(System.String)">
            <summary>
            Retrieves a global variable by its name. The variable names are unique.
            </summary>
            <param name="name">Variable name to retrieve</param>
            <returns>Global variable with matching name. Null if name doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariablesCollection.AddVariable(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IGlobalVariable">global variable</see> and sets its global value.
            </summary>
            <param name="name">Name of global variable</param>
            <param name="value">Global value to set</param>
            <returns>Newsly created global variable</returns>
            <exception cref="T:System.ArgumentException">When another variable exists with the same name.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariablesCollection.AddVariable(Ingeniux.CMS.IGlobalVariable)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IGlobalVariable">global variable</see> to the collection. This overload allows the global variable to be created and sets up all publishing target overrides first.
            </summary>
            <param name="variable">Global variable to add</param>
            <exception cref="T:System.ArgumentException">When another variable exists with the same name.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariablesCollection.RemoveVariable(System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IGlobalVariable">global variable</see>.
            </summary>
            <param name="name">Name of the global variable to remove</param>
            <returns>True if variable with given name exists, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IGlobalVariablesCollection.PublishGlobalVariables(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Publish global variables for given <see cref="T:Ingeniux.CMS.IPublishingTarget">publishing target</see>. This also applies to the publishing target override value for that publishing target.
            </summary>
            <param name="pubTarget">Publishing target whose variables are to be published.</param>
        </member>
        <member name="P:Ingeniux.CMS.IGlobalVariablesCollection.Count">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IGlobalVariable">global variables</see> in the collection.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishingTargetVariable">
            <summary>
            Represents a override value for a <see cref="T:Ingeniux.CMS.IGlobalVariable">Global Variable</see> for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            This value applies during both preview and publish for this Publishing Target.
            </summary>
            <remarks>
            <para>For a <see cref="T:Ingeniux.CMS.IGlobalVariable">Global Variable</see>, it has a default value that will be used on all <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Targets</see>,
            when no <see cref="T:Ingeniux.CMS.IPublishingTargetVariable">override value</see> for the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> exists.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IPublishingTargetVariable.PublishingTarget(Ingeniux.CMS.IPublishingManager)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> this override value is for.
            </summary>
            <param name="pubManager">Publishing Manager instance</param>
            <returns>The Publishing Target this override value is for, or null if the target doesn't exist.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPublishingTargetVariable.Value">
            <summary>
            Gets/sets the value of the <see cref="T:Ingeniux.CMS.IGlobalVariable">Global Variable</see> specific to a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.CrossLocaleUtilities.IsCrossLocale(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">
            <summary>
            Check to see if the copy from src page to tgt page is defined as cross locale copy
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.CrossLocaleUtilities._GetBranchPages(Ingeniux.CMS.IPage)">
            <summary>
            Get all pages under the root page, including the root page
            </summary>
            <param name="rootPage"></param>
        </member>
        <member name="M:Ingeniux.CMS.CrossLocaleUtilities._GetReferences(System.String,System.Collections.Generic.Dictionary{System.String,Ingeniux.CMS.CrossLocaleReferenceQueryEntry[]})">
            <summary>
            This method is called at the end when all query entries are collected across all pages
            </summary>
            <param name="srcLocale"></param>
            <param name="refsQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.CrossLocaleUtilities._GetDependentPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage},System.String,System.String)">
            <summary>
            Get all dependent pages of given source page set
            </summary>
            <param name="srcPages"></param>
            <param name="targetLocale"></param>
        </member>
        <member name="T:Ingeniux.CMS.CustomLocale">
            <summary>
            Custom-create locale entry. Based on an exisitng ISO locale.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ILocale">
            <summary>
            Represents a standard ISO locale definition. The concept of locale is a combination of language and region.
            A more common term to describe a locale is "culture."
            </summary>
            <seealso cref="T:Ingeniux.CMS.ICustomLocale"/>
            <seealso cref="T:Ingeniux.CMS.ILocalesManager"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocale.FormatNumber(System.Double,System.Boolean)">
            <summary>
                Converts the value of the number provided to its equivalent
                string representation using the culture-specific format
                information.
            </summary>
            <param name="number">The number to be formatted</param>
            <param name="asCurrency">Specified if to return currentcy format of the number. Note that the currency symbol is specific to the region specified in this locale.</param>
            <returns>Formatted string of given number</returns>
            <example>
            If the locale is "en-us", the number 1234.56 is formatted as "1,234.56", but under "it-it", it's formatted as "1.234,56", the European format.
            </example>
        </member>
        <member name="M:Ingeniux.CMS.ILocale.FormatTimeLong(System.Int32,System.Boolean)">
            <summary>
                Converts a time value to its equivalent
                string representation using culture-specific long-format
                information.
            </summary>
            <param name="timeInMilliSeconds">Value of DateTime in milliseconds</param>
            <param name="dateOnly">Specifies whether to only include date information.</param>
            <returns>Formatted long string of given time.</returns>
            <example>
            <para>Milliseconds: 63512604517280</para>
            <para>en-us: Tuesday, August 20, 2013 2:08:37 PM</para>
            <para>en-us date only: Tuesday, August 20, 2013</para>
            <para>fr-ca: 20 août 2013 14:08:37</para>
            <para>fr-ca date only: 20 août 2013</para>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.ILocale.FormatTimeShort(System.Int32,System.Boolean)">
            <summary>
                Converts a time value to its equivalent
                string representation using culture-specific short format
                information.
            </summary>
            <param name="timeInMilliSeconds">Value of DateTime in milliseconds</param>
            <param name="dateOnly">Specifies whether to include only date information.</param>
            <returns>Formatted short string of given time</returns>
            <example>
            <para>Milliseconds: 63512604603336</para>
            <para>en-us: 8/20/2013 2:10 PM</para>
            <para>en-us date only: 8/20/2013</para>
            <para>fr-ca: 2013-08-20 14:10</para>
            <para>fr-ca date only: 2013-08-20</para>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.LCID">
            <summary>
            Gets the identifier of the locale's underlying culture.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.RegionCode">
            <summary>
            Gets the locale's region code. It is the same as the <see cref="P:Ingeniux.CMS.ILocale.Name"/> property.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILocale.Name"/>
            <example>
            For the locale of "English, United States", the RegionCode is "en-us".
            </example>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.Name">
            <summary>
            Gets the name of the locale. The name is the same as the <see cref="P:Ingeniux.CMS.ILocale.RegionCode"/> of the locale.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILocale.RegionCode"/>
            <example>
            For the locale of "English, United States", the Name value is "en-us".
            </example>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.NativeName">
            <summary>
            Gets the culture name. This consists of the full name of the language, the full name
            of the country/region, and the optional script. 
            This name is written in the locale's native language.
            </summary>
            <remarks>For all locales a language value of "English", the native name and the <see cref="P:Ingeniux.CMS.ILocale.EnglishName"/> are the same.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.EnglishName">
            <summary>
            <![CDATA[
               Gets the culture name in the format "<languagefull> (<country/regionfull>)" in
                English, where <languagefull> is the full name of the language and <country/regionfull>
                is the full name of the country/region.
            ]]>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.ISOLanguageName">
            <summary>
            Gets the ISO 639-2 three-letter code for the locale's language.
            </summary>
            <example>
            For the locale "en-us", the ISOLanguageName is "eng".
            </example>
            <remarks>ISOLanguageName only describes the language property of a locale; it doesn't include any regional information.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ILocale.WindowsLanguageName">
            <summary>
            Gets the three-letter code for the language as defined in the Windows API.
            </summary>
            <example>
            For the locale "en-us", the ISOLanguageName is "ENU".
            </example>
            <remarks>
            <para>
            In most cases, this name only represents a locale's language property. 
            Sometimes, however, the concept of language is very specific to a region, and it's difficult to separate the two.
            That's why the WindowsLanguageName of "en-us" is "ENU", which still contains the United States' regional information.
            </para>
            <para>
            WindowsLanguageName may differ depending on the generation of Windows operating system being used.
            </para>
            </remarks>
        </member>
        <member name="T:Ingeniux.CMS.ICustomLocale">
            <summary>
            Represents a custom locale. It is used to extend the list of ISO locales and to allow more choices of languages in the WorldView system.
            </summary>
            <remarks>
            A custom locale must be based on an existing ISO locale; it cannot be based on another custom locale.
            </remarks>
            <seealso cref="T:Ingeniux.CMS.ILocale"/>
            <seealso cref="T:Ingeniux.CMS.ILocalesManager"/>
        </member>
        <member name="P:Ingeniux.CMS.ICustomLocale.BaseName">
            <summary>
            Gets the base locale name. Base locale is always a standard ISO locale.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ILocalesManager">
            <summary>
            Represents the entity that holds the collection of custom locales. Also provides the
            the functionality to list or retrieve standard ISO locales.
            </summary>
            <remarks>Even though it is called a manager, it is an actual entity that stores in the content store and also works like a utility class.</remarks>
            <seealso cref="T:Ingeniux.CMS.ILocale"/>
            <seealso cref="T:Ingeniux.CMS.ICustomLocale"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.LocalesCount">
            <summary>
            Gets the count of all locales, including both standard ISO locales and custom locales.
            </summary>
            <returns>Count of all locales</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.CustomLocalesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.CustomLocalesCount">
            <summary>
            Gets the count of custom locales.
            </summary>
            <returns>Count of custom locales.</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.LocalesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.AllLocales">
            <summary>
            Gets all locales, including both standard ISO locales and custom locales.
            </summary>
            <returns>Collection of all locales.</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.NativeLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.CustomLocales"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.NativeLocales">
            <summary>
            Gets all standard ISO locales.
            </summary>
            <returns>Collection of standard ISO locales.</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.AllLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.CustomLocales"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.CustomLocales">
            <summary>
            Gets all custom locales.
            </summary>
            <returns>Collection of custom locales.</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.AllLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.NativeLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.AddCustomLocale(Ingeniux.CMS.ILocale,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.RemoveCustomLocale(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.AddCustomLocale(Ingeniux.CMS.ILocale,System.String,System.String)">
            <summary>
            Adds a new custom locale or updates an existing custom locale with new values.
            </summary>
            <param name="baseLocale">Base standard ISO locale</param>
            <param name="regionCode">Region code/name of the custom locale</param>
            <param name="description">Description of the custom locale</param>
            <returns>The created or updated custom locale.</returns>
            <remarks>
            <para>
            If the region code already exists in the custom locale's collection, 
            that custom locale will be updated with new information.
            </para>
            <para>
            the custom locale has to be based on a standard ISO locale. It can never be based on another custom locale.
            </para>
            <para>
            If the region code provided exists as standard ISO locale region code, the system throws an error.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When base locale is a custom locale, 
            or when region code is an existing standard ISO locale region code.</exception>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.CustomLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.RemoveCustomLocale(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.RemoveCustomLocale(System.String)">
            <summary>
            Removes a custom locale.
            </summary>
            <param name="regionCode">Region code of the custom locale to remove</param>
            <returns>True if region code exists in custom locale's collection, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.CustomLocales"/>
            <seealso cref="M:Ingeniux.CMS.ILocalesManager.AddCustomLocale(Ingeniux.CMS.ILocale,System.String,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.CustomLocale(System.String)">
            <summary>
            Retrieves a custom locale by its region code.
            </summary>
            <param name="regionCode">Region code of custom locale to retrieve.</param>
            <returns>Custom locale with matching region code. Returns null if the region code doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.NativeLocale(System.String)">
            <summary>
            Retrieves a standard ISO locale.
            </summary>
            <param name="regionCode">Region code of the standard ISO locale to retrieve.</param>
            <returns>Standard ISO locale with matching region code. Returns null if the region code doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.Locale(System.String)">
            <summary>
            Retrieves a locale, which can be either a standard ISO locale or a custom locale.
            </summary>
            <param name="regionCode">Region code of locale to retrieve</param>
            <returns>Standard ISO or custom locale with matching region code. Returns null if region code doesn't exist in either collection.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ILocalesManager.LocaleInUse(Ingeniux.CMS.ILocale)">
            <summary>
            Checks if the given locale is used by any Pages
            </summary>
            <param name="locale">Locale to check if used by Pages</param>
            <returns>Bool if used by any Pages, false otherwise</returns>
        </member>
        <member name="F:Ingeniux.CMS.LocalesManager._NativeLocales">
            <summary>
            Native locales will only be loaded once for all instances
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.LocalesManager._CustomLocales">
            <summary>
            The custom locales are stored into entity
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Presentation.IContentUnitInstance">
            <summary>
            Content Unit instance is to refer to a specific element on the page, and uses the template name from
            original content unit.
            The Element to be places on edit form will use the same unique id as the original element in content unit
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Presentation.ContentUnitsInstantiability">
            <summary>
            This object is not an entity and should not be stored in db directly. It should always attach to a object.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Presentation.IContentUnitsInstantiability">
            <summary>
            Represents a collection of security entries on wether certain <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Units</see> can be associated with certain objects
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.AllowedContentUnits(Ingeniux.CMS.IUserSession)">
            <summary>
            Retrieves all allowed <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Units</see> that can be instantiated in current context
            </summary>
            <param name="session">The Session to retrieve content units</param>
            <returns><see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Units</see> that can be instantiated in current context</returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.ContentUnitAllowed(Ingeniux.CMS.Presentation.IContentUnit)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> can be instantiated in current context
            </summary>
            <param name="unit">The content unit to check</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> can be instantiated, false otherwise</returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.AllowContentUnit(Ingeniux.CMS.Presentation.IContentUnit)">
            <summary>
            Allows a <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> to be placed on <see cref="T:Ingeniux.CMS.IPage">Pages</see> 
            created with this Schema, and specifies how many times it can be placed, if the Content Unit is <see cref="P:Ingeniux.CMS.Presentation.IContentUnit.Reusable">Reusable</see>.
            </summary>
            <param name="unit">The content unit to be allowed</param>
            <param name="repeatLimit">How many instance of the unit can be placed. 0 means no limit. Doesn't apply to single-use content units</param>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.DenyContentUnit(Ingeniux.CMS.Presentation.IContentUnit)">
            <summary>
            Disallow a <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> to be placed on <see cref="T:Ingeniux.CMS.IPage">Pages</see> 
            created with this Schema
            </summary>
            <param name="unit">Unit that cannot be used</param>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.ContentUnitRepetitionSetting(Ingeniux.CMS.IUserSession)">
            <summary>
            Retrieves the collection of repeatable Content Units and how many times they can be instantiated in current context. 
            There is no directly relation to <see cref="!:Ingeniux.CMS.IContentUnitsInstantiability.AllowedContentUnits">AllowedContentUnits</see> property.
            When <see cref="!:Ingeniux.CMS.IContentUnitsInstantiability.AllowedContentUnits">AllowedContentUnits</see> has no entries, which means all Content Units are allowed, we can still specify
            how many times they can repeat. 
            </summary>
            <param name="session">The Session to retrieve content units</param>
            <returns>Reusable <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Units</see> and its instantiatiosn limit</returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.ContentUnitAllowedRepetition(Ingeniux.CMS.Presentation.IContentUnit)">
            <summary>
            Checks how many times a Reusable <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> is allowed to be instantiated in current context
            </summary>
            <param name="unit">Content Unit to check</param>
            <returns>The max number of repetitions of the <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see>. 0 means no limit.</returns>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.SetContentUnitAllowedRepetition(Ingeniux.CMS.Presentation.IContentUnit,System.Int32)">
            <summary>
            Sets the allowed repetition times of the <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> in current context
            </summary>
            <param name="unit">Content Unit to set repetitions on, must be <see cref="P:Ingeniux.CMS.Presentation.IContentUnit.Reusable">Reusabled</see></param>
            <param name="maxRepeat">Max number this <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Unit</see> can be instantiated in current context</param>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.Clear">
            <summary>
            Clear all entries
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.IContentUnitsInstantiability.Inherited">
            <summary>
            Checks whether the instantiability settings are inherited from its parent
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.ContentUnitsInstantiability.ContentUnitRepetitions">
            <summary>
            We have the API in place, but will not use it on API temporarily
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Presentation.IPagePresentationCollection">
            <summary>
            Represents the collection of presentations for an given page.
            This object is part of IPageVersion, not indenpendent entity
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.IPagePresentationCollection.Publish(Ingeniux.CMS.IPublishingTarget,Ingeniux.CMS.IPageVersion,Ingeniux.CMS.Presentation.IPresentationFormatter)">
            <summary>
            Publish the presentations into files
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.PagePresentationCollection.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Ingeniux.CMS.Presentation.PagePresentationCollection"/> class.</summary>
            <param name="pageId">The page unique identifier.</param>
            <exception cref="T:System.ArgumentNullException">pageId</exception>
        </member>
        <member name="M:Ingeniux.CMS.Presentation.PagePresentationCollection._ClearPubTargetsMapping">
            <summary>
            Caution, calling this method will leave all presentation in the collection not usable
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.PagePresentationCollection._DefaultPresentationsIndex">
            <summary>
            Index of pub target id - presentation id(s)
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Presentation.PagePresentationCollection._Presentations">
            <summary>
            Index of presentation id - presentation
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationTaskDetails">
            <summary>
            Represents the details of a completed replication.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTaskDetails.ItemReplicated(Ingeniux.CMS.IReplicationItem)">
            <summary>
            Informs this object that an <see cref="T:Ingeniux.CMS.IReplicationItem">Item</see> has been replicated
            </summary>
            <param name="replicatedItem">The item that was replicated</param>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTaskDetails.ItemsCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IReplicationItem">Items</see> to be replicated.
            </summary>
            <returns>Count of all <see cref="T:Ingeniux.CMS.IReplicationItem">Items</see>.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskDetails.IsCleanReplication">
            <summary>
            Gets whether the replication was a clean replication. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskDetails.CompletedItems">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IReplicationItem">Items</see> that were successfully replicated.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskDetails.SkippedItems">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IReplicationItem">Items</see> that were skipped.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskDetails.RepTaskMonitor">
            <summary>
            Gets the monior object that tracks ongoing replication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskDetails.StoppingError">
            <summary>
            Gets the stopping error of the replication. If replication completed, returns null.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskDetails.ItemReplicated(Ingeniux.CMS.IReplicationItem)">
            <summary>
            Event handler. Update internal list based on passed in replicated item information
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskDetails.GenerateCompletionLog(System.DateTime,System.Exception)">
            <summary>
            Create a new completion log for the replication session containing meta data and replicated/skipped items
            </summary>
            <param name="completionTime"></param>
            <param name="stoppingError"></param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTaskDetails.Target">
            <summary>
            Get the Replication Target this session is generated from
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SchemaUnit.#ctor(Ingeniux.CMS.ISchemaUnit)">
            <summary>
            This is the cloning constructor
            </summary>
            <param name="unitToClone"></param>
        </member>
        <member name="M:Ingeniux.CMS.SchemaUnit.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for creating a blank schema unit from its definitions
            </summary>
            <param name="name"></param>
            <param name="label"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Ingeniux.CMS.SchemaUnit.#ctor(Ingeniux.CMS.IAttribute)">
            <summary>
            Constructor to create a schema unit from schema field
            </summary>
            <param name="schemaFieldDeclaration"></param>
            <param name="schemaFieldImplementation"></param>
        </member>
        <member name="T:Ingeniux.CMS.ComponentSchemaField">
            <summary>
            This is a very special class to be used for schema sync to page only, to reserve component
            embedded content. It should not be used in a real schema, since real schema will not store embedded content
            for component
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaField">
            <summary>
            <para>
            Represents a field in schema. It corresponds to an <see cref="T:Ingeniux.CMS.IElement">element</see> or <see cref="T:Ingeniux.CMS.IAttribute">attribute</see>
            in a <see cref="T:Ingeniux.CMS.IPage">page</see>.
            </para>
            <para>
            A <see cref="T:Ingeniux.CMS.ISchema">schema</see> contains a flat list of multiple fields.
            </para>
            </summary>
            <remarks>
            <para>Normally one schema field corresponds to one page field. However there are exceptions:</para>
            <para>A <see cref="T:Ingeniux.CMS.IGroupElement">Group element</see> in the schema consists of two fields: GroupStart and GroupEnd.</para>
            <para>A <see cref="T:Ingeniux.CMS.IListElement">List element</see> may have multiple child elements, but in the schema, the List element and its children's properties are defined in one field.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.SetExport(System.String,System.String)">
            <summary>
            Sets a local <see cref="T:Ingeniux.CMS.IExportDefinition">exports</see> entry.
            If the entry exists, it updates its value. Otherwise, it creates a new entry.
            </summary>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see></param>
            <param name="value">Value of the <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see></param>
            <seealso cref="P:Ingeniux.CMS.ISchemaField.Exports"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaField.RemoveExport(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.RemoveExport(System.String)">
            <summary>
            Removes a local <see cref="T:Ingeniux.CMS.IExportDefinition">exports</see> entry if exists.
            </summary>
            <param name="name">Name of the <see cref="T:Ingeniux.CMS.IExportDefinition">export entry</see> to remove</param>
            <returns>True if entry with a matching name exists, false otherwise.</returns>
            <seealso cref="P:Ingeniux.CMS.ISchemaField.Exports"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaField.SetExport(System.String,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.Property(System.String)">
            <summary>
            Gets a field property by its name. Each property corresponds to an <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> on a <see cref="T:Ingeniux.CMS.IPage">page</see> 
            <see cref="T:Ingeniux.CMS.IElement">element</see>.
            </summary>
            <param name="propertyName">Name of the property</param>
            <returns>Value of the property with matching name. If property doesn't exist, returns an empty string.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.SetProperty(System.String,System.String)">
            <summary>
            Sets a property of the field. If the property with the given name doesn't exist, creates a new property.
            </summary>
            <param name="propertyName">Name of property to update</param>
            <param name="propertyValue">Value of property</param>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.ChildProperty(System.String)">
            <summary>
            Gets a property of a child item of the field. Only applies to the <see cref="T:Ingeniux.CMS.IListElement">List element</see> field type.
            </summary>
            <param name="propertyName">Name of the child property</param>
            <returns>Value of the child property if it exists, empty if it doesn't.</returns>
            <remarks>For fields that is are not <see cref="T:Ingeniux.CMS.IListElement">List elements</see>, always returns an empty string.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.SetChildProperty(System.String,System.String)">
            <summary>
            Sets a property of child item of the field. Only applies to <see cref="T:Ingeniux.CMS.IListElement">List Element</see> field type.
            If child property with given name doesn't exist, will create a new child property.
            </summary>
            <param name="propertyName">Name of the child property</param>
            <param name="propertyValue">Value of the child property</param>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaField.Serialize">
            <summary>
            Serialize this field into Ingeniux CMS XML schema format.
            </summary>
            <returns>Result of serialization pieces in one-combo object.</returns>
            <remarks>
            <para>
            Most <see cref="T:Ingeniux.CMS.IElement">element</see> and <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> fields have two pieces of serialization
            output: declaration and implementation. <see cref="T:Ingeniux.CMS.IListElement">List elements</see> have one more piece: dhild declaration.
            </para>
            <para>
            For details of serialization output results, refer to <see cref="T:Ingeniux.CMS.ISchemaFieldResult"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.UniqueID">
            <summary>
            Gets and sets the unique ID of the Schema Field. Only effective in page creation for Element fields
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.FieldType">
            <summary>
            Gets and sets the type of field.
            </summary>
            <remarks>Each field type corresponds to an <see cref="T:Ingeniux.CMS.Enums.EnumElementType"/>
            for <see cref="T:Ingeniux.CMS.IPage">Page</see> <see cref="T:Ingeniux.CMS.IElement">Element</see> or <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.TypeName">
            <summary>
            Gets the name of the field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Name">
            <summary>
            Gets and sets the name of the field.
            </summary>
            <remarks>Name must be a valid xml element name</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Label">
            <summary>
            Gets and sets the the field's label (friendly name).
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.HelpText">
            <summary>
            Gets and sets a field's help text. Help text, displayed on the Ingeniux CMS edit form, is information to help users complete the field.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.DefaultValue">
            <summary>
            Gets and sets the field's default value.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Exports">
            <summary>
            Gets the field's collection of local exports. Local exports add additional <see cref="T:Ingeniux.CMS.IAttribute">attributes</see> for Link and Navigation element XML output to global exports.
            </summary>
            <remarks>
            <para>
            Only applies to navigation field types: Navigation, Link, Taxonomy Navigation, References Navigation, and LinkSet elements.
            </para>
            <para>
            It is recommended to avoid local exports as much as possible, since they are much slower than global exports.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaField.SetExport(System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaField.RemoveExport(System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Required">
            <summary>
            Gets and sets whether the field is required.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Readonly">
            <summary>
            Gets and sets whether the field is read-only for non-administrator users on the CMS edit form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.Hidden">
            <summary>
            Gets and sets whether the field is hidden for non-administrator users and users who don't have the 
            <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_VIEW_HIDDEN_ELEMENTS">View Hidden Elements</see> permission on the CMS edit form.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.ChildElementName">
            <summary>
            Gets and sets the child element's name. Only applies to the <see cref="T:Ingeniux.CMS.IListElement">List element</see> field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.ChildElementType">
            <summary>
            Gets and sets the child element type. Only applies to the <see cref="T:Ingeniux.CMS.IListElement">List element</see> field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaField.ChildElementLabel">
            <summary>
            Gets and sets the child element label. Only applies to the <see cref="T:Ingeniux.CMS.IListElement">List element</see> field type.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SchemaField.GetFieldPropertyValue(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.String)">
            <summary>
            Get property value from implementation node first, if not exist, use declaration value
            </summary>
            <param name="declaration"></param>
            <param name="implementation"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PcrOverridesDocument.GetPcrOverride(System.String)">
            <summary>
            Indexer, Get/Set schema override section by schema file name
            </summary>
            <param name="schemaFileName">Can be with or without .XML</param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ISiteContentLocalizationProvider">
            <summary>
            <para>
            Represents the Manager object that provides functionalities to manage translations of <see cref="T:Ingeniux.CMS.ISchema">Schemas</see>,
            <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>, <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Defintions</see> and 
            <see cref="T:Ingeniux.CMS.IWorkState">States</see>, into various languages for display on the user interfaces of Ingeniux CMS client.
            </para>
            <para>
            The translated <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> will replace the original field label and help text on Edit Form of a Page.
            </para>
            <para>
            The translated <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> will override the Page Creation Rule selection dialog's rule names.
            </para>
            <para>
            The translated <see cref="!:Ingeniux.CMS.IWorkflowDefintion">Workflow Definitions</see> and <see cref="T:Ingeniux.CMS.IWorkState">Work States</see> will change the labels
            of Workflow advancement dialogs.
            </para>
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.PCROverridesDocument(System.String)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> localization override document
            for the specified language. If the document doesn't exist yet, it is created.
            </summary>
            <param name="locale">The language for which to retrieve the localization document</param>
            <returns>Localization document of specifie language for <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.SchemaOverridesDocument(System.String)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> localization override document
            for the specified language. If the document doesn't exist yet, it is created.
            </summary>
            <param name="locale">The language for which to retrieve the localization document</param>
            <returns>Localization document of the specific language for <see cref="T:Ingeniux.CMS.ISchema">Schemas</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.WorkflowOverridesDocument(System.String)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.WorkflowDefinition">Workflow Defintions</see> and <see cref="T:Ingeniux.CMS.IWorkState">Work States</see> localization override document for the specified language. If the document doesn't exist yet, it is created.
            </summary>
            <param name="locale">The language for which to retrieve the localization document</param>
            <returns>Localization document of the specific language for <see cref="T:Ingeniux.CMS.WorkflowDefinition">Workflow Defintions</see> and <see cref="T:Ingeniux.CMS.IWorkState">Work States</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrievePCRName(System.String,Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Retrieves page creation rule localized name.
            </summary>
            <param name="locale">Locale for which to retrieve resources</param>
            <param name="pcr">Page creation rule</param>
            <returns>If translated, returns the page creation rule's translated name. Otherwise, it returns the PCR's original name</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrievePCRName(System.String,System.String)">
            <summary>
            Retrieves page creation rule localized name.
            </summary>
            <param name="locale">Locale for which to retrieve resources</param>
            <param name="pcr">Page creation rule</param>
            <returns>If translated, returns the page creation rule's translated name. Otherwise, it returns the PCR's original name</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrieveSchemaLocalization(System.String,System.String)">
            <summary>
            Retrieves schema localized resources.
            </summary>
            <param name="locale">Locale for which to retrieve resources</param>
            <param name="schemaId">Id or name of the schema</param>
            <returns>Localized resource for schema in the format of SchemaLocOverride object</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrieveWorkflowDefintionLocalization(System.String,System.String)">
            <summary>
            Retrieves workflow definition in WorkflowDefinitionOverride format.
            </summary>
            <param name="locale">Local for which to retrieve resources</param>
            <param name="wfDefId">Workflow definition ID</param>
            <returns>Workflow defintion resources, including the resources of its transitions, as a WorkflowDefinitionOverride instance.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrieveWorkflowStateLocalization(System.String,System.String)">
            <summary>
            Retrieves workflow state name and description.
            </summary>
            <param name="locale">Local for which to retrieve resources</param>
            <param name="wfStateId">Workflow state ID</param>
            <returns>Workflow state name and description in the NameDescriptionPair object format.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteContentLocalizationProvider.RetrieveWorkflowTransitionLocalization(System.String,System.String,System.String)">
            <summary>
            Retrieves the workflow transition name and description with the provided workflow definition ID and transition ID.
            </summary>
            <param name="locale">Local for which to retrieve resources</param>
            <param name="wfDefId">Workflow definition ID</param>
            <param name="transitionId">Workflow transition ID</param>
            <returns>Workflow transition name and description in the NameDescriptionPair format.</returns>
        </member>
        <member name="T:Ingeniux.CMS.ICustomWorkflowAction">
            <summary>
            Represents the base interface for custom workflow actions. All custom workflow action implementations must use this interface so that the workflow engine picks up custom actions.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IAction"/>
            <seealso cref="T:Ingeniux.CMS.ITransition"/>
            <seealso cref="T:Ingeniux.CMS.IWorkflow"/>
        </member>
        <member name="M:Ingeniux.CMS.ICustomWorkflowAction.Execute(Ingeniux.CMS.ITransition,Ingeniux.CMS.IWorkflow,Ingeniux.CMS.IUserSession)">
            <summary>
            Executes this action.
            </summary>
            <param name="transistion">Transtion of workflow going through</param>
            <param name="workflow">The workflow instance that is being advanced</param>
            <param name="session">User session that performs this action. This session is a <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession</see>.</param>
        </member>
        <member name="T:Ingeniux.CMS.IPageCreationRule">
             <summary>
             <para>
             Defines the criteria for creating a new <see cref="T:Ingeniux.CMS.IPage">Page</see>, including <see cref="T:Ingeniux.CMS.ISchema">Schema</see>, <see cref="T:Ingeniux.CMS.IPage">location</see>, and limitations on <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>
             and <see cref="T:Ingeniux.CMS.IUser">Users</see>.
             </para>
             <para>Page creation rules provide a controlled way to create pages; their main purpose is to enforce restrictions on page creation for nonadministrative users.</para>
             <para>Because they provide ways to limit page creation locations, they can also be a used as shortcuts for creating pages quickly.</para>
             <para>In addition, page creation rules can add newly created pages directly into workflows.</para>
             </summary>
             <remarks>
             <para>Page creation rule instances are managed by <see cref="T:Ingeniux.CMS.IPageCreationRulesManager">PageCreationRulesManager</see>.</para>
             </remarks>
             <example>
             Example of serialization output:
             <code language="xml">
             <![CDATA[
            <PageCreationRule Name="Create an Event" ID="PageCreationRules/232" Icon="16" IsDefault="false" Schema="Event Detail" StyleSheetFileName="default.xsl" wfid="">
            	<Users>
            		<User ID="ingeniux\admin1"/>
            		<User ID="ingeniux\author2"/>
            	</Users>
            	<Groups>
            		<Group ID="UserGroups/234"/>
            		<Group ID="UserGroups/42"/>
            		<Group ID="UserGroups/1"/>
            	</Groups>
            </PageCreationRule>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IPageCreationRulesManager"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.ClearUsersAndGroups">
            <summary>
            Removes all users and groups that are allowed to use this page creation rule to create pages. This renders the page creation rule unusable.
            </summary>
            <remarks>
            <para>This method makes the page creation rule unusable, but an administrator can still edit it.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Users"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Groups"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.Users">
            <summary>
            Retrieves the collection of explicitly defined <see cref="T:Ingeniux.CMS.IUser">Users</see> that can use this page creation rule to create <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <returns>Collection of users that are explicitly definied as being able to use this page creation rule; returns empty collection if there are no users explicitly defined to use the rule.</returns>
            <remarks>
            <para>This method returns the collection of users that are explicitly defined. It is not necessarily all the users that can use this page creation rule.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.UsersCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.AddUser(Ingeniux.CMS.IUser)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IUser">User</see> to the list of users explicitly allowed to use this page creation rule.
            </summary>
            <param name="user">User to add to the list</param>
            <remarks>
            <para>This method does nothing if the user parameter is null or the <see cref="T:Ingeniux.CMS.IUser">User</see> is already on the list of allowed users.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Users"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.UsersCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.RemoveUser(Ingeniux.CMS.IUser)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IUser">User</see> from the list of users explicitly allowed to use this page creation rule.
            </summary>
            <param name="user">User to remove from the list</param>
            <returns>True if this user is not null and currently on the list of allowed users. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Users"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.UsersCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.UsersCount">
            <summary>
            Gets the count of explicitly allowed <see cref="T:Ingeniux.CMS.IUser">Users</see>.
            </summary>
            <returns>Count of explicitly allowed users</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Users"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddUser(Ingeniux.CMS.IUser)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveUser(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.Groups">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> that are allowed to use this page creation rule to create <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>that are allowed to use this page creation rule to create pages.</returns>
            <remarks>
            <para>
            The <see cref="T:Ingeniux.CMS.IUser">Users</see> in the allowed groups, and the Users on the explicitly defined <see cref="M:Ingeniux.CMS.IPageCreationRule.Users">users list</see>,
            together make up the collection of users that can use this page creation rule.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.GroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.AddGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> to the allowed groups that can use this page creation rule.
            </summary>
            <param name="grp">The group to add to the list</param>
            <remarks>
            <para>This method does nothing if the group parameter is null or this <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> is already on the list of allowed groups.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Groups"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.GroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.RemoveGroup(Ingeniux.CMS.IUserGroup)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> from the list of group explicitly allowed to use this page creation rule.
            </summary>
            <param name="grp">Group to remove from the allowed list</param>
            <returns>True if this group is not null and is currently in the list of allowed groups. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Groups"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.GroupsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.GroupsCount">
            <summary>
            Gets the count of allowed <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>.
            </summary>
            <returns>Count of allowed <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see></returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.AddGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveGroup(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.Groups"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage">
            <summary>
            Retrieves the first parent <see cref="T:Ingeniux.CMS.IPage">Page</see> under which this page creation rule can be used to create pages 
            and to which the current <see cref="T:Ingeniux.CMS.IUser">User</see> has <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">Full Access</see>.
            </summary>
            <returns>The first accessible page under which this page creation rule can create pages.</returns>
            <remarks>
            <para>A page creation rule can be assigned to multiple parent <see cref="T:Ingeniux.CMS.IPage">Pages</see>. Each parent page could also allow all its descendants to be available to this page creation rule.</para>
            <para>This means, when using a page creation rule, a root page must be selected first.</para>
            <para>This method is useful when a page creation rule need only create a page and the page's location doesn't matter.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.SetParentPage(Ingeniux.CMS.IPage,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveParentPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPagesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.ParentPages">
            <summary>
            Retrieves the collection of parent <see cref="T:Ingeniux.CMS.IPage">Pages</see> under which the page creation rule is allowed to create pages.
            </summary>
            <returns>Collection of parent pages with the information on whether their descendants are included. Empty collection is returned if no parent pages exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.SetParentPage(Ingeniux.CMS.IPage,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveParentPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPagesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.SetParentPage(Ingeniux.CMS.IPage,System.Boolean)">
            <summary>
            Sets a <see cref="T:Ingeniux.CMS.IPage">Page</see> as parent page of this page creation rule.
            </summary>
            <param name="page">Parent page to set</param>
            <param name="dontIncludeDescendants">Determines whether to include descendants</param>
            <remarks>
            <para>If the page parameter value is null, this method does nothing</para>
            <para>A page creation rule may have multiple parent pages. This method adds the specified page as parent page. If the page was already a parent page, this method updates the existing entry.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveParentPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPagesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.RemoveParentPage(Ingeniux.CMS.IPage)">
            <summary>
            Removes a parent <see cref="T:Ingeniux.CMS.IPage">Page</see> from the parent pages collection
            </summary>
            <param name="page">Page to remove from parent pages collection</param>
            <returns>True if the given page is not null and was in the parent page collection. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.SetParentPage(Ingeniux.CMS.IPage,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPagesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.ParentPagesCount">
            <summary>
            Gets the count of parent <see cref="T:Ingeniux.CMS.IPage">page</see> entries for this page creation rule.
            </summary>
            <returns>Count of parent pages</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.SetParentPage(Ingeniux.CMS.IPage,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.RemoveParentPage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.UnassociateWorkflowDefinition">
            <summary>
            Removes the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> from this page creation rule.
            </summary>
            <remarks>
            <para>This method doesnothing if no workflow definition is associated with this page creation rule.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.IPageCreationRule.WorkFlowDefinition"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRule.AllowPageCreation(Ingeniux.CMS.IUser)">
            <summary>
            Checks whether the specified <see cref="T:Ingeniux.CMS.IUser">User</see> is allowed to use this page creation rulee to create <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="user">User to check</param>
            <returns>True if user is not null and is either member of any allowed <see cref="M:Ingeniux.CMS.IPageCreationRule.Groups">Groups</see>, 
            or on the list of explicitly allowed <see cref="M:Ingeniux.CMS.IPageCreationRule.Users">Users</see>. Otherwise, this method returns false.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRule.Schema">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> that used to create <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <remarks>
            <para>When this property is null, an error is thrown.</para>
            <para>This schema cannot be deleted as long as a page creation rule based on it still exists.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When assigning null to this property</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRule.StyleSheet">
            <summary>
            Gets and sets the overriding XSLT style sheet for this page creation rule.
            </summary>
            <remarks>
            <para>This property's value is the file name of the XSLT style sheet, located in the App_Date/xml/stylesheets folder</para>
            <example>
            Example value: default.xsl
            </example>
            <para>By default, page creation uses the XSLT style sheet set on the schema. The value of this property is the value of the <see cref="!:Ingeniux.CMS.ISchema.StyleSheet">StyleSheet</see> property on the schema.</para>
            <para>If this property is set and the override value is not null or empty, then the new page created uses the style sheet defined here.</para>
            <para>If the value to set on the property doesn't end in ".xsl" or ".xslt", an error is thrown.</para>
            <para>If the file specified in the value to set on the property doesn't exist, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When the value to set on the property doesn't end with ".xsl" or ".xslt"</exception>
            <exception cref="T:System.IO.IOException">When the file specified in the value to set on the property doesn't exist</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRule.IsDefault">
            <summary>
            Gets and sets whether this page creation rule is the default rule when more than one PCR is allowed for a given <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRule.WorkFlowDefinition">
            <summary>
            Gets and sets the <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definition</see> to which this page creation rule is connected.
            Pages created via this page creation rule are automatically added to the specified <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.
            </summary>
            <remarks>
            <para>Do not directly set the WorkflowDefinition to null, as this causes an error to be thrown.</para>
            <para>Use the <see cref="M:Ingeniux.CMS.IPageCreationRule.UnassociateWorkflowDefinition">UnassociateWorkflowDefinition</see> method instead.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRule.UnassociateWorkflowDefinition"/>
            <exception cref="T:System.ArgumentException">When trying to assign null to this property.</exception>
        </member>
        <member name="P:Ingeniux.CMS.IPageCreationRule.AutoSelectParent">
            <summary>
            Gets and sets whether this page creation rule allows the currently selected <see cref="T:Ingeniux.CMS.IPage">Page</see> to be used as a parent page for page creation.
            This property doesn't serve any purpose on the API level. It provides a suggestive value in the user interface layer.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPageCreationRulesManager">
             <summary>
             Represents the manager object that provides the means to query and manage <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object and only work within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IPageCreationRulesManager pcrManager = session.PageCreationRulesManager;
            		...
             }
             </code>
             </remarks>
             <example>
             <para>Serialization of the Page Creation Rules Manager matches the serialization of pagecreationrules.xml in previous-generation CMS content:</para>
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-16" standalone="no"?>
            <PageCreationRules NextID="10">
            	<PageCreationRule Name="Create an Image" ID="6" Icon="PageCreationRules/211" IsDefault="false" Schema="Image" StyleSheetFileName="" wfid="">
            		<Users/>
            		<Groups>
            			<Group ID="UserGroups/54"/>
            			<Group ID="UserGroups/1"/>
            		</Groups>
            	</PageCreationRule>
            	<PageCreationRule Name="Create an Event" ID="PageCreationRules/232" Icon="16" IsDefault="false" Schema="Event Detail" StyleSheetFileName="default.xsl" wfid="">
            		<Users>
            			<User ID="ingeniux\admin1"/>
            			<User ID="ingeniux\author2"/>
            		</Users>
            		<Groups>
            			<Group ID="UserGroups/234"/>
            			<Group ID="UserGroups/42"/>
            			<Group ID="UserGroups/1"/>
            		</Groups>
            	</PageCreationRule>
            </PageCreationRules>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IPageCreationRule"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>.
            </summary>
            <param name="totalCount">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Colletion of all page creation rules</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,Ingeniux.CMS.ISchema,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> that are based on the specified <see cref="T:Ingeniux.CMS.ISchema">Schema</see>.
            </summary>
            <param name="totalCount">Outputs total count of entries</param>
            <param name="schema">The schema on which to filter</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of page creation rules based on the specified schema</returns>
            <remarks>
            <para>If the schema parameter is null, returns all page creation rules</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,Ingeniux.CMS.IUser,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> that can be used by the specified <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="totalCount">Outputs total count of entries</param>
            <param name="user">The user that can use the page creation rules</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of page creation rules that can be used by specified user.</returns>
            <remarks>
            <para>If the user parameter is null, returns all page creation rules</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,Ingeniux.CMS.IUserGroup,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> that can be used by the the specified <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>.
            </summary>
            <param name="totalCount">Outputs total count of entries</param>
            <param name="userGroup">The group that is allowed by the page creation rules</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of page creation rules that allow the specified Group</returns>
            <remarks>
            <para>If the userGroup parameter is null, returns all page creation rules</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.String[])">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see> by their unique IDs.
            </summary>
            <param name="ruleIds">IDs of page creation rules to retrieve</param>
            <returns>Collection of page creation rules with matching ID</returns>
            <remarks>
            <para>Any nonexisting page creation rules IDs are ignored.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.Count">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>
            </summary>
            <returns>Count of page creation rules</returns>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IPageCreationRule">PageCreationRule</see>.
            </summary>
            <param name="ruleName">Name of the page creation rule</param>
            <param name="schema">Schema on which the page creation rule is based</param>
            <param name="isDefault">Specifies whether this rule is the <see cref="P:Ingeniux.CMS.IPageCreationRule.IsDefault">Default</see> rule.</param>
            <returns>Newly created page creation rule instance</returns>
            <remarks>
            <para>The Administrators group is automatically added to the allowed <see cref="M:Ingeniux.CMS.IPageCreationRule.Groups">Groups</see> for the new <see cref="T:Ingeniux.CMS.IPageCreationRule">PageCreationRule</see>.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.RemovePageCreationRule(Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Permenantly removes a <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> from the collection.
            </summary>
            <param name="rule">Page creation rule to be removed</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> is not null and exists in the collection. Otherwise, this method returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRules(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.IPageCreationRulesManager.AddPageCreationRule(System.String,Ingeniux.CMS.ISchema,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.IPageCreationRulesManager.PageCreationRule(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> by its unique ID.
            </summary>
            <param name="ruleId">Unique ID of the page creation rule</param>
            <returns><see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> with matching ID. Returns null if an ID is not found.</returns>
        </member>
        <member name="T:Ingeniux.CMS.ISite">
             <summary>
             <para>
             Represents the manager object that provides the means to query and manage <see cref="T:Ingeniux.CMS.IPage">Pages</see> and <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see>.
             </para>
             <para>
             It is the most important manager, due to fact it manages the central pieces of CMS, the <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
             </para>
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object and only work within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		ISite site = session.Site;
            		...
             }
             </code>
             <para>
             Unlike the Site object before version 9.0, DO NOT store instance of this object in ASP.NET session.
             </para>
             </remarks>
             <example>
             <para>Serialization of Site matches the serialization of reference.xml in previous-generation CMS content:
             </para>
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Site ID="x1" Name="Content Store" CheckedOut="false" SCID="Schema_Folder" SCV="1" AssignedUser="" AssignedGroup="" Schema="Folder" PageType="0" Locale="" LocaleInherited="true" Created="20140529T15:16:00" CreatedBy="ingeniux\ashley" Changed="20140625T09:53:15" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" SiteBaseUrl="" xmlns="x-schema:siteSchema.xml">
            	<Page ID="x3" Name="Site" CheckedOut="false" SCID="Schema_Folder" SCV="1" AssignedUser="" AssignedGroup="" Schema="Folder" PageType="1" Locale="" LocaleInherited="true" Created="20140529T16:11:45" CreatedBy="ingeniux\ashley" Changed="20140625T09:53:15" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59">
            		<Page ID="x2" Name="Home" CheckedOut="true" SCID="schemas/23" SCV="5" AssignedUser="ingeniux\awang" AssignedGroup="" Schema="Home" PageType="7" Locale="" LocaleInherited="true" Created="20140529T16:03:08" CreatedBy="ingeniux\ashley" Changed="20140710T09:42:16" LastChangedBy="ingeniux\awang" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59">
            			<Page ID="x34" Name="Products" CheckedOut="false" SCID="schemas/28" SCV="6" AssignedUser="" AssignedGroup="" Schema="ProductFront" PageType="8" Locale="" LocaleInherited="true" Created="20140602T15:50:27" CreatedBy="ingeniux\ashley" Changed="20140619T16:52:37" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59">
            				<Page ID="x43" Name="Cartella" CheckedOut="false" SCID="schemas/27" SCV="6" AssignedUser="" AssignedGroup="" Schema="ProductDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T14:46:10" CreatedBy="ingeniux\ashley" Changed="20140612T11:22:29" LastChangedBy="ingeniux\admin1" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x44" Name="CMS" CheckedOut="false" SCID="schemas/27" SCV="6" AssignedUser="" AssignedGroup="" Schema="ProductDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:02:29" CreatedBy="ingeniux\ashley" Changed="20140612T11:22:29" LastChangedBy="ingeniux\admin1" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            			</Page>
            			<Page ID="x41" Name="Solutions" CheckedOut="false" SCID="schemas/31" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsFront" PageType="8" Locale="" LocaleInherited="true" Created="20140603T14:21:21" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59">
            				<Page ID="x47" Name="Mainstream" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:42:05" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x48" Name="Information Technology" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="ingeniux\ashley" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:44:43" CreatedBy="ingeniux\ashley" Changed="20140616T16:55:16" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x49" Name="Higher Education" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:44:44" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x50" Name="E-commerce" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:44:46" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x51" Name="Intranets and Extranets" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:44:48" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            				<Page ID="x52" Name="Structured Pyramids" CheckedOut="false" SCID="schemas/30" SCV="3" AssignedUser="" AssignedGroup="" Schema="SolutionsDetail" PageType="8" Locale="" LocaleInherited="true" Created="20140603T15:44:53" CreatedBy="ingeniux\ashley" Changed="20140603T16:14:55" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            			</Page>
            		</Page>
            	</Page>
              <Page ID="RecycleBin" Name="Recycle Folder" CheckedOut="false" SCID="Schema_Folder" SCV="1" AssignedUser="" AssignedGroup="" Schema="Folder" PageType="1" Locale="" LocaleInherited="true" Created="20140529T15:16:01" CreatedBy="ingeniux\ashley" Changed="20140701T21:16:14" LastChangedBy="ingeniux\ashley" StartDate="00010101T00:00:00" EndDate="99991231T23:59:59" />
            </Site>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IPage"/>
             <seealso cref="T:Ingeniux.CMS.IPageVersion"/>
             <seealso cref="T:Ingeniux.CMS.ISettings"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.MetaDataRead``1(System.Func{Ingeniux.CMS.IContentStoreMetaData,``0})">
            <summary>
            Retrieves a meta data value via callback
            </summary>
            <typeparam name="T">Type of the value to return. Result will be casted to this value.</typeparam>
            <param name="callback">The method to call to get the actual metadata value.</param>
            <returns>Value of Site instance metadata</returns>
            <remarks>
            <para>If the meta data not yet exists in meta data collection, it will be created on the fly with empty value.</para>
            </remarks>
            <example>
            <para>To retrieve the Server Name of this Site Instance</para>
            <code language="C#">
            <![CDATA[
            var serverName = MetaDataRead<string>(csmd => csmd.ServerName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.ISite.ContentFreezeState">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IContentFreezeState">Content Freeze State</see> of the Site Instance.
            This object is used to toggle content freeze on the Site Instance.
            </summary>
            <returns>The Content Freeze State object</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.FreezeContent(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUser},System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.CancelContentFreeze"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.FreezeContent(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUser},System.String)">
            <summary>
            Plans a <see cref="T:Ingeniux.CMS.IContentFreezeState">Content Freeze</see> on the Site Instance.
            </summary>
            <param name="startTime">Time to start the Content Freeze, this value can be before "Now" time, which means Content Freeze will start right away.</param>
            <param name="endTime">The ending time of the Content Freeze. If null value, Content Freeze state will have to be terminated by calling 
            <see cref="M:Ingeniux.CMS.ISite.CancelContentFreeze">CancelContentFreeze</see> method.</param>
            <param name="allowedUsers">The list of <see cref="T:Ingeniux.CMS.IUser">Users</see> that can still work with CMS during Content Freeze, besides the <see cref="T:Ingeniux.CMS.IUser">User</see>
            that calls this method.
            If null or empty collection, only the calling <see cref="T:Ingeniux.CMS.IUser">User</see> can work with CMS during Content Freeze.</param>
            <param name="message">The message to display to blocked <see cref="T:Ingeniux.CMS.IUser">Users</see> during Content Freeze.</param>
            <exception cref="!:System.SecurityException">When a <see cref="T:Ingeniux.CMS.IUser">User</see> without administrative permission trying to start a new Content Freeze, or
            when a <see cref="T:Ingeniux.CMS.IUser">User</see> not in the allowed Users list, trying to change a pending or ongoing Content Freeze.</exception>
            <exception cref="T:System.ArgumentException">When endTime is greater than startTime.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.ContentFreezeState"/>
            <seealso cref="M:Ingeniux.CMS.ISite.CancelContentFreeze"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.CancelContentFreeze">
            <summary>
            Cancel a pending or ongoing <see cref="T:Ingeniux.CMS.IContentFreezeState">Content Freeze State</see>.
            </summary>
            <remarks>
            <para>Any administrator can cancel a Content Freeze, only the original initiator and allowed <see cref="T:Ingeniux.CMS.IUser">Users</see> can update a Content Freeze.</para>
            </remarks>
            <exception cref="!:System.SecurityException">When a <see cref="T:Ingeniux.CMS.IUser">User</see> without administrative permission calling this method.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.ContentFreezeState"/>
            <seealso cref="M:Ingeniux.CMS.ISite.FreezeContent(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Ingeniux.CMS.IUser},System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> on this Site Instance.
            </summary>
            <returns>Count of all <see cref="T:Ingeniux.CMS.IPage">Pages</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISite.SiteRoot">
            <summary>
            Retrieves the Root <see cref="T:Ingeniux.CMS.IPage">Page</see> of the Site Instance.
            </summary>
            <returns>Root <see cref="T:Ingeniux.CMS.IPage">Page</see> of the Site Instance.</returns>
            <remarks>
            <para>Root <see cref="T:Ingeniux.CMS.IPage">Page</see> is automatically created during Site Creation.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISite.Page(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IPage">Page</see> by its unique Id.
            </summary>
            <param name="pageId">Id of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to retrieve, alway starts with letter "x" and ends with numbers. e.g. x1234</param>
            <returns>Page with matching Id, or null when no Page with matching Id found.</returns>
            <remarks>
            <para>Prior to V9.0, retrieving a <see cref="T:Ingeniux.CMS.IPage">Page</see> with invalid id with cause exception to be throw. This is changed in V9.0 to just return a null value.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.Pages(System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.Pages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> by their unique Ids.
            </summary>
            <param name="pageIds">Ids of the Pages to retrieve</param>
            <returns>Pages with matching Ids</returns>
            <remarks>
            <para>
            The collection will not contain any null values. All non-existing Ids are ignored.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.Pages(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all <see cref="T:Ingeniux.CMS.IPage">Pages</see>, in a paginated fashion.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see></returns>
            <remarks>
            <para>
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> are returned in the order they were created. This doesn't necessarily mean it will always start
            with smallest XID, especially for content migrated from Version 8.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all <see cref="P:Ingeniux.CMS.IPage.IsComponent">Component Pages</see>, in a paginated fashion.
            Components don't have their own view/template. They are shared among <see cref="T:Ingeniux.CMS.IPage">Pages</see> as reusable content.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="P:Ingeniux.CMS.IPage.IsComponent">Component Pages</see></returns>
            <remarks>
            <para>
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> are returned in the order they were created. This doesn't necessarily mean it will always start
            with smallest XID, especially for content migrated from Version 8.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Pages(System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> by <see cref="T:Ingeniux.CMS.ISchema">Schemas</see>.
            </summary>
            <param name="schemas">The collection of Schemas the <see cref="T:Ingeniux.CMS.IPage">Pages</see> were created from. <see cref="T:Ingeniux.CMS.IPage">Pages</see> 
            created from any of these <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> are included</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="!:Ingeniux.CMS.IPages">Pages</see> that were created from any of the specified <see cref="T:Ingeniux.CMS.ISchema">Schemas</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Pages(System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> by their <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">Root Names</see>. 
            </summary>
            <param name="rootNames">The Root Xml Element Name when the <see cref="T:Ingeniux.CMS.IPage">Pages</see> is serialized.</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that has of the of the specified <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">Root Names</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Pages(System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.Pages(System.Func{Ingeniux.CMS.IPage,System.Boolean})">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see>, filtered by a callback method.
            </summary>
            <param name="filterCallback">The callback method to filter out <see cref="T:Ingeniux.CMS.IPage">Pages</see>. Pages with callback method returning true, are included in the collection.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> filtered by the callback method.</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.Page(System.String)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.Components(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesBySchemas(Ingeniux.CMS.ISchema[],System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByRootNames(System.String[],System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesByKeywords(System.String,System.Int32@,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> by keywords in the Pages' <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>,
            and any text/xhtml field values, in a paginated fashion.
            </summary>
            <param name="keywords">The keyword to search for</param>
            <param name="count">Count of total entries</param>
            <param name="useCheckedoutContent">Whether to use checked out <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of the <see cref="T:Ingeniux.CMS.IPage">Page</see> for 
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are checked out</param>
            <param name="includeRecycledPages">Whether to include <see cref="P:Ingeniux.CMS.IPage.Removed">Removed Pages</see> in the collection.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that contains the searching keyword in its <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> or any text/xhtml fields.</returns>
            <remarks>
            <para>
            The method call pulls results from a Full-Text index created on the Content Store. Due to the full text nature of the index, you will immediately have the results, but it may not
            always 100% up-to-date on the latest changes.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesHistoryByKeywords(System.String,System.Int32@,System.Boolean,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesByKeywords(System.String,System.String,System.String,System.Int32@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> by keywords in the Pages' <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>,
            or specified text/xhtml field, with additional filtering of <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">Root Name</see> and field to search on, in a paginated fashion.
            </summary>
            <param name="keywords">The keyword to search for</param>
            <param name="schemaRootName">The <see cref="!:Ingeniux.CMS.IPage.RootName">Root Name</see> of the Page to filter on. Only <see cref="T:Ingeniux.CMS.IPage">Pages</see> with the specified
            Root Name are included.</param>
            <param name="fieldName">The Name of the field to search on. Use "@Name" to search in <see cref="!:Ingeniux.CMS.IPage.Name">Page Name</see></param>
            <param name="count">Count of total entries</param>
            <param name="fieldIsAttribute">Whether the field searching name is <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> or not.</param>
            <param name="useCheckedoutContent">Whether to use checked out <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of the <see cref="T:Ingeniux.CMS.IPage">Page</see> for 
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are checked out</param>
            <param name="includeRecycledPages">Whether to include <see cref="P:Ingeniux.CMS.IPage.Removed">Removed Pages</see> in the collection.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that contains the searching keyword in its <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> or any text/xhtml fields.</returns>
            <remarks>
            <para>
            The method call pulls results from a Full-Text index created on the Content Store. Due to the full text nature of the index, you will immediately have the results, but it may not
            always 100% up-to-date on the latest changes.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesHistoryByKeywords(System.String,System.Int32@,System.Boolean,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesHistoryByKeywords(System.String,System.Int32@,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see> by keywords in the Pages' <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>,
            and any text/xhtml field values, in a paginated fashion.
            This search covers the entire existing history of the <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="keywords">The keyword to search for</param>
            <param name="count">Count of total entries</param>
            <param name="useCheckedoutContent">Whether to use checked out <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of the <see cref="T:Ingeniux.CMS.IPage">Page</see> for 
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are checked out</param>
            <param name="includeRecycledPages">Whether to include <see cref="P:Ingeniux.CMS.IPage.Removed">Removed Pages</see> in the collection.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that contains the searching keyword in its <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> or any text/xhtml fields.</returns>
            <remarks>
            <para>
            The method call pulls results from a Full-Text index created on the Content Store. Due to the full text nature of the index, you will immediately have the results, but it may not
            always 100% up-to-date on the latest changes.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByKeywords(System.String,System.Int32@,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>  
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesHistoryByKeywords(System.String,System.String,System.String,System.Int32@,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see> by keywords in the Pages' <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see>,
            or specified text/xhtml field, with additional filtering of <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">Root Name</see> and field to search on, in a paginated fashion.
            </summary>
            <param name="keywords">The keyword to search for</param>
            <param name="schemaRootName">The <see cref="!:Ingeniux.CMS.IPage.RootName">Root Name</see> of the Page to filter on. Only <see cref="T:Ingeniux.CMS.IPage">Pages</see> with the specified
            Root Name are included.</param>
            <param name="fieldName">The Name of the field to search on. Use "@Name" to search in <see cref="P:Ingeniux.CMS.IEntity.Name">Page Name</see></param>
            <param name="count">Count of total entries</param>
            <param name="fieldIsAttribute">Whether the field searching name is <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> or not.</param>
            <param name="useCheckedoutContent">Whether to use checked out <see cref="T:Ingeniux.CMS.IPageVersion">Version</see> of the <see cref="T:Ingeniux.CMS.IPage">Page</see> for 
            <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are checked out</param>
            <param name="includeRecycledPages">Whether to include <see cref="P:Ingeniux.CMS.IPage.Removed">Removed Pages</see> in the collection.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that contains the searching keyword in its <see cref="P:Ingeniux.CMS.IEntity.Name">Name</see> or any text/xhtml fields.</returns>
            <remarks>
            <para>
            The method call pulls results from a Full-Text index created on the Content Store. Due to the full text nature of the index, you will immediately have the results, but it may not
            always 100% up-to-date on the latest changes.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesByKeywords(System.String,System.Int32@,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>  
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesAssignedToUser(Ingeniux.CMS.IUser,System.Int32@,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> assigned to a specific <see cref="T:Ingeniux.CMS.IUser">User</see>, in a paginated fashion.
            </summary>
            <param name="user">The User that Pages are assigned to</param>
            <param name="count">Outputs total count of entries</param>
            <param name="includeGroups">Whether to include <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are assigned to the <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see> the 
            <see cref="T:Ingeniux.CMS.IUser">User</see> belongs to</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> assigned to the specified <see cref="T:Ingeniux.CMS.IUser">User</see></returns>
            <remarks>
            <para>
            When the "user" parameter value is null, returns empty collection, with "count" parameter output 0.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesAssignedToUserCount(Ingeniux.CMS.IUser)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.PagesAssignedToUserCount(Ingeniux.CMS.IUser)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> assigned to the specified <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="user">The User that Pages are assigned to</param>
            <returns>Count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> assigned to the specified <see cref="T:Ingeniux.CMS.IUser">User</see>.</returns>
            <remarks>
            <para>
            When the "user" parameter value is null, returns 0.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.PagesAssignedToUser(Ingeniux.CMS.IUser,System.Int32@,System.Boolean,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.ComponentReferences(System.Int32@,Ingeniux.CMS.IPage,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that have component references to the specified <see cref="P:Ingeniux.CMS.IPage.IsComponent">Component</see>, in a paginated fashion.
            </summary>
            <param name="component">The component to search reference on</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that has component reference to the specified <see cref="P:Ingeniux.CMS.IPage.IsComponent">Component</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.LinkReferences(System.Int32@,Ingeniux.CMS.IPage,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.LinkReferences(System.Int32@,Ingeniux.CMS.IPage,System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that have link or link-set references to the specified <see cref="T:Ingeniux.CMS.IPage">Target Page</see> , 
            in a paginated fashion.
            </summary>
            <param name="linkTarget">The target <see cref="T:Ingeniux.CMS.IPage">Page</see> to search link and link-set references on.</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IPage">Pages</see> that has link or link-set reference to the specified <see cref="T:Ingeniux.CMS.IPage">Target Page</see>.</returns>
            <remarks>
            <para>
            This method only covers directly references via link and link-set, it doesn't cover references via any type of navigations, taxonomy navigations, and cross-references.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.ComponentReferences(System.Int32@,Ingeniux.CMS.IPage,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.StyleSheets">
            <summary>
            Retrieves the XSLT stylesheets collection in the "App_Data\xml\Stylesheets" <see cref="T:System.IO.DirectoryInfo">Folder</see>.
            </summary>
            <returns>Collection of meta data of XSLT stylesheets</returns>
            <seealso cref="M:Ingeniux.CMS.ISite.ValidateStylesheets"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.ValidateStylesheets">
            <summary>
            Perform XML validation on the XSLT stylesheets.
            </summary>
            <remarks>
            <para>
            This validation only make sure the XSLT stylesheets can be loaded correctly as XSLT files, it will not perform any actual compilation/transformation in XSLT level.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISite.StyleSheets"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.RemovePage(Ingeniux.CMS.IPage@)">
            <summary>
            Removes a single <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="page">The page to remove/purge</param>
            <returns>True if <see cref="T:Ingeniux.CMS.IPage">Page</see> exists, false otherwise.</returns>
            <remarks>
            <para>
            if "page" is null, returns false.
            </para>
            <para>
            If the <see cref="T:Ingeniux.CMS.IPage">Page</see> is not under <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>, it will be moved to Recycle Folder.
            If it is already under Recycle Folder, it will be permenantly purged.
            </para>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageDelete">BeforePageDelete</see> and 
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageDelete">AfterPageDelete</see>.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When trrying to remove <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Site Root</see> or
            <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>; or trying to remove a <see cref="T:Ingeniux.CMS.IPage">Page</see> assigned to another 
            <see cref="T:Ingeniux.CMS.IUser">User</see>, but doesn't have the right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ASSIGNMENT">Assign other's Pages</see>.</exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the right to 
            <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE">Delete Pages</see>, or doens't have full access to the <see cref="T:Ingeniux.CMS.IPage">Page</see> to be removed.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">
            <summary>
            Copies a <see cref="T:Ingeniux.CMS.IPage">Page</see> together with its descendants, to the specified location.
            </summary>
            <param name="srcPage">The <see cref="T:Ingeniux.CMS.IPage">Page</see> to be copied</param>
            <param name="tgtParentPage">The target <see cref="T:Ingeniux.CMS.IPage">reference location Page</see>. The copied Page could be placed before, after, or as child of this Page.</param>
            <param name="placing">The location to place the copied <see cref="T:Ingeniux.CMS.IPage">Pages</see> relative to the "targetParentPage"</param>
            <returns>The copied <see cref="T:Ingeniux.CMS.IPage">Pages</see> </returns>
            <remarks>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageCopy">BeforePageCopy</see> and 
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageCopy">AfterPageCopy</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the parameter "srcPage" or "tgtParentPage" is null, or "tgtParentPage" being <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root</see> of the Site,
            and the "placing" is to a sibling position.</exception>
            <exception cref="T:System.ArgumentException">When "srcPage" or "tgtParentPage" doesn't have valid <see cref="P:Ingeniux.CMS.IPage.Hierarchy">Hierarchy value</see>.</exception>
            <exception cref="T:System.InvalidOperationException">When "srcPagg" is either <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root Page</see> or <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.</exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the necessary node-level permssions.
            The Operating User must have at least read-only permission on "srcPage", and full access on the actual target parent Page.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.MovePage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.CrossLocaleCopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.CopyRegionRootPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISite.MovePage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">
            <summary>
            Moves a <see cref="T:Ingeniux.CMS.IPage">Page</see> together with its descendants, to the specified location.
            </summary>
            <param name="srcPage">The <see cref="T:Ingeniux.CMS.IPage">Page</see> to  be moved</param>
            <param name="tgtParentPage">The target <see cref="T:Ingeniux.CMS.IPage">reference location Page</see>. The moved Page could be placed before, after, or as child of this Page.</param>
            <param name="placing">The location to place the moved <see cref="T:Ingeniux.CMS.IPage">Pages</see> relative to the "targetParentPage"</param>
            <returns>The "srcPage" after it has been moved.</returns>
            <remarks>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageMove">BeforePageMove</see> and 
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageMove">AfterPageMove</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">When "srcPage" or "tgtParentPage" doesn't have valid <see cref="P:Ingeniux.CMS.IPage.Hierarchy">Hierarchy value</see>.</exception>
            <exception cref="T:System.InvalidOperationException">When "srcPage" is either <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root Page</see> or <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.</exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the necessary node-level permssions.
            The Operating User must have full access to both "srcPage" and the actual target parent Page.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.CreatePage(Ingeniux.CMS.ISchema,System.String,Ingeniux.CMS.IPage,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IPage">Page</see> with specific <see cref="T:Ingeniux.CMS.ISchema">Schema</see>.
            </summary>
            <param name="schema">The schema to have the new <see cref="T:Ingeniux.CMS.IPage">Page</see> based on</param>
            <param name="pageName">Name of the new <see cref="T:Ingeniux.CMS.IPage">Page</see> </param>
            <param name="parentPage">The parent <see cref="T:Ingeniux.CMS.IPage">Page</see> to create the new Page under</param>
            <param name="insertAtBeginning">Whether to place the <see cref="T:Ingeniux.CMS.IPage">Page</see> before or after the existing child Pages</param>
            <param name="isDummy">Whether to create a Dummy Page or not. Dummy Pages are temporary, therefore, parameters "parentPage" and "insertAtBeginning" don't matter</param>
            <returns>The created new <see cref="T:Ingeniux.CMS.IPage">Page</see> </returns>
            <remarks>
            <para>When "isDummy" is true, the created Page is temporary. It will not be saved to Content Store. Therefore, no security validations will apply. Anybody can create a dummy Page.</para>
            <para>
            If "parentPage" parameter value is null, the new Page will be created under the <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Site Root</see>. 
            </para>
            <para>
            If "pageName" is null or empty, it will be default to one empty space.
            </para>
            <para>
            "schema" must be specified, or error will be thrown.
            </para>
            <para>
            The <see cref="T:Ingeniux.CMS.ISchema">"schema"</see> cannot be in draft mode, when "isDummy" is false, or error will be thrown.
            </para>
            <para>
            If "parentPage" is the <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>, error will be thrown.
            </para>
            <para>The event "<see cref="E:Ingeniux.CMS.ISiteEvents.PageCreated">PageCreated</see>" will be fired upon page creation, if "isDummy" is false.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the "schema" parameter is null</exception>
            <exception cref="T:System.ArgumentException">When "isDummy" is false, and either "parentPage" is <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>, or "schema" is in 
            <see cref="P:Ingeniux.CMS.ISchemaBasic.Drafting">Draft</see> mode.</exception>
            <exception cref="T:System.Security.SecurityException">When "isDummy" is false, and either <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't
            have the right to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CREATE">Create Pages</see>, or doesn't have full access to the "parentPage".</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISite.CreatePage(Ingeniux.CMS.IPageCreationRule,System.String,Ingeniux.CMS.IPage,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.IPage">Page</see> based on a <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see>.
            </summary>
            <param name="pcr">The <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rule</see> to use to create the new <see cref="T:Ingeniux.CMS.IPage">Page</see></param>
            <param name="pageName">Name of the new <see cref="T:Ingeniux.CMS.IPage">Page</see> </param>
            <param name="overrideParentPage">The <see cref="T:Ingeniux.CMS.IPage">Parent Page</see> to create the new Page under. It must be in the list of allowed 
            <see cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages">Parent Pages</see> of the <see cref="T:Ingeniux.CMS.IPageCreationRule">"pcr"</see>  </param>
            <param name="dontAddToWorkFlow">Whether to add the created <see cref="T:Ingeniux.CMS.IPage">Page</see> to <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>, if the "pcr" has
            <see cref="!:Ingeniux.CMS.IPageCreationRule.IWorkflowDefinition">Workflow Definition tie-in</see> already. If not, this parameter has no impact</param>
            <param name="userId">The "Id" of the <see cref="T:Ingeniux.CMS.IUser">User</see> to assign the <see cref="T:Ingeniux.CMS.IPage">created Page</see> to, if the "dontAddToWorkFlow" parameter
            is true</param>
            <returns>The created new <see cref="T:Ingeniux.CMS.IPage">Page</see> </returns>
            <remarks>
            <para>
            "pcr" parameter cannot be null, or error will be thrown.
            </para>
            <para>
            If "pageName" is null or empty, it will be default to one empty space.
            </para>
            <para>
            When "overrideParentPage" is not null, it must be allowed for the <see cref="T:Ingeniux.CMS.IPageCreationRule">"pcr"</see> as a <see cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages">Parent Page</see> 
            to create new <see cref="T:Ingeniux.CMS.IPage">Pages</see> under; When it is null, the "pcr"'s <see cref="M:Ingeniux.CMS.IPageCreationRule.FirstAccessibleParentPage">First accessible Parent Page</see> will
            be used as parent Page.
            </para>
            <para>
            The parameter "userId" doesn't have to be specified. If not specified, the new <see cref="T:Ingeniux.CMS.IPage">Page</see> will be assigned to
            either the <see cref="P:Ingeniux.CMS.IWorkflow.DefaultTransition">Default Transition</see> 's <see cref="P:Ingeniux.CMS.ITransition.DefaultUser">Default User</see>,
            to the <see cref="P:Ingeniux.CMS.ITransition.NextGroup">Transitions's Next Group</see>.
            </para>
            <para>The event "<see cref="E:Ingeniux.CMS.ISiteEvents.PageCreated">PageCreated</see>" will be fired upon page creation.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When "pcr" parameter is null</exception>
            <exception cref="T:System.ArgumentException">When "pcr" doesn't have any <see cref="M:Ingeniux.CMS.IPageCreationRule.ParentPages">Parent Pages</see>
            and "overrideParentPage" is null, or "overrideParentPage" is not in the allow Parent Pages for the "pcr".</exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have full access to the actual parent 
            <see cref="T:Ingeniux.CMS.IPage">Page</see>.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISite.RecycleFolder">
            <summary>
            Retrieves the Recycle Folder of the Site Instance
            </summary>
            <returns>The Recycle Folder page.</returns>
            <remarks>
            <para>
            Recycle Folder cannot be <see cref="M:Ingeniux.CMS.ISite.RemovePage(Ingeniux.CMS.IPage@)">Removed</see>.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISite.EmptyRecycleFolder">
            <summary>
            Permenantly delete all <see cref="T:Ingeniux.CMS.IPage">Pages</see> under <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>.
            </summary>
            <remarks>
            <para>Two events are fired during execution of this method: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforeEmptyRecycleFolder">BeforeEmptyRecycleFolder</see> and 
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterEmptyRecycleFolder">AfterEmptyRecycleFolder</see>.</para>
            </remarks>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the right
            to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE">Delete Pages</see>.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISite.CrossLocaleCopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,System.Boolean)">
            <summary>
            <para>
            Copies a <see cref="T:Ingeniux.CMS.IPage">Page</see> with language settings, together with its descendants, to another location of a <see cref="T:Ingeniux.CMS.IPage">Page</see> with language settings,
            when there is a <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> established between the <see cref="M:Ingeniux.CMS.IPage.RegionRoot">Region Roots</see> of both <see cref="T:Ingeniux.CMS.IPage">Pages</see> .
            </para>
            <para>This method will create a collection of <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Maps</see> from the source <see cref="T:Ingeniux.CMS.IPage">Page</see> and its descendants, to
            their corresponding clone <see cref="T:Ingeniux.CMS.IPage">Pages</see>.</para>
            </summary>
            <param name="page">The <see cref="T:Ingeniux.CMS.IPage">Page</see> to be copied</param>
            <param name="parent">The target location</param>
            <param name="placing">The location to place the copied <see cref="T:Ingeniux.CMS.IPage">Pages</see> relative to the "parent"</param>
            <param name="ignoreExistingMaps">
            Whether to ignore any existing <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> of the source <see cref="T:Ingeniux.CMS.IPage">Page</see> that
            was already mapped to to the "parent"'s <see cref="T:Ingeniux.CMS.ILocale">Locale</see>. If true, system will remove the existing map silently before creating a new one. If not, a error will be thrown.
            </param>
            <returns>The new <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> between the source <see cref="T:Ingeniux.CMS.IPage">Page</see> and its copied Page at target location</returns>
            <remarks>
            <para>
            This method is for strictly copying <see cref="T:Ingeniux.CMS.IPage">Pages</see> between lingual sections that already have their <see cref="M:Ingeniux.CMS.IPage.RegionRoot">Region Roots</see> mapped.
            Failure to meet this condition will generate errors.
            </para>
            <para>When "ignoreExistingMaps" is true, system to silently remove any <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> that source Page has at target Locale.</para>
            <para>When "ignoreExistingMaps" is false, error will be thrown.</para>
            <para>
            Four events are fired in the following order: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforeCrossLocaleCopy">BeforeCrossLocaleCopy</see>,
            <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageCopy">BeforePageCopy</see>, <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageCopy">AfterPageCopy</see>, and
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterCrossLocaleCopy">AfterCrossLocaleCopy</see>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the parameter "page" or "parentPage" is null, or "parentPage" being <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root</see> of the Site,
            and the "placing" is to a sibling position.</exception>
            <exception cref="T:System.ArgumentException">When "page" or "parentPage" doesn't have valid <see cref="P:Ingeniux.CMS.IPage.Hierarchy">Hierarchy value</see>.</exception>
            <exception cref="T:System.InvalidOperationException">
            When "page" is either <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root Page</see> or <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>; 
            Or when the <see cref="M:Ingeniux.CMS.IPage.RegionRoot">Region Roots</see> of "page" and "parentPage" don't have established <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> yet.
            </exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the necessary node-level permssions.
            The Operating User must have at least read-only permission on "page", and full access on the actual target parent Page.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.CopyRegionRootPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,Ingeniux.CMS.ILocale)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.CopyRegionRootPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,Ingeniux.CMS.ILocale)">
            <summary>
            <para>
            Clones a <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root</see>, together with its descendants, to another location. The cloned <see cref="T:Ingeniux.CMS.IPage">Page</see> will also
            be a Region Root, with the specified language setting applied.
            </para>
            <para>This method will create a collection of <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Maps</see> from the source <see cref="T:Ingeniux.CMS.IPage">Page</see> and its descendants, to
            their corresponding clone <see cref="T:Ingeniux.CMS.IPage">Pages</see>.</para>
            </summary>
            <param name="page">The <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root Page</see> to be copied</param>
            <param name="parent">The target location</param>
            <param name="placing">The location to place the copied <see cref="T:Ingeniux.CMS.IPage">Pages</see> relative to the "parent"</param>
            <param name="targetLocale">The language to set on the cloned <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root</see> </param>
            <returns>The new <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> between the source <see cref="T:Ingeniux.CMS.IPage">Region Root</see> and its clone Region Root at target location</returns>
            <remarks>
            <para>This method for for strictly copying <see cref="T:Ingeniux.CMS.IPage">a Page</see> that is a <see cref="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">Region Root</see>. That means this Page must
            have a <see cref="P:Ingeniux.CMS.IPage.Locale">Locale</see>, and must not <see cref="P:Ingeniux.CMS.IPage.LocaleInherited">Inheriting the Locale</see> from its ancestor.
            Failure to meet this condition will generate errors.</para>
            <para>Four events are fired in the following order: <see cref="E:Ingeniux.CMS.ISiteEvents.BeforeRegionRootCopy">BeforeRegionRootCopy</see>,
            <see cref="E:Ingeniux.CMS.ISiteEvents.BeforePageCopy">BeforePageCopy</see>, <see cref="E:Ingeniux.CMS.ISiteEvents.AfterPageCopy">AfterPageCopy</see>, and
            <see cref="E:Ingeniux.CMS.ISiteEvents.AfterRegionRootCopy">AfterRegionRootCopy</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the parameter "page" or "parentPage" is null, or "parentPage" being <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root</see> of the Site,
            and the "placing" is to a sibling position, or when "targetLocale" is null.</exception>
            <exception cref="T:System.ArgumentException">When "page" or "parentPage" doesn't have valid <see cref="P:Ingeniux.CMS.IPage.Hierarchy">Hierarchy value</see>, or when "page" is not 
            <see cref="!:Ingeniux.CMS.ISite.RegionRoot">Region Root</see>, </exception>
            <exception cref="T:System.InvalidOperationException">When "page" is either <see cref="M:Ingeniux.CMS.ISite.SiteRoot">Root Page</see> or <see cref="M:Ingeniux.CMS.ISite.RecycleFolder">Recycle Folder</see>; Or 
            when the <see cref="M:Ingeniux.CMS.IPage.RegionRoot">Region Roots</see> of "page" and "parentPage" don't have established <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Map</see> yet.</exception>
            <exception cref="T:System.Security.SecurityException">When <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see> doesn't have the necessary node-level permssions.
            The Operating User must have at least read-only permission on "page", and full access on the actual target parent Page.</exception>
            <seealso cref="M:Ingeniux.CMS.ISite.CrossLocaleCopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,System.Boolean)"/> 
            <seealso cref="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)"/> 
        </member>
        <member name="M:Ingeniux.CMS.ISite.RegionRoots(System.Int32@,Ingeniux.CMS.ILocale,System.Int32,System.Int32)">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IPage">Pages</see> that have <see cref="P:Ingeniux.CMS.IPage.Locale">Locales</see> set and not <see cref="P:Ingeniux.CMS.IPage.LocaleInherited">Inheriting Locale</see> from
            their ancestors, in a paginated fashion.
            </summary>
            <param name="count">Count of total entries</param>
            <param name="filterLocale">The <see cref="T:Ingeniux.CMS.ILocale">Locale</see> to filter the collection.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns><see cref="T:Ingeniux.CMS.IPage">Pages</see> that are Region Roots, and/or matches the filter <see cref="T:Ingeniux.CMS.ILocale">Locale</see></returns>
            <remarks>
            <para>
            There could be multiple Region Roots in a Site Instance, and multiple Region Roots with the same language. They could have <see cref="T:Ingeniux.CMS.ILingualPageMap">Lingual Maps</see> between,
            or have no relation with each other.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISite.SerializeForPublishing(Ingeniux.CMS.IPublishingTarget)">
            <summary>
            Produces XML serialization for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>. This method generates the content
            of published reference.xml for Dynamic Site Server.
            </summary>
            <param name="pubTarget">The Publishing Target to serializ for</param>
            <returns>Xml content generate for the specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see></returns>
            <remarks>
            <para>
            The generate content is the standard reference.xml content, with SiteBaseUrl attribute value set from the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>'s
            <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.BaseUrl">Base Url</see> setting value.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISite.SerializeForIncrementalPublishing(Ingeniux.CMS.IPublishingTarget,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Incrementally produces XML serialization for a specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>. This method generates the content
            of published reference.xml for Dynamic Site Server.
            </summary>
            <param name="pubTarget">The Publishing Target to serialize for</param>
            <param name="pagesToPublish">The dictionary of page ids and version numbers to update</param>
            <returns>Xml content generate for the specific <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see></returns>
            <remarks>
            <para>
            The generate content is the standard reference.xml content, with SiteBaseUrl attribute value set from the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>'s
            <see cref="P:Ingeniux.CMS.IStructuredUrlSettings.BaseUrl">Base Url</see> setting value.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISite.GetEmailTemplate(Ingeniux.CMS.IUser,System.String)">
            <summary>
            Retrieves the email template for a specific <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
            <param name="user">The User to retrieve email template for. This determines which language the form of the email template to bring back</param>
            <param name="templateFileName">The xml file name of the template, name with extension only</param>
            <returns>The email template as XML document, in the language that the <see cref="T:Ingeniux.CMS.IUser">User</see> can read or write</returns>
            <remarks>
            <para>
            All email templates are stored at "App_Data/xml/custom/emailNotifications" folder, grouped by <see cref="T:Ingeniux.CMS.ILocale">Locale</see> region codes.
            </para>
            <example>
            The English version of Workflow Notification Email Template is at "App_Data\xml\Custom\emailNotifications\en-us\workflowNotifications.xml".
            </example>
            <para>
            The default language to use is alway "en-us". So if the <see cref="T:Ingeniux.CMS.IUser">User</see> is null, or the User can read or write in "en-us", the "en-us" version
            will be returned.
            </para>
            <para>
            If <see cref="T:Ingeniux.CMS.IUser">User</see> cannot read or write in "en-us", but there no languages for what this User can read or write, then "en-us" version is still used.
            If the "en-us" version of template file doesn't exist, we will assume this is a Workflow Email to use the embedded Workflow Email Template, that is written in English.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISite.SiteVersion">
            <summary>
            Gets the Version information of the Site Instance. It is the version of the site's assemblies in "bin" folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.VersionsLimit">
            <summary>
            Gets/sets the limit of <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see> to be kept on each <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            Older <see cref="T:Ingeniux.CMS.IPageVersion">Page Versions</see> are automatically removed from Content Store if this settings is set.
            </summary>
            <remarks>
            <para>
            By default, we keep 10 <see cref="T:Ingeniux.CMS.IPageVersion">Versions</see> each <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISite.CustomTabsConfig">
            <summary>
            Gets the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see>'s Custom Tabs configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.TinyMceConfig">
            <summary>
            Gets the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see>'s XHTML editor configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.ToolbarConfig">
            <summary>
            Gets the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see>'s CMS top toolbar configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.TreeMenuConfig">
            <summary>
            Gets the <see cref="P:Ingeniux.CMS.IUserSession.OperatingUser">Operating User</see>'s Site Tree context menu configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.Settings">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.ISettings">Common CMS settings</see>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.WorldViewSettings">
            <summary>
            Gets the settings on WorldView features
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISite.XmlDirectoryPath">
            <summary>
            Gets the full path of "App_Data/xml" folder of the Site Instance
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Site.is64Bit">
            <summary>
            Tells whether the local machine is 64 bit or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.GetSoftwareRegPath">
            <summary>
            Gets the software registry path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.PagesAssignedToUserCount(Ingeniux.CMS.IUser)">
            <summary>
            Gets the count of pages assigned to given user
            </summary>
            <returns>Users count</returns>
            <remarks>The count doesn't include pages assigned to groups the User belong to.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.Site.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">
            <summary>
            Copy page to another location. This action doesn't need to be carried out within the same UserUpdateSession
            of getting the source page
            </summary>
            <param name="srcPage"></param>
            <param name="tgtParentPage"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.MovePage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">
            <summary>
            Move page to another location. This action must be carried out within the same UserUpdateSession
            of getting the source page.
            </summary>
            <param name="srcPage"></param>
            <param name="tgtParentPage"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.RootPages(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Root page will include recycle folder. It will show up at the end on Hierarchy value.
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.CopyRegionRootPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,Ingeniux.CMS.ILocale)">
            <summary>
            Copies the page specified by the page parameter to be a
            child of the page specified by the parent paremeter, and establishes the lingual mapping between the two pages:
            source page as master, new page as clone. Also, makes the target root a lingual root.
            </summary>
            <param name="page"></param>
            <param name="parent"></param>
            <param name="copyType"></param>
            <param name="targetLocale"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.Serialize(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget})">
            <summary>
            Generate reference file for backward compatibilities
            </summary>
            <param name="targets">selection of targets to serialize marked status from</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Site.GetAllDescendantsForPage(Ingeniux.CMS.IPage)">
            <summary>
            If to do anything with the returned page, must open an write session first
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumPublishingStepType">
            <summary>
            The list of steps that a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> goes through
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.BUILD_URL_MAP_STEP">
            <summary>
            The step to build <see cref="T:Ingeniux.CMS.IUrlMap">URL Map</see> and urlmap.xml
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.DELETE_PUB_FOLDER_STEP">
            <summary>
            The step to delete content in the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_PREBUILT_STEP">
            <summary>
            The step to copy assets from the PreBuilt folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_IMAGES_STEP">
            <summary>
            The step to copy assets from the Images folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_DOCUMENTS_STEP">
            <summary>
            The step to copy assets from the Documents folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_STYLESHEETS_STEP">
            <summary>
            The step to copy <see cref="T:Ingeniux.CMS.IStylesheet">XSLT Stylesheet</see> files
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_SETTINGS_STEP">
            <summary>
            The step to generate and copy settings files
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_MEDIA_STEP">
            <summary>
            The step to copy assets from the Media folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.COPY_ERROR_STEP">
            <summary>
            The step to copy any files from the Errors folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumPublishingStepType.PUBLISHING_STEP">
            <summary>
            The step to publish individual <see cref="T:Ingeniux.CMS.IPage">Pages</see>
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumStepUpdateType">
            <summary>
            The list of status on how a <see cref="T:Ingeniux.CMS.IStep">Step</see> is completed in a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumStepUpdateType.COMPLETE">
            <summary>
            The <see cref="T:Ingeniux.CMS.IStep">Step</see> completed successfully.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumStepUpdateType.COMPLETE_WITH_ERROR">
            <summary>
            The <see cref="T:Ingeniux.CMS.IStep">Step</see> is done, but encountered errors during execution.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumActionType">
            <summary>
            The list of <see cref="T:Ingeniux.CMS.ITransition">Workflow Transition</see>'s <see cref="T:Ingeniux.CMS.IAction">Actions</see> types
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_MARK_FOR_PUBLISH">
            <summary>
            <see cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)">Marks</see> the <see cref="T:Ingeniux.CMS.IPage">Page</see> for publish.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_UNMARK_FOR_PUBLISH">
            <summary>
            <see cref="M:Ingeniux.CMS.IPublishingTarget.MarkPageForPublish(Ingeniux.CMS.IPage,System.Boolean,System.Int32)">Unmarks</see> the <see cref="T:Ingeniux.CMS.IPage">Page</see> for publish.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_CHECKIN">
            <summary>
            <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">Checks in</see> the <see cref="T:Ingeniux.CMS.IPage">Page.</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_CHECKOUT">
            <summary>
            <see cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)">Checks out</see> the <see cref="T:Ingeniux.CMS.IPage">Page.</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_REPUBLISH">
            <summary>
            Incrementally <see cref="M:Ingeniux.CMS.IPublishingTarget.RepublishPage(Ingeniux.CMS.IPage,System.Boolean,System.Boolean,System.Boolean)">Publishes</see> the <see cref="T:Ingeniux.CMS.IPage">Page</see> itself.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_CUSTOM">
            <summary>
            Performs a custom workflow action whose type is specified in the "ProgId" attribute value. The type must inherit the <see cref="T:Ingeniux.CMS.ICustomWorkflowAction">ICustomWorkflowAction</see> interface.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_GROUP_NOTIFICATION_MAIL">
            <summary>
            Sends a <see cref="T:Ingeniux.CMS.ITransition">Transition</see> notification email to all members of the <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> associated with the target 
            <see cref="T:Ingeniux.CMS.IWorkState">Workstate</see>. 
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_EXTERNAL_CLIENT">
            <summary>
            Brings an additional user interface as pop-up, before or after the <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> <see cref="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">Advances</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_SET_LIFETIME_ATTRIBUTES">
            <summary>
            Sets a <see cref="T:Ingeniux.CMS.IPage">Page</see>'s lifecycle. Beyond its lifecycle, a <see cref="T:Ingeniux.CMS.IPage">Page</see> is not included in runtime publishes and navigations.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_BRIDGE">
            <summary>
            <see cref="M:Ingeniux.CMS.IPage.RemoveFromWorkflow">Removes</see> the <see cref="T:Ingeniux.CMS.IPage">Page</see> from its current <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see> and 
            <see cref="M:Ingeniux.CMS.IPage.AddToWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IUser)">Add</see> it to another <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumActionType.IGX_ACTION_REVERT">
            <summary>
            Changes the Marked Version of the <see cref="T:Ingeniux.CMS.IPage">Page</see> on a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to the 
            <see cref="T:Ingeniux.CMS.IPage">Page</see>'s previous <see cref="T:Ingeniux.CMS.IPageVersion">Version</see>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumElementType">
            <summary>
            The list of field types on a <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ATTRIBUTE">
            <summary>
            Attribute
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ELEMENT_TEXT">
            <summary>
            Text element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ELEMENT_CDATA">
            <summary>
            DHTML/XHTML element with content wrapped in CDATA
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_COMPONENT">
            <summary>
            Field that brings in content from a component (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LINK">
            <summary>
            Fields that bring in extracted content from one <see cref="T:Ingeniux.CMS.IPage">Page</see> to another pointing to an asset path or external URL (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_INSERT">
            <summary>
            Field that brings in content from either a local file to an external URL (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_NAVIGATION">
            <summary>
            Field that brings in <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are structurally related to the <see cref="T:Ingeniux.CMS.IPage">Page</see> in which the field resides (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_COM_EXECUTE">
            <summary>
            Field that brings in structured content by invoking method on a COM object (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_COBRAND">
            <summary>
            xPower element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_COBRAND_GROUP">
            <summary>
            xPower element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_JAVA_EXECUTE">
            <summary>
            Field that brings in structured content by invoking a Java object (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_SCRIPT">
            <summary>
            Field that brings in structured content by invoking a Microsoft JScript fragment (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_CONTAINER_NAVIGATION">
            <summary>
            xPower element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_BOOLEAN">
            <summary>
            Field that stores a true/false value
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_PASSWORD">
            <summary>
            Field that stores a text value that has be encrypted (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_GROUP_START">
            <summary>
            Field that groups other types of fields together (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_GROUP_END">
            <summary>
            Field that marks the end of a group (for schema use only)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LIST">
            <summary>
            Field that provides a collection of single fields with same name, label, and field type (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_TAXONOMYNAVIGATION">
            <summary>
            Field that brings in <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are related via <see cref="T:Ingeniux.CMS.ICategoryNode">Category</see> associations to the <see cref="T:Ingeniux.CMS.IPage">Page</see> in which this field resides
            (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_REFERENCES">
            <summary>
            Field that brings in <see cref="T:Ingeniux.CMS.IPage">Pages</see> that are related via crossreferences to the <see cref="T:Ingeniux.CMS.IPage">Page</see> in which this field resides (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LINKSET">
            <summary>
            Field that brings extracted content from multiple <see cref="T:Ingeniux.CMS.IPage">Pages</see> (xPower element)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ENUMERATION">
            <summary>
            Field that provides a list of choices for a single selection
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_DATE">
            <summary>
            Field that stores a UTC <see cref="T:System.DateTime">DateTime</see> value as a string
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LOCAL_DATE">
            <summary>
            Field that stores a local <see cref="T:System.DateTime">DateTime</see> value as a string that keeps only the Date information
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LOCAL_TIME">
            <summary>
            Field that stores a local <see cref="T:System.DateTime">DateTime</see> value as a string that keeps only the Time information
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_MULTI_SELECT">
            <summary>
            Field that provides a list of choices for multiple selections
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_IMAGE">
            <summary>
            Field that refers to an Image asset
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_MEDIA">
            <summary>
            Field that refers to an Media asset
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_DOCUMENT">
            <summary>
            Field that refers to a Document asset
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementType.IGX_DYNAMIC_EXECUTE">
            <summary>
            Field that brings in structured content by invoking a .NET object, inherits the "IDynamicExecuteComponent" interface from the RTAPI  (xPower element)
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumLinkElementType">
            <summary>
            The list of <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_LINK">Link</see> types
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLinkElementType.IGX_INTERNAL">
            <summary>
            Link to another <see cref="T:Ingeniux.CMS.IPage">Page</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLinkElementType.IGX_EXTERNAL">
            <summary>
            Link to an external URL
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLinkElementType.IGX_DOCUMENT">
            <summary>
            Link to a document asset
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumSystemAttributes">
            <summary>
            The list of system-level properties on a <see cref="T:Ingeniux.CMS.IPage">Page</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_LAST_CHANGED_BY">
            <summary>
            The <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> of the <see cref="T:Ingeniux.CMS.IUser">User</see> who last <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">Checked in</see> the 
            <see cref="T:Ingeniux.CMS.IPage">Page</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_LAST_CHANGED_DATE">
            <summary>
            The <see cref="T:System.DateTime">Time</see> when the <see cref="T:Ingeniux.CMS.IPage">Page</see> was last <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">Checked in</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_CREATED_BY">
            <summary>
            The <see cref="P:Ingeniux.CMS.IReadonlyUser.UserId">User ID</see> of the <see cref="T:Ingeniux.CMS.IUser">User</see> that created this <see cref="T:Ingeniux.CMS.IPage">Page</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_CREATED_DATE">
            <summary>
            The <see cref="T:System.DateTime">Time</see> when the <see cref="T:Ingeniux.CMS.IPage">Page</see> was created
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_START_DATE">
            <summary>
            After this <see cref="T:System.DateTime">Time</see>, the <see cref="T:Ingeniux.CMS.IPage">Page</see> will be included in Navigations, Taxonomy Navigations, References Navigations, Links and Linksets
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_END_DATE">
            <summary>
            After this <see cref="T:System.DateTime">Time</see>, the <see cref="T:Ingeniux.CMS.IPage">Page</see> will be excluded from Navigations, Taxonomy Navigations, References Navigations, Links and Linksets
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_EXPAND_ON_PUBLISH">
            <summary>
            Whether the <see cref="T:Ingeniux.CMS.IPage">Page</see> will be expanded during <see cref="M:Ingeniux.CMS.IPublishingTarget.Publish(System.Boolean,System.Boolean)">Publish</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_PUBLISH_AS">
            <summary>
            The name of the additional file the <see cref="T:Ingeniux.CMS.IPage">Page</see> will be published as 
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_AUTHOR">
            <summary>
            same as <see cref="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_CREATED_BY">IGX_CREATED_BY</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_LAST_PUBLISHED_DATE">
            <summary>
            The <see cref="T:System.DateTime">Time</see> when the Page was last published
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemAttributes.IGX_RENDER_ON_PUBLISH">
            <summary>
            Whether to expand and XSLT transform the <see cref="T:Ingeniux.CMS.IPage">Page</see> during publish
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumCopyActions">
            <summary>
            The list of positions to place on the site tree when moving or copying a <see cref="T:Ingeniux.CMS.IPage">Page</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumCopyActions.IGX_MAKE_CHILD">
            <summary>
            Place as child of the target node.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumCopyActions.IGX_INSERT_BEFORE">
            <summary>
            Place before the target node.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumCopyActions.IGX_INSERT_AFTER">
            <summary>
            Place after the target node.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumUserRight">
            <summary>
            The list of permissions in the first section of <see cref="T:Ingeniux.CMS.IUserRights">UserRights</see>
            </summary>
            <remarks>
            User rights enum values are a set of flags
            </remarks>
            <seealso cref="T:Ingeniux.CMS.Enums.EnumUserRightTwo"/>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_NONE">
            <summary>
            No rights in this section
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_EDIT">
            <summary>
            Allowed to make changes to <see cref="T:Ingeniux.CMS.IPage">Pages</see>' content and save them. This permission also impacts
            making and saving changes to a page's <see cref="T:Ingeniux.CMS.IPageCreationRule">PCR</see> and security settings.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_OTHERS">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">check in</see> <see cref="T:Ingeniux.CMS.IPage">Pages</see> assigned to other <see cref="T:Ingeniux.CMS.IUser">Users</see> and <see cref="T:Ingeniux.CMS.IUserGroup">Groups</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.ISite.RemovePage(Ingeniux.CMS.IPage@)">delete pages</see> from the content store.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MARK">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPublishingTarget.MarkedPages(System.Int32@,System.Int32,System.Int32)">mark and unmark pages</see> for publish.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_PUBLISH">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPublishingTarget.Publish(System.Boolean,System.Boolean)">publish pages</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ADMIN">
            <summary>
            Allowed to perform administrative duties.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ROLLBACK">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPage.Rollback">roll back a page</see> to its previous version.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_ASSIGNMENT">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPage.AssignUser(Ingeniux.CMS.IUser,System.String)">assign pages to a user</see> or <see cref="M:Ingeniux.CMS.IPage.AssignGroup(Ingeniux.CMS.IUserGroup,System.String)">to a group</see>
            that was originally assigned to another <see cref="T:Ingeniux.CMS.IUser">User</see>.
            This permission also impacts on <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">Check-in of Pages</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_WORKFLOW">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPage.AddToWorkflow(Ingeniux.CMS.IWorkflowDefinition,Ingeniux.CMS.IUser)">add pages</see> to, or <see cref="M:Ingeniux.CMS.IPage.RemoveFromWorkflow">remove pages</see> from. <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_REORDER">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.ISite.MovePage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">Move</see> and <see cref="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">Copy</see> <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_TRANSITION">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IWorkflow.Advance(Ingeniux.CMS.ITransition,System.String,Ingeniux.CMS.IUser,System.Boolean,System.Boolean)">Advance</see> a <see cref="T:Ingeniux.CMS.IPage">Page</see> in <see cref="T:Ingeniux.CMS.IWorkflow">Workflow</see>,
            when the <see cref="T:Ingeniux.CMS.IPage">Page</see> is not assigned to the operating <see cref="T:Ingeniux.CMS.IUser">User</see>, or the operating 
            <see cref="T:Ingeniux.CMS.IUser">User</see> doesn't belong to the <see cref="T:Ingeniux.CMS.IPage">Page</see>'s
            <see cref="P:Ingeniux.CMS.IPage.AssignedGroup">Assigned Group</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_TREE">
            <summary>
            Allows the site tree to be visible to the operating <see cref="T:Ingeniux.CMS.IUser">User</see> on the Ingeniux CMS client application.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MAIN">
            <summary>
            Refers to using the Admin ActiveX client before version 7.5.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CREATE">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.ISite.CreatePage(Ingeniux.CMS.ISchema,System.String,Ingeniux.CMS.IPage,System.Boolean,System.Boolean)">create new Pages</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_PAGE_TYPES">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.ISite.CreatePage(Ingeniux.CMS.ISchema,System.String,Ingeniux.CMS.IPage,System.Boolean,System.Boolean)">Create Pages</see> with <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> directly, 
            in addition to with <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CHECKIN_CHECKOUT">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPage.CheckIn(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPublishingTarget},System.Boolean)">check in</see> and <see cref="M:Ingeniux.CMS.IPage.CheckOut(System.Boolean)">check out</see> <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_PUBLISH_INCREMENTAL">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IPublishingTarget.Publish(System.Boolean,System.Boolean)">Publish</see> changed pages and assets only, without a cleanup action on the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">target</see> folder.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_EDIT_STYLESHEET">
            <summary>
            Allowed to change the "Layout" field value on the CMS client edit form. This permission decides if the "Layout" field is enabled or disabled when a Page is checked out to the operating <see cref="T:Ingeniux.CMS.IUser">User</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_REORDER_ASSIGNED_OTHERS">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.ISite.MovePage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)">Move Pages</see> that are <see cref="P:Ingeniux.CMS.IPage.AssignedUser">assigned to other users</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_EDIT_PASSWORDS">
            <summary>
            Allowed to make changes on a Password element. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_CATEGORIZE">
            <summary>
            Allowed to apply <see cref="T:Ingeniux.CMS.ICategoryNode">Categories</see> on <see cref="T:Ingeniux.CMS.IPage">Pages</see>. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">
            <summary>
            Allowed to manage the <see cref="T:Ingeniux.CMS.ITaxonomyManager">Taxonomy System</see> without being an <see cref="P:Ingeniux.CMS.IReadonlyUser.IsAdministrator">Administrator</see>. 
            This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_VIEW_XML_TAB">
            <summary>
            Allowed to view the XML tab. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_VIEW_HIDDEN_ELEMENTS">
            <summary>
            Allowed to view the hidden fields on Edit Form. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_ASSET_SECURITY">
            <summary>
            Allowed to manage <see cref="T:Ingeniux.CMS.IAssetSecurityManager">Assets security</see>, on the File Browser dialog. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_DELETE_ASSET_FILES">
            <summary>
            Allowed delete or overwrite asset files on the File Browser dialog. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_ASSET_FOLDERS">
            <summary>
            Allowed to add and remove asset folders. This permission is user interface–specific..
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_LOCALIZE_SITE_DEFINITIONS">
            <summary>
            Allowed to see the Localization app on the Administration pane, which is used to translate <see cref="T:Ingeniux.CMS.ISchema">Schemas</see>,
            <see cref="T:Ingeniux.CMS.IPageCreationRule">Page Creation Rules</see>, <see cref="T:Ingeniux.CMS.IWorkflowDefinition">Workflow Definitions</see>
            and <see cref="T:Ingeniux.CMS.IWorkState">Workstates</see>. This permission is user interface–specific..
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_SET_PAGE_LOCALE">
            <summary>
            Allowed to see the Language tab on the Page Properties dialog and <see cref="P:Ingeniux.CMS.IPage.Locale">set Page Locale</see>. This permission is user interface–specific.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumUserRightTwo">
            <summary>
            The list of permissions in the second section of <see cref="T:Ingeniux.CMS.IUserRights">UserRights</see>.
            </summary>
            <remarks>
            User rights enum values are sets of flags.
            </remarks>
            <seealso cref="T:Ingeniux.CMS.Enums.EnumUserRight"/>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_TWO_NONE">
            <summary>
            No rights in this section.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_VIEW_EDIT_FORM">
            <summary>
            Allowed to see the Edit tab. This permission is user interface–specific..
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_VIEW_HISTORY">
            <summary>
            Allowed to see the History tab. This permission is user interface–specific..
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_VIEW_SEARCH">
            <summary>
            Allowed to see the Search pane. This permission is user interface–specific..
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_VIEW_APPS">
            <summary>
            Allowed to see the App pane. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_ADD_WORD_TO_DICTIONARY">
            <summary>
            Allowed to add custom words to spell-checking dictionaries. 
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_PUBLISH_DUPBLICATES">
            <summary>
            Allowed to repeatedly <see cref="M:Ingeniux.CMS.IPublishingTarget.RepublishPage(Ingeniux.CMS.IPage,System.Boolean,System.Boolean,System.Boolean)">Publish</see> to the same <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>
            with the same <see cref="T:Ingeniux.CMS.IPage">Root Page</see> and same publishing type (incremental or full).
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_MANAGE_SCHEMA">
            <summary>
            Allowed to manage <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> without being an administrator.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_EDIT_ASSETS">
            <summary>
            Allowed to edit an individual image via CMS image-editing features. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_EMBED_UNEMBED_COMPONENTS">
            <summary>
            Allowed to <see cref="M:Ingeniux.CMS.IComponentElement.Embed(Ingeniux.CMS.IPage)">Embed</see> and <see cref="M:Ingeniux.CMS.IComponentElement.RemoveEmbed">Unembed</see> a <see cref="T:Ingeniux.CMS.IComponentElement">Component</see>.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_MANAGE_CONTENT_UNITS">
            <summary>
            Allowed to add, remove, and update <see cref="T:Ingeniux.CMS.Presentation.IContentUnit">Content Units</see> in the PageBuidler system.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_BUILD_PAGE_PRESENTATION">
            <summary>
            Allowed to use the "Design" menu item and its subitems on the Page Preview menu. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_MANAGE_PRESENTATION_LAYOUT">
            <summary>
            Allowed to add and remove rows and columns and reorder rows. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_ADD_REMOVE_CONTENT_UNIT_INSTANCES">
            <summary>
            Allowed to drop content units into columns and remove already-placed content unit instances. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_REORDER_CONTENT_UNIT_INSTANCES">
            <summary>
            Allowed to move placed content unit instances. This permission is user interface–specific.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUserRightTwo.IGX_USER_RIGHT_CAN_CREATE_MANAGE_PAGE_PRESENTATIONS">
            <summary>
            Allowed to create new presentations and manage existing presentations. This permission is user interface–specific..
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumTrigger">
            <summary>
            The list of trigger types; these define when the trigger is executed and are related to an <see cref="T:Ingeniux.CMS.IEntity">Entity</see>'s livecycle.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTrigger.IGX_ONCREATE">
            <summary>
            Trigger is executed on creation of an <see cref="T:Ingeniux.CMS.IEntity">Entity.</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTrigger.IGX_ONCHANGE">
            <summary>
            Trigger is executed on change of an <see cref="T:Ingeniux.CMS.IEntity">Entity.</see> 
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumElementContentType">
            <summary>
            The list of element types for use within the XML-Data Reduced (XDR) schema (partially implemented)
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementContentType.textOnly">
            <summary>
            The element can contain only text, not elements.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumElementContentType.eltOnly">
            <summary>
            The element can contain only the specified elements. It cannot contain any free text.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumTinyMceSettingsType">
            <summary>
            The list of setting types for the TinyMCE XHTML editor
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.Plugin">
            <summary>
            Settings for a plugin
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.Button">
            <summary>
            Settings for a toolbar button
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.BlockFormat">
            <summary>
            Settings for an accepted block element name (e.g., "p" or "div")
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.Fonts">
            <summary>
            Settings for a font choice
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.FontSizes">
            <summary>
            Settings for font sizes
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.TableCssClass">
            <summary>
            Settings for an available CSS class name for the Table element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.LinkCssClass">
            <summary>
            Settings for an available css class name for a Link element
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumTinyMceSettingsType.ImageCss">
            <summary>
            Settings for an availabel css class name for a IMG element
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumIgxSmartPasteValues">
            <summary>
            The list of pasting types for the TinyMCE XHTML editor
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumIgxSmartPasteValues.prompt">
            <summary>
            Prompts for pasting type.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumIgxSmartPasteValues.source">
            <summary>
            Pastes with source formatting.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumIgxSmartPasteValues.destination">
            <summary>
            Pastes matching target formatting.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumIgxSmartPasteValues.text">
            <summary>
            Pastes as plain text, stripping all formatting.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAssetSecurityEntry">
            <summary>
            Represents a security permission entry for an asset file or folder.
            Holds a collection of asset node-level permissions.
            </summary>
            <remarks>
            <para>
            Permissions set at the file level always override the permissions of the folder the file is in.
            </para>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.IAssetSecurityManager"/>
            <seealso cref="T:Ingeniux.CMS.INodeLevelPermission"/>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityEntry.Permission(Ingeniux.CMS.IUserGroup)">
            <summary>
            Retrieves the highest permission for a given <see cref="T:Ingeniux.CMS.IUserGroup">UserGroup</see>.
            </summary>
            <param name="group">The group that will receive the permission</param>
            <returns>The highest permission level for the given <see cref="T:Ingeniux.CMS.IUserGroup">Group</see></returns>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityEntry.Permission(Ingeniux.CMS.IUser)">
            <summary>
            Retrieves the highest permission for a given user. The permission is highest of all groups this <see cref="T:Ingeniux.CMS.IUser">User</see> belongs to, including the Everyone group.
            </summary>
            <param name="user">The user for whom to retrieve permissions</param>
            <returns>Highest permission level for the given <see cref="T:Ingeniux.CMS.IUser">User</see></returns>
        </member>
        <member name="P:Ingeniux.CMS.IAssetSecurityEntry.Permissions">
            <summary>
            Gets and sets permissions for this security entry
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAssetSecurityEntry.AssetPath">
            <summary>
            Gets the path of the asset for the security entry.
            </summary>
            <remarks>The path is relative to the XML folder</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAssetSecurityEntry.AssetType">
            <summary>
            Gets the type of asset, either a file or a folder, for this security entry.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAssetSecurityManager">
            <summary>
            Represents the manager object that manages asset security entries.
            </summary>
            <remarks>
            <para>Like all manager objects, instances of this manager will be retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object. The manager object only works within that session object.</para>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	IAssetSecurityManager assetSecurityManager = session.AssetSecurityManager;
            	...
            }
            </code>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.IAssetSecurityEntry"/>
            <seealso cref="T:Ingeniux.CMS.IUserSession"/>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.Permission(System.String,Ingeniux.CMS.Enums.EnumAssetType,Ingeniux.CMS.IUserGroup)">
            <summary>
            For a specific UserGroup, retrieve the highest permission for a given asset path 
            </summary>
            <param name="assetPath">The path of asset whose permission information you want to retrieve. The path must be relative to XML folder and cannot start with a "\" character.</param>
            <param name="assetType">The type of asset in the path</param>
            <param name="group">The UserGroup whose permission information you want to retrieve</param>
            <returns>The highest permission for given UserGroup</returns>
            <seealso cref="!:"/>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.Permission(System.String,Ingeniux.CMS.Enums.EnumAssetType,Ingeniux.CMS.IUser)">
            <summary>
            For a specific User, retrieve the highest permission for a given asset path. The permission is highest of all groups to which the user belongs, including the Everyone group.
            </summary>
            <param name="assetPath">The path of asset whose permission information you want to achieve. The path must be relative to the XML folder and cannot start with a "\" character.</param>
            <param name="assetType">The type of asset in the path</param>
            <param name="group">The User whose permission information you want to retrieve</param>
            <returns>The highest permission for given User</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.Permissions(System.String,Ingeniux.CMS.Enums.EnumAssetType,System.Boolean@)">
            <summary>
            Retrieves all permission entries for a given asset path
            </summary>
            <param name="assetPath">The path of asset whose permission information you want to retrieve. The path must be relative to the XML folder and cannot start a "\" character.</param>
            <param name="assetType">The type of asset in the path</param>
            <param name="isInherited">An output parameter that is true if the permissions returned are inherited from the parent folder</param>
            <returns>Collection of permissions for the given asset path</returns>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.RenameAsset(System.String,System.String,Ingeniux.CMS.Enums.EnumAssetType)">
            <summary>
            Carries out security entry updates when asset path is renamed or moved
            </summary>
            <param name="assetPathOld">The old asset path</param>
            <param name="assetPathNew">The new asset path</param>
            <param name="assetType">The type of asset in the path</param>
            <remarks>This method should be called when trying to programatically change asset paths. It is not automatically called when performing manual file system changes.
            However, if an asset path is manually changed, its access security entry will not longer apply. The newly updated asset path instead use inherited security, or full access for the Everyone group.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.RemovePermission(System.String,Ingeniux.CMS.Enums.EnumAssetType)">
            <summary>
            Removes all permission entries for given asset path.
            </summary>
            <param name="assetPath">The path of asset whose permissions information you want to remove. This path must be relative to the XML folder and cannot start with a "\" character.</param>
            <param name="assetType">The type of asset in the path</param>
            <returns>True if permission is removed, false if permission is not found</returns>
            <remarks>The given asset path uses inherited security, or full access for the Everyone group.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IAssetSecurityManager.SetPermission(System.String,Ingeniux.CMS.Enums.EnumAssetType,System.Collections.Generic.IEnumerable{Ingeniux.CMS.IAssetNodeLevelPermission})">
            <summary>
            Sets permission for given asset path.
            </summary>
            <param name="assetPath">The path of asset for which you want to set permissions. This path must be relative to the XML folder and cannot start with a "\" character.</param>
            <param name="assetType">The type of asset in the path</param>
            <param name="permissions">The permissions to set to the security entry for the given path</param>
            <remarks>If the security entry doesn't exist for the given asset type, a new security entry will be created.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.PCRDescriptor.AddEntry(Ingeniux.CMS.IPageCreationRule,System.Boolean)">
            <summary>
            Add a new PCR Descriptor entry. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="rule"></param>
            <param name="dontIncludeDescendants"></param>
        </member>
        <member name="M:Ingeniux.CMS.PCRDescriptor.RemoveEntry(Ingeniux.CMS.IPCREntry)">
            <summary>
            Remove a PCR Descriptor entry. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.PCRDescriptor.RemoveEntry(Ingeniux.CMS.IPageCreationRule)">
            <summary>
            Remove a PCR Descriptor entry by the rule. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.SecurityDescriptor">
            <summary>
            The Security Descriptor entry: Each is corresponding to a root page and a list of groups and their access type
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SecurityDescriptor.AddEntry(Ingeniux.CMS.IUserGroup,Ingeniux.CMS.Enums.EnumNodeLevelPermission)">
            <summary>
            Add a new security descriptor entry. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="group"></param>
            <param name="permission"></param>
        </member>
        <member name="M:Ingeniux.CMS.SecurityDescriptor.RemoveEntry(Ingeniux.CMS.INodeLevelPermission)">
            <summary>
            Remove a security descriptor entry. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SecurityDescriptor.RemoveEntry(Ingeniux.CMS.IUserGroup)">
            <summary>
            Remove a security descriptor entry by user group. If working on a existing item,
            make sure the item is retrieve from the same session.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SecurityDescriptor.AllowUser(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)">
            <summary>
            Check if security descriptor grant user a specific permission
            </summary>
            <param name="user"></param>
            <param name="permission"></param>
            <returns>True of permission granted</returns>
        </member>
        <member name="M:Ingeniux.CMS.SecurityDescriptorsManager.Descriptor(Ingeniux.CMS.IPage)">
            <summary>
            Get discriptor by root page. If page is not root page of a descriptor, will return null.
            </summary>
            <param name="page">Root Page that descriptor is applied</param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IEmailer">
            <summary>
            Represents an SMTP utility that provides email functionality within the CSAPI.
            </summary>
            <remarks>Each Emailer instance corresponds to one SMTP server. If the same SMTP server is used to send all emails, only one instance of Emailer is needed.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IEmailer.SendMail(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
            <param name="from">Sender address</param>
            <param name="to">Recipient addresses</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <param name="htmlMail">Specifies whether the email body is HTML</param>
            <remarks>Recipient addresses can be a semicolon-delimited list (";").</remarks>
            <seealso cref="!:Ingeniux.CMS.Ingeniux.CMS.IEmailer.SendMailCC"/>
        </member>
        <member name="M:Ingeniux.CMS.IEmailer.SendMailCC(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email, with the ability to "CC" and "BCC" other recipients.
            </summary>
            <param name="from">Sender address</param>
            <param name="to">Recipient addresses</param>
            <param name="cc">Addresses to be CCed</param>
            <param name="bcc">Addresses to be BCCed</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <param name="htmlMail">Specifies whether the email body is HTML</param>
            <param name="allowSendToCurrentUser">Specifies whether to allow the email to be sent to the Current User. Default false.</param>
            <remarks>Recipient addresses can be a semicolon-delimited list (";").</remarks>
            <seealso cref="!:Ingeniux.CMS.Ingeniux.CMS.IEmailer.SendMail"/>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.ServerAddress">
            <summary>
            Gets and sets the SMTP server address.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.Port">
            <summary>
            Gets sets the SMTP server port. The default value is 20.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.DeliveryMethod">
            <summary>
            Gets and sets how the SMTP mail is delivered.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.UseSSL">
            <summary>
            Gets and sets whether mail is sent securely via SSL.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.AuthenticationType">
            <summary>
            Gets and sets the type of authentication for the SMTP server.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.UserName">
            <summary>
            Gets and sets the UserName to authenticate against the SMTP server. Ignored when using <see cref="F:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType.ANONYMOUS">Anonymous</see> authentication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IEmailer.Password">
            <summary>
            Gets and sets the Password to authenticate against the SMTP server. Ignored when using <see cref="F:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType.ANONYMOUS">Anonymous</see> authentication.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IFinalizeCloneInfo">
            <summary>
            Represents the information of a page's <see cref="T:Ingeniux.CMS.ILingualPageVersionMap">Lingual Version Map</see>'s finalization.
            This information is only be available when the lingual version map is <see cref="P:Ingeniux.CMS.ILingualPageVersionMap.Finalized">finalized</see>.
            </summary>
            <remarks>Finalization of lingual map marked that for a specific version of master page, it has an official corresponding version of clone page. This way we will have a clear
            history of when certain version of the page was translated, who approved the translation, and what is the translated clone page's version.</remarks>
            <seealso cref="T:Ingeniux.CMS.ILingualPageVersionMap"/>
        </member>
        <member name="P:Ingeniux.CMS.IFinalizeCloneInfo.ClonePageVersion">
            <summary>
            Gets the version of the clone version for the finalization.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IFinalizeCloneInfo.FinalizationDate">
            <summary>
            Gets the date and time of finalization.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IFinalizeCloneInfo.FinalizationUser">
            <summary>
            Gets the user ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> that performed the finalization
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ILingualMappingManager">
            <summary>
            Represents the manager object that is in charge of lingual mapping between pages. Lingual maps are an essential part
            of the Ingeniux WorldView system
            </summary>
            <remarks>
            <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object. The manager object only works within that session object.</para>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	ILingualMappingManager lingualMappingManager = session.LingualMappingManager;
            	...
            }
            </code>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.ILingualPageMap"/>
            <seealso cref="T:Ingeniux.CMS.IUserSession"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapsByMaster(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves collection of lingual maps for given page. In these maps, the provided page serves the role of master page.
            </summary>
            <param name="page">The master page for which to retrieve lingual maps</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of given page. If page doesn't have any lingual maps, or it is the slave page of a lingual map, returns empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapsByMaster(System.String,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves collection of lingual maps for given page. In these maps, the provided page serves the role of master page.
            </summary>
            <param name="pageId">The master page ID to retrieve lingual maps for</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of given page. If page doesn't have any lingual maps, or it is the slave page of a lingual map, returns empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapsByMasters(System.Collections.Generic.IEnumerable{System.String},System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves collection of lingual maps for given page. In these maps, the provided page serves the role of master page.
            </summary>
            <param name="pageIds">A list master page IDs to retrieve lingual maps for</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of given page. If page doesn't have any lingual maps, or it is the slave page of a lingual map, returns empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)">
            <summary>
            Retrieves a lingual map by a given page, which serves the role of clone in the map.
            </summary>
            <param name="clonePage">The clone page for which to retrieve lingual maps</param>
            <returns>Lingual map of given page as clone. If page doesn't have lingual maps, or it is the master page for all its lingual maps, this method returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapsByMaster(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.CloneMaps(System.Int32@,System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(System.String)">
            <summary>
            Retrieves a lingual map by a given page, which serves the role of clone in the map.
            </summary>
            <param name="clonePageId">The clone page ID for which to retrieve lingual maps</param>
            <returns>Lingual map of the given page as clone. If page doesn't have lingual maps, or it is the master page for all its lingual maps, this method returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapsByMaster(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.CloneMaps(System.Int32@,System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.MapsByClones(System.Collections.Generic.IEnumerable{System.String},System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves collection of lingual maps for given page. In these maps, the provided page serves the role of clone page.
            </summary>
            <param name="pageIds">A list clone page IDs to retrieve master lingual maps for</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of given page. If page doesn't have clone lingual maps, returns empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.LingualMapsByPageUniversal(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all lingual mapped pages associated with a given page. In these maps, the provided page serves the role of either master page or clone page.
            </summary>
            <param name="page">The master page for which to retrieve lingual maps</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of the given page. If the page doesn't have any lingual maps, or if it's the slave page of a lingual map, this method returns an empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.LingualMapsByPageUniversal(System.String,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all lingual mapped pages associated with a given page. In these maps, the provided page serves the role of either master page or clone page.
            </summary>
            <param name="pageId">The master page ID to retrieve lingual maps for</param>
            <param name="count">Outputs total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps of given page. If the page doesn't have any lingual maps, or if it's the slave page of a lingual map, this method returns an empty collection.</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.CloneMaps(System.Int32@,System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves all clone maps, or clone maps of the specified clone page locale.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="clonePageLocale">The clone page locale for which to retrieve maps. If default, returns all maps</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.CloneMaps(System.Int32@,System.String[],System.Int32,System.Int32)">
            <summary>
            Retrieves all clone maps, or clone maps of specified clone page locales.
            </summary>
            <param name="count">Outputs total count of entries</param>
            <param name="clonePageLocales">The clone page locales for which to retrieve maps.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of lingual maps</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.MapByClone(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.AddMap(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)">
            <summary>
            Adds a new lingual map between pages.
            </summary>
            <param name="masterPage">Master page of the map</param>
            <param name="clonePage">Clone page of the map</param>
            <returns>Newly added lingual map</returns>
            <remarks>Master and clone pages cannot not be null, or an exception will be thrown.</remarks>
            <exception cref="T:System.ArgumentException">When either the master page or clone page parameter is null</exception>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMasterMapForPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPages(System.String[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.RemoveMasterMapForPage(Ingeniux.CMS.IPage)">
            <summary>
            Removes the lingual map for a given clone page.
            </summary>
            <param name="clonePage">The clone page to remove lingual map for</param>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.AddMap(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPages(System.String[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPage(Ingeniux.CMS.IPage)">
            <summary>
            Removes all lingual maps for a given page. This method severs all lingual connections to a page.
            </summary>
            <param name="page">Page from which to remove all lingual maps.</param>
            <remarks>This method is called automatically when a page is moved to the recycle folder.</remarks>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.AddMap(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMasterMapForPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPages(System.String[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPages(System.String[])">
            <summary>
            Removes all ligual maps for a collection of pages specified by page ID.
            </summary>
            <param name="pageIds">Array of page IDs for which to remove lingual maps.</param>
            <remarks>Any nonexisting page IDs are ignored.</remarks>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.AddMap(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMasterMapForPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ILingualMappingManager.RemoveMapsForPage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.Map(System.String)">
            <summary>
            Retrieves a lingual map by its unique ID.
            </summary>
            <param name="pageMapId">Lingual map unique ID</param>
            <returns>Lingual map with matching ID. Returns null if ID doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ILingualMappingManager.Map(Ingeniux.CMS.IPage,System.String)">
            <summary>
            Retrieves a lingual map by its master page and target locale.
            </summary>
            <param name="masterPage">Master page of the lingual map</param>
            <param name="targetLocale">Target locale of the lingual map</param>
            <returns>Lingual map with given master page and target locale. Null if no lingual map matches the criteria.</returns>
        </member>
        <member name="T:Ingeniux.CMS.ILingualPageMap">
            <summary>
            Represents a lingual relation between 2 pages. It includes the information of master and clone pages
            unique ids and locales.
            </summary>
            <remarks>When any lingual map is established between 2 pages, both pages cannot change their locale anymore</remarks>
            <seealso cref="T:Ingeniux.CMS.ILingualMappingManager"/>
            <seealso cref="T:Ingeniux.CMS.ILingualPageVersionMap"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualPageMap.VersionMaps">
            <summary>
            Retrieves the history of lingual map between the versions of 2 pages in this Lingual map
            </summary>
            <returns>Collection of version maps</returns>
            <remarks>There will be at least 1 entry in the versions map</remarks>
            <seealso cref="M:Ingeniux.CMS.ILingualPageMap.VersionMapsCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualPageMap.VersionMapsCount">
            <summary>
            Gets the count of version maps.
            </summary>
            <returns>Count of version maps. It will be at least 1</returns>
            <seealso cref="M:Ingeniux.CMS.ILingualPageMap.VersionMaps"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualPageMap.InitializeVersionMap(System.Int32,Ingeniux.CMS.IUser)">
            <summary>
            Create a new version map. This version map will have the Master Page version, but not the Clone Page version.
            </summary>
            <param name="masterPageVersion">Current version number of the master page</param>
            <param name="initUser">The user that officially created this version map</param>
            <returns>Newly created version map in open state</returns>
            <remarks>
            <para>
            This method is called when starting a new translation on the clone page based on master page content update.
            </para>
            <para>Please note that only one open version map is allowed in page map. This method will throw exception is there is a open version map.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When there is an open version map exists</exception>
        </member>
        <member name="M:Ingeniux.CMS.ILingualPageMap.Remove">
            <summary>
            <para>
            Remove this Lingual map. This will sever the lingual tie between 2 pages. 
            </para>
            <para>
            The Clone Page at this point can change its locale again. If the Master Page has no other lingual maps, it can change locale too.
            </para>
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageMap.MasterPageID">
            <summary>
            Gets the Id of Master Page in this map
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageLocale"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageMap.ClonePageID">
            <summary>
            Gets the Id of Clone Page in this map
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageLocale"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageMap.MasterPageLocale">
            <summary>
            Gets the locale of Master Page in this map
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageMap.ClonePageLocale">
            <summary>
            Gets the locale of Clone Page in this map
            </summary>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.ClonePageID"/>
            <seealso cref="P:Ingeniux.CMS.ILingualPageMap.MasterPageLocale"/>
        </member>
        <member name="T:Ingeniux.CMS.ILingualPageVersionMap">
            <summary>
            <para>
            Represents the lingual relationship mapping for specific version of the master page. 
            This object is an entry in <see cref="T:Ingeniux.CMS.ILingualPageMap">LingualPageMap</see>.
            </para>
            <para>
            Localization of web pages starts with the source language page (master page). In the beginning, the source language content is finalized and checked in,
            but there is no translation of this page in the target language.
            This will be the first entry in lingual map of this master page. It has a version for source page, but doesn't have a version for target page yet.
            As translation finishes, this lingual version map is <see cref="P:Ingeniux.CMS.ILingualPageVersionMap.Finalized">finalized</see>. It contains the target language page (clone page)
            version number. At this point, this version map is closed and kept in history of the master page's translations.
            </para>
            </summary>
            <seealso cref="T:Ingeniux.CMS.ILingualPageMap"/>
            <seealso cref="T:Ingeniux.CMS.IFinalizeCloneInfo"/>
            <seealso cref="T:Ingeniux.CMS.Event.CloneVersionMapFinalizationEventArgs"/>
        </member>
        <member name="M:Ingeniux.CMS.ILingualPageVersionMap.FinalizeMap(System.Int32,Ingeniux.CMS.IUser)">
            <summary>
            Finalize this lingual version map with clone page version information.
            </summary>
            <param name="clonePageVersion">The version of the translated clone page</param>
            <param name="finalizeUser">The <see cref="T:Ingeniux.CMS.IUser">User</see> that performed the finalization. This user may or may not be the current operating user.</param>
            <remarks>This method will close the version map and allow its Page map to create a new version map</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.Owner">
            <summary>
            Gets the owner lingual page map. This object is an entry in the owner's version maps collection
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.MasterPageVersion">
            <summary>
            Gets the version of the master page. This entry is created for this specific master page version.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.InitiationDate">
            <summary>
            Gets the date and time when this entry is created.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.InitiationUser">
            <summary>
            Gets the user ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> that created this entry
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.FinalizeInfo">
            <summary>
            Gets the finalization information of this entry. If the translation is not yet finalized, this property is null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ILingualPageVersionMap.Finalized">
            <summary>
            Gets if this entry is finalized. It will only returns True if the <see cref="P:Ingeniux.CMS.ILingualPageVersionMap.FinalizeInfo">FinalizeInfo</see> exists.
            </summary>
        </member>
        <member name="E:Ingeniux.CMS.ILingualPageVersionMap.OnFinalize">
            <summary>
            The event that signals when this lingual version map is finalized. It fires when finalization is confirmed, beform it is saved to the <see cref="T:Ingeniux.CMS.IContentStore"/>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IDevice">
            <summary>
            <para>
            Represents a mobile device-web browser combination with unique UserAgent string.
            A device entry with this UserAgent string can be uniquely identified by Ingeniux CMS' mobile device detection system.
            </para>
            </summary>
            <remarks>This object is for mobile device emulation for page previews.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IDevice.UserAgent">
            <summary>
            Gets the User Agent string in this device/browser combination
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IDeviceBundle">
            <summary>
            Represents a collection of device-browser combinations that share a manufacturer and screen size.
            DeviceBundles are for mobile emulation in page preview only. It has a representative <see cref="T:Ingeniux.CMS.IDevice">Device</see>
            that provides a single user agent string for the emulation. If a page previews correctly with selected bundle, it means the page will display properly on all the devices this bundle includes.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IDevice"/>
            <seealso cref="T:Ingeniux.CMS.IDeviceInfo"/>
            <example>
            Serialization of this object matches the DeviceBundle element of in the MobileDevices.xml file in previous-generation CMS content.
            <code language="xml">
            <![CDATA[
              <DeviceBundle N="iPhone" W="320" H="480" 
            		UA="Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B125 Safari/7534.48.3" RDID="12280-18117-17776-18092">
            	<D>Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.85 (KHTML, like Gecko) Version/5.1 Mobile/9B125 Safari/7534.48.3</D>
              </DeviceBundle>
            ]]>
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.IDeviceInfo"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.Devices">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> included in this bundle, in a paginated format.
            </summary>
            <returns>Collection of <see cref="!:Ingeniux.CMS.IDeviceInf">devices</see> in this bundle.</returns>
            <remarks>A bundle must contain at least one <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see>.</remarks>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.DevicesCount"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.AddDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.RemoveDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Clear"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.DevicesCount">
            <summary>
            Gets count of all <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> in this bundle.
            </summary>
            <returns>Count of devices in collection.</returns>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Devices"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.AddDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.RemoveDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Clear"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.Clear">
            <summary>
            Clears all <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> from this bundle.
            </summary>
            <remarks>Please note that this will not remove the <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">Representative Device</see> from this bundle.</remarks>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Devices"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.DevicesCount"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.AddDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.RemoveDevice(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.AddDevice(System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> to this bundle.
            </summary>
            <param name="deviceId">The ID of the device to add. If the device already existed, do nothing.</param>
            <returns>Newly added device, or the existing device with matching ID</returns>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Devices"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.DevicesCount"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.RemoveDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Clear"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.RemoveDevice(System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> from bundle.
            </summary>
            <param name="device">The device to remove</param>
            <returns>True if device exists in the collection and is not the <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">Representative Device</see>, false if device doesn't exist in the collection.</returns>
            <exception cref="T:System.ArgumentException">When the device's user agent matches the <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">Representative Device</see>'s user agent</exception>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Devices"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.DevicesCount"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.AddDevice(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.Clear"/>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceBundle.SetRepresentativeDevice(Ingeniux.CMS.IDeviceInfo)">
            <summary>
            Sets representative <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> of the bundle.
            </summary>
            <param name="deviceInfo">Device to set as representative</param>
            <remarks>If the <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> doesn't exist in bundle, throws error.</remarks>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> specified doesn't exist in the collection.</exception>
            <seealso cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice"/>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceBundle.ScreenWidth">
            <summary>
            Gets the simulated screen width for browser. All devices in this bundle have the same width.
            </summary>
            <remarks>Screen sizes specified here may not be the actual pixel sizes of the device screen. 
            They are virtual sizes the mobile browser specifies.</remarks>
            <example>
            The iPhone 5's mobile browsers screen dimensions are 320 x 568 px; however, the physical dimensions are 640 x 1136 px.
            </example>
            <seealso cref="P:Ingeniux.CMS.IDeviceBundle.ScreenHeight"/>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceBundle.ScreenHeight">
            <summary>
            Gets the simulated screen height for browser. All devices in this bundle will have the same height.
            </summary>
            <remarks>Screen sizes specified here may not be the actual pixel sizes of the device screen. 
            They are virtual sizes the mobile browser specifies.</remarks>
            <example>
            The iPhone 5's mobile browsers screen dimensions are 320 x 568 px; however, the physical dimensions are 640 x 1136 px.
            </example>
            <seealso cref="P:Ingeniux.CMS.IDeviceBundle.ScreenWidth"/>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> that represents this bundle. This device's user agent is used for mobile preview emulation.
            </summary>
            <remarks>This device cannot be removed from the bundle, but it can be set to another device in the bundle.</remarks>
            <seealso cref="M:Ingeniux.CMS.IDeviceBundle.SetRepresentativeDevice(Ingeniux.CMS.IDeviceInfo)"/>
        </member>
        <member name="M:Ingeniux.CMS.DeviceBundle.Devices">
            <summary>
            Return list of device bundled. The listing is concrete and can be repeated enumerated without worrying about performance.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IDeviceInfo">
            <summary>
            Represents detailed information of a device-browser combination. This information is provided by the Ingeniux CMS mobile detection library
            for administrative user interfaces. It isn't stored in the <see cref="T:Ingeniux.CMS.IDeviceBundle">bundle</see>.
            </summary>
            <remarks>This object is for mobile device emulation for page previews.</remarks>
            <example>
            <para>
            Serialization of this object matches the "D" element of the MobileDevices.xml file in previous-generation CMS content, 
            except the element text is the user agent instead of device ID:
            </para>
            <code language="xml">
            <![CDATA[
            	<D>Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.85 (KHTML, like Gecko) Version/5.1 Mobile/9B125 Safari/7534.48.3</D>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IDeviceInfo.CanBundleWith(Ingeniux.CMS.IDeviceInfo)">
            <summary>
            Checks if this device can be put into the same <see cref="T:Ingeniux.CMS.IDeviceBundle">DeviceBundle</see> as another specified device.
            </summary>
            <param name="device">The device with which to check DeviceBundle compatability.</param>
            <returns>True if this device can be in the same<see cref="T:Ingeniux.CMS.IDeviceBundle">DeviceBundle</see> with specified device, false otherwise.</returns>
            <remarks>
            Only device-browser combinations with same manufacturer and same screen sizes can be bundled together.
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.FullName">
            <summary>
            Gets the full name of the device-browser combination.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.Manufacturer">
            <summary>
            Gets the device manufacturer's name.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.Width">
            <summary>
            Gets the simulated screen width for browser.
            </summary>
            <remarks>Screen sizes specified here may not be the actual pixel sizes of the device screen. 
            They are virtual sizes the mobile browser specifies.</remarks>
            <example>
            The iPhone 5's mobile browsers screen dimensions are 320 x 568 px; however, the physical dimensions are 640 x 1136 px.
            </example>
            <seealso cref="P:Ingeniux.CMS.IDeviceInfo.Height"/>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.Height">
            <summary>
            Gets the simulated screen height for a browser.
            </summary>
            <remarks>Screen sizes specified here may not be the actual pixel sizes of the device screen. 
            They are virtual sizes the mobile browser specifies.</remarks>
            <example>
            The iPhone 5's mobile browsers screen dimensions are 320 x 568 px; however, the physical dimensions are 640 x 1136 px.
            </example>
            <seealso cref="P:Ingeniux.CMS.IDeviceInfo.Width"/>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.IsTablet">
            <summary>
            Checks whether this device is a tablet or mobile phone.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.Platform">
            <summary>
            Gets the platform (operating system) of the device.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IDeviceInfo.Version">
            <summary>
            Gets the device's firmware version.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.DeviceInfo.CanBundleWith(Ingeniux.CMS.IDeviceInfo)">
            <summary>
            Get if device can bundle with another device, means if they share same manufacturer and resolution
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IGenericDevice">
            <summary>
            Represents the generic mobile device for simulation purposes. This is the device to fall back on when it's determined the that browser is mobile but the exact device type is unknown.
            The purpose is to define the screen width and height of the fallback device.
            </summary>
            <remarks>This object is for mobile device emulation for page previews.</remarks>
            <seealso cref="T:Ingeniux.CMS.IDevice"/>
        </member>
        <member name="P:Ingeniux.CMS.IGenericDevice.ScreenWidth">
            <summary>
            Gets and sets the width of screen for the fallback device.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IGenericDevice.ScreenHeight">
            <summary>
            Gets and sets the height of screen for the fallback device.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.GenericDevice.Serialize">
            <summary>
            Only need width and height attribute to be stored.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IMobileDeviceManager">
             <summary>
             Represents the manager object that contains the collection of <see cref="T:Ingeniux.CMS.IDeviceBundle">Device Bundles</see>.
             Also, it can retrieve the information of a <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> from the Ingeniux CMS mobile detection library.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from a <see cref="T:Ingeniux.CMS.IUserSession"/> object. It only works within that session object.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IMobileDeviceManager mobileDeviceManager = session.MobileDeviceManager;
            		...
             }
             </code>
             </remarks>
             <example>
             Serialization of this manager object matches the MobileDevices.xml in previous-generation CMS content.
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <MobileDevices Enabled="false">
              <GenericDevice W="240" H="320" />
              <DeviceBundle N="iPhone" W="320" H="480" 
            			UA="Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B125 Safari/7534.48.3" 
            			RDID="12280-18117-17776-18092">
            		<D>Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.85 (KHTML, like Gecko) Version/5.1 Mobile/9B125 Safari/7534.48.3</D>
              </DeviceBundle>
              <DeviceBundle N="iPad" W="768" H="1024" 
            			UA="Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8J2 Safari/6531.22.7" 
            			RDID="15767-17090-4201-18092">
              </DeviceBundle>
            </MobileDevices>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.IDeviceInfo"/>
             <seealso cref="T:Ingeniux.CMS.IDeviceBundle"/>
             <seealso cref="T:Ingeniux.CMS.IGenericDevice"/>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.DeviceBundle(System.String)">
            <summary>
            Gets a <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> by its name.
            </summary>
            <param name="name">Name of the DeviceBundle to retrieve</param>
            <returns>Device bundle with matching name. Returns null if name doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.DeviceBundles(System.Boolean,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of all <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundles</see> in a paginated format.
            </summary>
            <param name="waitForDownload">Decides whether to wait for automatic update to finish. If false, enumerates the current collection in the mobile detection library.</param>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from first entry.</param>
            <returns>Collection of all <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundles</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.AddDeviceBundle(System.String,Ingeniux.CMS.IDeviceInfo)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> to the collection.
            </summary>
            <param name="name">Name of new <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> to add</param>
            <param name="representativeDevice">The <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see>'s <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">representative device</see>.</param>
            <returns>Newly created device bundle.</returns>
            <remarks>
            <para>The returned object is not yet stored in the content store.</para>
            <para>The new <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> only has the <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">representative device</see>. It doesn't have any other device in its collection.</para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.IMobileDeviceManager.RemoveDeviceBundle(Ingeniux.CMS.IDeviceBundle)"/>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.RemoveDeviceBundle(Ingeniux.CMS.IDeviceBundle)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> from the collection.
            </summary>
            <param name="bundle">The device bundle to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.IDeviceBundle">bundle</see> exists in the collection, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.IMobileDeviceManager.AddDeviceBundle(System.String,Ingeniux.CMS.IDeviceInfo)"/>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.GetDeviceByID(System.String)">
            <summary>
            Gets a <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> by its device ID.
            </summary>
            <param name="deviceId">The ID of the <see cref="T:Ingeniux.CMS.IDeviceInfo">device</see> from the mobile detection library.</param>
            <returns>Device with matching ID. Returns null if this device doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.GetDeviceCandidates(System.String,System.String[])">
            <summary>
            Lists all <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> included in the mobile detection library, that contains any of the provided keywords
            </summary>
            <returns>Collection of devices.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IMobileDeviceManager.GetCandidatesForDeviceBundle(Ingeniux.CMS.IDeviceBundle)">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> that can be added to a given <see cref="T:Ingeniux.CMS.IDeviceBundle">bundle</see>.
            </summary>
            <param name="bundle">Device bundle to check</param>
            <returns>Collection of devices not yet included in the <see cref="T:Ingeniux.CMS.IDeviceBundle">bundle</see>.</returns>
            <remarks>
            Only <see cref="T:Ingeniux.CMS.IDeviceInfo">devices</see> whose manufacturer and screen sizes match those of the bundle's <see cref="P:Ingeniux.CMS.IDeviceBundle.RepresentativeDevice">representative device</see>
            can listed.
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IMobileDeviceManager.Enabled">
            <summary>
            Gets and sets whether mobile emulation is enabled. When not enabled, <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundles</see> cannot be selected to emulate mobile preview, and the CMS
            user interface does not allow management of device bundles.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IMobileDeviceManager.GenericDevice">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IGenericDevice">generic device</see> information.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IMobileDeviceManager.Item(System.String)">
            <summary>
            Gets an <see cref="T:Ingeniux.CMS.IDeviceBundle">device bundle</see> by its name.
            </summary>
            <param name="name">Name of the device to retrieve</param>
            <returns>Device bundle with matching name. Returns null if name doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.IMobileDeviceManager.DeviceBundle(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.MobileDeviceManager.#ctor(Ingeniux.CMS.UserSession)">
            <summary>
            There can't many MobileDeviceManager instances, but only one underlying xml file
            </summary>
            <param name="sitePath"></param>
        </member>
        <member name="M:Ingeniux.CMS.MobileDeviceManager.GetSignatureRanks">
            <summary>
            Rather than accessing the Signature's Rank property creating this list speeds
            up returning the most popular signature for the device and operating 
            system combination.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.IStep">
            <summary>
            <para>
            Represents the information of a step/task entry in a background task to be monitored.
            Steps are the building blocks of the <see cref="T:Ingeniux.CMS.ITaskMonitor">Task Monitor</see>, which is used to monitor the progress of a task.
            </para>
            <para>
            Steps are normally constructed with full information during construction of a <see cref="T:Ingeniux.CMS.ITaskMonitor">Task Monitor</see>.
            Its property values cannot be changed.
            </para>
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IStep.Begin">
            <summary>
            Changes the step's state to <see cref="F:Ingeniux.CMS.Enums.EnumStepState.ON_GOING">ON_GOING</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IStep.Complete">
            <summary>
            Changes the step's state to <see cref="F:Ingeniux.CMS.Enums.EnumStepState.COMPLETED">COMPLETED</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IStep.CompleteWithError(System.String)">
            <summary>
            Changes the step's state to <see cref="F:Ingeniux.CMS.Enums.EnumStepState.COMPLETED">COMPLETED</see>, but includes an error message; this is not a successful completion.
            </summary>
            <param name="error">Error message to set</param>
        </member>
        <member name="P:Ingeniux.CMS.IStep.ID">
            <summary>
            Gets the identifier of the step.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStep.Name">
            <summary>
            Gets the name of the step.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStep.Description">
            <summary>
            Gets the description of the step.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStep.State">
            <summary>
            Gets the state of the step.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStep.Error">
            <summary>
            Gets the error message of the step. 
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IStepWithWeight">
            <summary>
            Represents the information of a step/task entry in a background task to be monitored. 
            By default, a step has one unit of weight in its <see cref="T:Ingeniux.CMS.ITaskMonitor">Task Monitor</see>. A step with weight can take multiple weight units.
            However, the units cannot be equal to or less than 0.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IStepWithWeight.Weight">
            <summary>
            Gets the weight of this step.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IListStep">
            <summary>
            <para>
            Represents the information of a step/task entry in a background task to be monitored. 
            This step has a collection of substeps. 
            </para>
            <para>
            Substeps need not have a particular order. List steps can advance from one step to any other step.
            </para>
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Steps">
            <summary>
            Retrieves the substeps of this step.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Add(Ingeniux.CMS.IStep)">
            <summary>
            Adds a new sub step.
            </summary>
            <param name="step">Step to add</param>
            <remarks>This method ignores null step values.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Remove(Ingeniux.CMS.IStep)">
            <summary>
            Removes a substep.
            </summary>
            <param name="step">Step to remove</param>
            <remarks>This method ignores null step values.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.AdvanceStep(Ingeniux.CMS.IStep)">
            <summary>
            Advance to the specified target step. Target step can be in any state, even a completed state.
            The specified step is the <see cref="P:Ingeniux.CMS.IListStep.OngoingStep">Ongoing Step</see>. Its state is marked as <see cref="F:Ingeniux.CMS.Enums.EnumStepState.ON_GOING">ON_GOING</see>.
            If the list step itself hasn't started, it will be started. Otherwise, the ongoing step is marked as <see cref="F:Ingeniux.CMS.Enums.EnumStepState.COMPLETED">COMPLETED</see>.
            </summary>
            <param name="step">Step to advance to</param>
            <remarks>
            The target step can be ongoing or completed, that means we can always revisit steps that were previously visited.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Step(System.String)">
            <summary>
            Retrieves a substep by its unique ID.
            </summary>
            <param name="stepId">ID of the substep to retrieve</param>
            <returns>Substep with matching unique ID. If this ID isn't found, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Step(System.Int32)">
            <summary>
            Retrieves a substep by its order index.
            </summary>
            <param name="index">Index of the substep</param>
            <returns>If the index is out of range of the substeps collection, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IListStep.Clear">
            <summary>
            Clears substeps.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListStep.OngoingStep">
            <summary>
            Gets the ongoing substep. Returns null if this step is not started.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListStep.Count">
            <summary>
            Gets the count of substeps.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IListStep.PercentCompleted">
            <summary>
            Gets the percentage of substeps that are in the <see cref="!:Ingeniux.CMS.EnumStepState.COMPLETED">COMPLETED</see> state.
            </summary>
            <remarks>
            <para>
            The percentage of completion considers the <see cref="T:Ingeniux.CMS.IStepWithWeight">weight</see> of the substeps.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IListStep.StepsCompleted">
            <summary>
            Gets the number of substeps that are on <see cref="!:Ingeniux.CMS.EnumStepState.COMPLETED">COMPLETED</see> state.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.ListStep.loc">
            <summary>
            instance level lock
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishError">
            <summary>
            Represents a nonstopping error that occured during the execution of a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishError.TaskID">
            <summary>
            Gets the ID of the publishing task.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishStep">
            <summary>
            Represents a step in the <see cref="T:Ingeniux.CMS.IPublishTaskMonitor">Publishing Tasks Monitor</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPublishStep.UpdatePublishedCount(System.Int32)">
            <summary>
            Updates the count of published <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            This method adds the count of just-published pages to the total published pages count.
            </summary>
            <param name="justPublishedPageCount">Count of just-published pages to be added to total published pages count</param>
        </member>
        <member name="P:Ingeniux.CMS.IPublishStep.TotalPageCount">
            <summary>
            Gets the total count of <see cref="T:Ingeniux.CMS.IPage">pages</see> to be published
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishStep.PublishedPageCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IPage">pages</see> that were published
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishStep.PercentCompleted">
            <summary>
            Gets the percentage of completion in the publishing step.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IPublishTaskMonitor">
            <summary>
            Represents the collection of information that indicates the status of a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>'s ongoing <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            with more details and <see cref="T:Ingeniux.CMS.IContentStore">Content Store</see> storage presence.
            The publishing target and publishing task monitor have a one-to-one relationship.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ITaskMonitor">
            <summary>
            Represents the collection of information that indicates the status of a <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            Manipulation of the objects that implement this interface is usually done by the task itself.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Steps">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IStepWithWeight">Steps</see> for the task to be monitored.
            </summary>
            <returns>Collection of steps.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Add(Ingeniux.CMS.IStepWithWeight)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> to monitor to this task.
            </summary>
            <param name="step">New step to monitor.</param>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Remove(Ingeniux.CMS.IStepWithWeight)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> to monitor from this task.
            </summary>
            <param name="step">Step to remove.</param>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.AdvanceStep(Ingeniux.CMS.IStepWithWeight)">
            <summary>
            Marks the previous <see cref="P:Ingeniux.CMS.ITaskMonitor.OngoingStep">Ongoing Step</see> to the <see cref="F:Ingeniux.CMS.Enums.EnumStepState.COMPLETED">COMPLETED</see> state.
            </summary>
            <param name="step">Step to advance to</param>
            <remarks>
            The target step can be ongoing or completed; this way, one can always revisit steps that were previously visited.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Step(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> by its unique ID.
            </summary>
            <param name="stepId">ID of the step to retrieve</param>
            <returns>Step with matching unique iD, null if ID not found.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Step(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> by its index.
            </summary>
            <param name="index">Index of the step</param>
            <returns>If index is out of range of the steps collection, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Clear">
            <summary>
            Clears the <see cref="T:Ingeniux.CMS.IStepWithWeight">Steps</see> collection.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Shutdown">
            <summary>
            Shuts down the monitor and issues the <see cref="E:Ingeniux.CMS.IPublishingTaskEvents.PublishComplete">PublishComplete</see>event.
            This method is called by <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> upon completing the task.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ITaskMonitor.Reset">
            <summary>
            Marks the monitor as inactive.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.OngoingStep">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> that is currently being executed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.OngoingStatus">
            <summary>
            Retrieves the status of publishing task as string message. This message is the description of the ongoing <see cref="T:Ingeniux.CMS.IStepWithWeight">Step</see> or 
            substep in a <see cref="T:Ingeniux.CMS.IListStep">List Step</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.Count">
            <summary>
            Gets the count of publishing <see cref="T:Ingeniux.CMS.IStepWithWeight">Steps</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.TotalWeight">
            <summary>
            Gets the total weight of all publishing <see cref="T:Ingeniux.CMS.IStepWithWeight">Steps</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.PercentCompleted">
            <summary>
            Gets the completion percentage of the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.Error">
            <summary>
            Gets the error message that caused the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> to stop.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.Completed">
            <summary>
            Gets whether the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> was completed already.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ITaskMonitor.Inactive">
            <summary>
            Gets whether the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> was marked as inactive.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IPublishTaskMonitor.Pages">
            <summary>
            Retrieve the IDs of the <see cref="T:Ingeniux.CMS.IPage">Page</see> to be published by the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
            <returns>Collection of IDs of the <see cref="T:Ingeniux.CMS.IPage">Pages</see> to be published</returns>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.TaskID">
            <summary>
            Gets the ID of the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> to monitor.
            </summary>.
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.PublishingTask">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> to monitor.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.IsFullPublish">
            <summary>
            Gets whether the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> executes a full publish.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.PubTargetName">
            <summary>
            Gets the names of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> publishes.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.PubTargetID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> publishes.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.RootPageID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPage">Root Page</see> to be published in the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.StartTime">
            <summary>
            Gets the start time of the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> in ISO-8601 format.
            </summary>
            <example>
            20140703T12:03:29 represents July 3rd, 2014, at 12:03:29 PM.
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.SubmitTime">
            <summary>
            Gets the submission time of the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see> in ISO-8601 format.
            </summary>
            <example>
            20140703T11:57:04 represents July 3rd, 2014, at 11:57:04 AM.
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.SubmitUserID">
            <summary>
            Gets the login name of the <see cref="T:Ingeniux.CMS.IUser">User</see> that submitted the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.PagesCount">
            <summary>
            Retrieves the count of <see cref="T:Ingeniux.CMS.IPage">Pages</see> to be published by the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.PublishingStep">
            <summary>
            Gets the step that performs a <see cref="T:Ingeniux.CMS.IPage">Page</see>'s publish.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.BuildUrlMapStep">
            <summary>
            Gets the step that builds the <see cref="T:Ingeniux.CMS.IUrlMap">URL Map</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.DeletePubFolderStep">
            <summary>
            Gets the step that cleans up the target folder location of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which the corresponding <see cref="T:Ingeniux.CMS.IPublishingTask">Publishing Task</see>
            publishes.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopyPrebuiltStep">
            <summary>
            Gets the step that recursively copies the asset files in the Prebuilt folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopyImagesStep">
            <summary>
            Gets the step the recursively copies the asset files in the Images folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopyDocumentsStep">
            <summary>
            Gets the step the recursively copies the asset files in the Documents folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopyStylesheetsStep">
            <summary>
            Gets the step the recursively copies the asset files in the Stylesheets folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopySettingsStep">
            <summary>
            Gets the step the recursively copies the asset files in the Settings folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IPublishTaskMonitor.CopyMediaStep">
            <summary>
            Gets the step the recursively copies the asset files in the Media folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.PublishTaskMonitor.PublishErrors">
            <summary>
            This method is not exposed on interface
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ReferenceEntry">
            <summary>
            This class is a simple wrapper for reference page, not an actual entity
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReferenceEntry">
            <summary>
            Represents a reference from one <see cref="T:Ingeniux.CMS.IPage">Page</see> to another <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            This object is created on the fly; it's not an entity stored in Content Store.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReferenceEntry.TargetPage">
            <summary>
            Gets the target <see cref="T:Ingeniux.CMS.IPage">Page</see> of this reference.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReferenceEntry.IsDirectReference">
            <summary>
            Gets whether this reference is directly between the <see cref="T:Ingeniux.CMS.IPage">Source Page</see> and <see cref="T:Ingeniux.CMS.IPage">Target Page</see> or reference of a reference.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReferenceEntry.IsCrossReference">
            <summary>
            Gets whether this reference is from the <see cref="T:Ingeniux.CMS.IPage">Target Page</see> or to the <see cref="T:Ingeniux.CMS.IPage">Target Page</see>.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReferencesManager">
             <summary>
             Represents the manager object that provides a means to query and manage the <see cref="T:Ingeniux.CMS.IReferenceEntry">Page cross references</see> collection.
             The references system provides a different way to relate pages <see cref="T:Ingeniux.CMS.IPage">Pages</see> in a nonorganized way.
             
             To relate pages in an organized way, the <see cref="T:Ingeniux.CMS.ITaxonomyManager">Taxonomy System</see> is recommended solution.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object, and it only works within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		IReferencesManager referencesManager = session.ReferencesManager;
            		...
             }
             </code>
             </remarks>
             <example>
             Serialization of this Manager object closely resembles the ReferencesMapping.xml file in CMS versions before CMS 9.0.
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <ReferencesMapping LastUpdatedUser="ingeniux\admin1" LastUpdated="20140714T11:24:50">
            	<Definitions>
            		<Definition Description="The Reference" FullName="Reference" TagName="R" />
            		<Definition Description="The source page XID" FullName="SourcePage" TagName="S" />
            		<Definition Description="The target page XID" FullName="TargetPage" TagName="T" />
            		<Definition Description="Last Updated Date" FullName="LastUpdatedDate" TagName="LUD" />
            		<Definition Description="Last Update User" FullName="LastUpdateUser" TagName="LUU" />
            	</Definitions>
            	<References>
            		<R S="x123" T="x345" LUU="ingeniux\admin2" LUD="20140714T10.24:01" />
            		<R S="x6789" T="1011" LUU="ingeniux\admin3" LUD="20140714T10.41:43" />
            	</References>
            </ReferencesMapping>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.AddReference(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)">
            <summary>
            Adds a new reference between two <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="sourcePage">The source page of the <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference</see></param>
            <param name="targetPage">The target page of the <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference</see></param>
            <returns>Count of <see cref="T:Ingeniux.CMS.IReferenceEntry">References</see> the source <see cref="T:Ingeniux.CMS.IPage">Page</see> has after the update.</returns>
            <remarks>
            <para>If either the sourcePage or targetPage parameter value is null, returns 0 without doing anything.</para>
            <para>The actual references are stored on the <see cref="T:Ingeniux.CMS.IPage">Source Page</see> itself. No additional entities are created.</para>
            <para>This method will make the <see cref="T:Ingeniux.CMS.IPage">Target Page</see> have a <see cref="T:Ingeniux.CMS.IReferenceEntry">crossreference</see> to the <see cref="T:Ingeniux.CMS.IPage">Source Page</see>.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.Get(Ingeniux.CMS.IPage,System.Boolean,System.Int32)">
            <summary>
            Retrieves all <see cref="T:Ingeniux.CMS.IReferenceEntry">References</see> of the specified <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            This method can query recursively on references of referenced pages, with or without crossreferences.
            </summary>
            <param name="page">Page for which to get references</param>
            <param name="includeCrossReferences">Whether to include crossreferences or only direct references</param>
            <param name="depth">Depth of recursion. If value is equal to or less than 1, references of references are not returned</param>
            <returns>Collection of references of specified <see cref="T:Ingeniux.CMS.IPage">Page</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.Count">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference Entries</see> stored on all <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference Entries</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.RemoveReferences(Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumReferenceRemovalType)">
            <summary>
            Removes <see cref="T:Ingeniux.CMS.IReferenceEntry">References</see> from and/or to the specified <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="page">Page to remove references for</param>
            <param name="removalType">Type of <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference</see> to remove: source, target, or both</param>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.RemoveReference(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference</see> between two <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="sourcePage">The source page of the reference</param>
            <param name="targetPage">The target page of the reference</param>
            <returns>True if reference exists, false otherwise.</returns>
            <remarks>
            <para>If the sourcePage or targetPage parameter value is null, this method returns false.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.IReferencesManager.RemoveReference(Ingeniux.CMS.IPage,System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IReferenceEntry">Reference</see> between two <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="sourcePage">The source page of the reference</param>
            <param name="targetPageId">The ID of the target reference's target page</param>
            <returns>True if reference exists, false otherwise.</returns>
            <remarks>
            <para>If the sourcePage parameter value is null or the targetPageId value is null or empty, this method returns false.</para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ReferencesManager.AddReference(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage)">
            <summary>
            Add target page as a reference from source page
            </summary>
            <param name="sourcePage">Page to add reference into</param>
            <param name="targetPage">Page referenced to from source</param>
            <returns>Number of referenced on source page</returns>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationExemptionBase">
            <summary>
            Represents a <see cref="T:System.IO.DirectoryInfo">Folder</see> that will be excluded from a particular action executed during replication process after publishing.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationExemptionBase.RelativePath">
            <summary>
            The relative path to the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target's Folder</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationExemptionBase.ExemptAllFiles">
            <summary>
            Gets and sets whether all <see cref="T:System.IO.FileInfo">Files</see> are exempt in this location.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationExemptionBase.ExemptDescendantDirectories">
            <summary>
            Gets and sets whether this exemption covers all descendant <see cref="T:System.IO.DirectoryInfo">Folders</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationExemptionBase.SearchPatterns">
            <summary>
            Gets and sets the search patterns for exempt files. Only effective when <see cref="P:Ingeniux.CMS.IReplicationExemptionBase.ExemptAllFiles"/> is false.
            </summary>
            <example>
            Search patterns comply to the file search pattern specification from Windows Explorer. Here are a few examples:
            <para>
            *.css
            </para>
            <para>
            t*.js
            </para>
            <para>
            *_target.xml|t*.js
            </para>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationExemptionBase.SearchPatternsList">
            <summary>
            Gets and sets the search patterns for exempt files split into a collection.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ExemptionBase.RelativePath">
            <summary>
            Relative path of source to be excluded from replication.
            It is relative to the replication target root. If set to emtpy,
            it will be the replication target itself. Make sure don't set ExemptAllFiles
            to true in this case, or you will be replicating nothing
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ExemptionBase.ExemptAllFiles">
            <summary>
            If to exclude all files in the location
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ExemptionBase.ExemptDescendantDirectories">
            <summary>
            If the exemption covers descendant folders. default true
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ExemptionBase.SearchPatterns">
            <summary>
            The extension to exclude, only effective if the ExemptAllFiles is false
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationAdditionalLocation">
            <summary>
            The object represents additional location to merge into the structure and replace the target relative path replication from original source.
            It means one more replication
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationAdditionalLocation">
            <summary>
            Represents a location that is not in the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see>,
            but will be replicated to a destination location during replication.
            </summary>
            <remarks>
            <para>
            Additional locations allow deployment of files from other places to be copied to the deployment destination, so the CMS site XML folder doesn't have to 
            hold every file the deployment needs.
            </para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationAdditionalLocation.TargetRelativePath">
            <summary>
            Gets and sets the relative location to the replication destination.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationAdditionalLocation.SourceFullPath">
            <summary>
            Gets and sets the full path of the directory to be copied. This location can be on the local server drives or an network location that is accessible by a Network Services account on the server.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationAdditionalLocation.Serialize">
            <summary>
            Serialize additional location to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationAdditionalLocation.TargetRelativePath">
            <summary>
            Get the relative path to replicate to (replace) in the target
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationAdditionalLocation.SourceFullPath">
            <summary>
            The source location. This can be anything, file path, ftp/sftp location
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationCleanupExemption">
            <summary>
            Represents a location from the <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see>'s destination directory that will not be cleaned up during 
            <see cref="M:Ingeniux.CMS.IReplicationTarget.CleanReplicate">Clean Replication</see>.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationCleanupExemption.ExemptFile(System.String)">
            <summary>
            Checks whether a file is excluded from cleanup.
            </summary>
            <param name="relativePath">Relative path of the file to check</param>
            <returns>True if the file is excluded from cleanup, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationCleanupExemption.ExemptDirectory(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether a directory is excluded from cleanup.
            </summary>
            <param name="relativePath">Relative path of the directory to check</param>
            <param name="exemptFiles">Collection of file that will be deleted in clean-up process</param>
            <returns>True if this location is excluded from cleanup, false otherwise.s</returns>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationCleanupExemption.IsFile">
            <summary>
            Gets whether this exemption is for one <see cref="T:System.IO.FileInfo">File</see> only.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.ExemptFile(System.String)">
            <summary>
            Given a relative file path, determine it that file, directory, and/or descendant directories is in the cleanup exemption list
            </summary>
            <param name="relativeFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.ExemptDirectory(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a relative directory and list of files, determine if they are in the cleanup exemption list
            </summary>
            <param name="relativeDirectoryPath"></param>
            <param name="exemptFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.exemptFileUnderDirectory(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determine if a given file list is in the cleanup exemption list and a descendent of given directory path
            </summary>
            <param name="exemptFiles"></param>
            <param name="relativeDirPath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.Serialize">
            <summary>
            Serialize cleanup exemption list to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.NormalizeRelativePath">
            <summary>
            Return full path of relative path
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.normalizeDirectoryPath(System.String)">
            <summary>
            normalize given directory path
            </summary>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationCleanupExemption.normalizePath(System.String)">
            <summary>
            normalize given file path
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationCompletionLog">
            <summary>
            Classes to contain log information
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationExemption">
            <summary>
            Represent a relative path from the source that will not be replicated
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationExemption">
            <summary>
            Represents the location from <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see> that will not be replicated.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationExemption.ExemptFile(System.IO.FileInfo)">
            <summary>
            Checks whether a <see cref="T:System.IO.FileInfo">File</see> is excluded from replication in this location.
            </summary>
            <param name="file">File to check</param>
            <returns>True if the <see cref="T:System.IO.FileInfo">File</see> is excluded from replication, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationExemption.ExemptDirectory(System.IO.DirectoryInfo)">
            <summary>
            Checks whether a <see cref="T:System.IO.DirectoryInfo">Directory</see> is excluded from replication in this location.
            </summary>
            <param name="dir">Directory to check</param>
            <returns>True if the <see cref="T:System.IO.DirectoryInfo">Directory</see> is excluded from replication, false otherwise.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationExemption.ExemptFile(System.IO.FileInfo)">
            <summary>
            Check if file to be exempted by this location
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationExemption.ExemptDirectory(System.IO.DirectoryInfo)">
            <summary>
            Check if directory to be exempted by this location
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationItemBase">
            <summary>
            Base class for Replication Item
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationItem">
            <summary>
            Represents an item to be replicated and its replication status. It is used to track replication progress.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationItem.Value">
            <summary>
            Gets the value of the replication item. It is to be implemented by derived objects.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationItem.ChangeType">
            <summary>
            Gets the type of change on this item: Create, Update, Delete, or Rename/Move.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationItem.Completed">
            <summary>
            Gets and sets whether replication of this item has been done, skipped, or copied.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationItem.Skipped">
            <summary>
            Gets and sets whether this item is skipped during replication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationItem.SkipReason">
            <summary>
            Gets and sets the reason why this item is skipped.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationItemBase.Completed">
            <summary>
            Get if item is replicated or not
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.FileReplicationItem">
            <summary>
            File replication item
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IFileReplicationItem">
            <summary>
            Represents a <see cref="T:System.IO.File">File</see> replication item and its replication status.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IFileReplicationItem.FilePath">
            <summary>
            Gets the full path of the <see cref="T:System.IO.File">File</see> from its source location.
            </summary>
            <remarks>
            The value of this property is the same as the <see cref="P:Ingeniux.CMS.IReplicationItem.Value">Value</see> property.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.FileReplicationItem.Equals(System.Object)">
            <summary>
            Test if a given object's file path matches FilePath
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.FileReplicationItem.GetHashCode">
            <summary>
            Get file path's hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationLogger.GetLogLevel(System.Int32)">
            <summary>
            Convert integer value to Log Level enum
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationLogger.GetLogger(System.String,System.String,System.String,NLog.LogLevel)">
            <summary>
            Fetch or create replication logger for given pub target
            </summary>
            <param name="pubTgtId"></param>
            <param name="pubTargetName"></param>
            <param name="pubTargetRepPath"></param>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationLogger.WriteEntry(NLog.LogLevel,System.String)">
            <summary>
            Write message to the appropriate log level
            </summary>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationTaskMonitor">
            <summary>
            This object is used to track replication status on a specifc replication target.
            It subscribe to the replication target's ItemReplicated event, to update a internal listing.
            All status updates are calculated from the internal listing
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationTaskMonitor">
            <summary>
            Represents the Monitor object that tracks the status of an ongoing replication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.StartTime">
            <summary>
            Gets the starting <see cref="T:System.DateTime">Date/Time</see> of the replication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.StartTimeValue">
            <summary>
            Gets the starting <see cref="T:System.DateTime">Date/Time</see> of the replication in ISO-8601 format.
            </summary>
            <example>
            20140724T15:44:03 for July 24th, 2014 at 03:44.03 PM.
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.Started">
            <summary>
            Gets whether the replication has started.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.ChangeDetectionCompleted">
            <summary>
            Gets whether the change-detection process is completed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.Target">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see> that this monitor belongs to.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.CompletedItemsCount">
            <summary>
            Gets and sets the count of items that has been replicated, including failed items.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.TotalItemsCount">
            <summary>
            Gets and sets the count of items to be replicated.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.Percentage">
            <summary>
            Gets the percentage of completion.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.Completed">
            <summary>
            Gets wheter the replication is done.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.Cancelled">
            <summary>
            Gets whether the replication is cancelled.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.StoppingError">
            <summary>
            Gets whether the replication failed
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTaskMonitor.OrderId">
            <summary>
            Gets and sets the position of this replication task among other tasks in a <see cref="T:Ingeniux.CMS.IReplicator">Replicator</see>. The lower IDs get executed first.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskMonitor.#ctor(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Construct that only register the target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskMonitor.init">
            <summary>
            initialize replication session and register event handler
            </summary>
            <param name="target"></param>
            <param name="itemsToReplicate"></param>
            <param name="cleanReplication"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskMonitor.ValidateUserPermission(Ingeniux.CMS.IUser)">
            <summary>
            Throw exception if user does not have permissions on this object
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTaskMonitor.ValidateData">
            <summary>
            Throw exception if object data invalidated
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTaskMonitor.Target">
            <summary>
            Get the Replication Target this session is generated from
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTaskMonitor.Percentage">
            <summary>
            Get percentage of items replicated
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTaskMonitor.Completed">
            <summary>
            Get if replication is completed
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ReplicationTarget">
            <summary>
            This type is marked for COM interop, but do not create this object by itself since it is abstract
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicationTarget">
             <summary>
             Represents a destination location to which published content is replicated as well as corresponding settings for this location.
             </summary>
             <example>
             Serialization example:
             <code language="xml">
             <![CDATA[
            <ReplicationTarget Disabled="false" ID="FileReplicationTarget/21" Type="IGX.Replication.FileReplicationTarget" Name="dss04" Description="" UseCommands="false" TargetLocation="\\it-webcms04.eastern.ewu.edu\external_dss_content" ChangeDetectionOnContent="false" UseImpersonation="true" TargetLocationAccessUserName="s-webcmsrpl" TargetLocationAccessUserDomain="eastern.ewu.edu" TargetLocationAccessPassword="RDNxA5JhNQV8P481I5yuWCGtP6VLLKY99C8ApDQKF62BdHRp987hsgagrOlWrGEJ">
            	<PreReplicationCommand Timeout="10">
            	</PreReplicationCommand>
            	<PostReplicationCommand Timeout="480">E:\igxsites\Sites\external\xml\Custom\media-servers-replication.bat</PostReplicationCommand>
            	<ExemptLocations>
            		<Exempt RelativePath="/PreBuilt/.svn/" ExemptAllFiles="true" ExemptDescendantDirectories="true" SearchPatterns=""/>
            		<Exempt RelativePath="/StyleSheets/.svn/" ExemptAllFiles="true" ExemptDescendantDirectories="true" SearchPatterns=""/>
            	</ExemptLocations>
            	<AdditionalLocations/>
            	<CleanupExemptLocations>
            		<CleanupExempt RelativePath="/prebuilt/aspnet_client/" ExemptAllFiles="true" ExemptDescendantDirectories="true" SearchPatterns="" IsFile="false"/>
            	</CleanupExemptLocations>
            </ReplicationTarget>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.SetExclusiveReplicateItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the files to be replicated, besides the <see cref="M:Ingeniux.CMS.IReplicationTarget.AdditionalLocations(System.Int32@,System.Int32,System.Int32)">Additional Locations</see>.
            Once this method is called, these are the only files from the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see> 
            that will be replicated.
            </summary>
            <param name="filesToReplicate">The exclusive list of files to be replicated.</param>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.ExemptLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt Locations</see> for this Replication Target, in a paginated fashion.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.ExemptLocationsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt Locations</see> for this replication target.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.AddExemptLocation(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt Location</see> to this replication target.
            </summary>
            <param name="locationPath">Path of exemption that is relative to the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see></param>
            <param name="exemptAllFiles">Whether to excude all <see cref="T:System.IO.FileInfo">Files</see> in this location</param>
            <param name="exemptSearchPatters">The search pattern for <see cref="T:System.IO.FileInfo">Files</see> that will be excluded. Only applies when the exemptAllFiles paramter value is false</param>
            <param name="exemptDescendants">Whether to exclude all descendant <see cref="T:System.IO.DirectoryInfo">Directories</see> of this location</param>
            <returns>Newly added exempt location</returns>
            <remarks>
            <para>The locationPath value doesn't have to point to the existing location when calling this method. However, if it still doesn't exist during replication, an error will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When location path is null or empty</exception>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.AdditionalLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Locations</see> for this replication target, in a paginated fashion.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.AdditionalLocationsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Locations</see> for this replication target.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.AddAdditionalLocation(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Location</see> to this replication target.
            </summary>
            <param name="sourcePath">Absolute path of the source <see cref="T:System.IO.DirectoryInfo">Directory</see> to be copied to the replication destination</param>
            <param name="targetPath">The relative path of the replication destination to the content of the source path</param>
            <returns>Added new <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional Location</see></returns>
            <remarks>
            <para>
            Both "sourcePath" and "targetPath" don't have to exist when calling this method. However, if they still don't exist during replication, an error will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When either the "sourcePath" or "targetPath" parameter value is null or empty.</exception>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.CleanupExemptLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Locations</see> for this replication target, in a paginated fashion.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.CleanupExemptLocationsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Locations</see> for this replication target.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Locations</see> for this replication target.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.AddCleanupExemption(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Location</see> to this replication target.
            </summary>
            <param name="locationPath">Path of exemption that is relative to replication destination location</param>
            <param name="exemptAllFiles">Whether to excude all <see cref="T:System.IO.FileInfo">Files</see> in this location from cleanup</param>
            <param name="exemptSearchPatters">The search pattern for <see cref="T:System.IO.FileInfo">Files</see> that will be excluded from cleanup. Only applies when the exemptAllFiles paramter value is false</param>
            <param name="exemptDescendants">Whether to exclude all descendant <see cref="T:System.IO.DirectoryInfo">Directories</see> of this location from cleanup</param>
            <returns>Newly added <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt Location</see></returns>
            <remarks>
            <para>The locationPath value doesn't have to point to an existing location when calling this method. However, if this location still doesn't exist during replication, an error will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When location path is null or empty</exception>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.ClearExemptionAndAdditionalLocations">
            <summary>
            Removes all <see cref="T:Ingeniux.CMS.IReplicationExemption">Exempt</see>, <see cref="T:Ingeniux.CMS.IReplicationAdditionalLocation">Additional</see> and 
            <see cref="T:Ingeniux.CMS.IReplicationCleanupExemption">Cleanup Exempt</see> locations.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.Replicate">
            <summary>
            Performs replication on this target.
            </summary>
            <remarks>
            <para>
            Replication generates two logs: the execution log and the completion log. 
            </para>
            <para>Execution logs are placed at App_Data/pub/__Replication__/[publishing target folder]/logs. All replication targets of the 
            <see cref="M:Ingeniux.CMS.IPublishingTarget.Replicator">Replicator</see> will be placed in one log file.</para>
            <para>Completion logs are places at App_Data/pub/__Replication__/Logs. This log is in XML format. Each replication target has its own log file.</para>
            <para>Replication logs any errors that occurred when replicating individual items and continues the process unless a stopping error occurred.</para>
            <para>Stopping errors are critical errors that halt replication. They are tracked in both logs</para>
            </remarks>
            <returns>The Monitor object to track the status of replication</returns>
            <seealso cref="M:Ingeniux.CMS.IReplicationTarget.CleanReplicate"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.CleanReplicate">
            <summary>
            Performs a replication that removes all <see cref="T:System.IO.FileInfo">Files</see> from the replication destination that no longer exist in the 
            <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see>.
            </summary>
            <remarks>
            <para>
            Replication generates two logs: the execution log and the completion log. 
            </para>
            <para>Execution logs are placed at App_Data/pub/__Replication__/[publishing target folder]/logs. All replication targets of the 
            <see cref="M:Ingeniux.CMS.IPublishingTarget.Replicator">Replicator</see> are placed in one log file.</para>
            <para>Completion logs are places at App_Data/pub/__Replication__/Logs. This log is in XML format. Each replication target has its own log file.</para>
            <para>Replication logs any errors that occurred when replicating individual items and continues this process unless a stopping error occurred.</para>
            <para>Stopping errors are critical errors that halt replication. They are tracked in both logs</para>
            </remarks>
            <returns>The Monitor object to track the status of replication</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicationTarget.CancelReplication">
            <summary>
            Cancels an ongoing replication and updates the <see cref="P:Ingeniux.CMS.IReplicationTarget.RepTaskMonitor">Task Monitor</see> to the cancelled state.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.Disabled">
            <summary>
            Gets and sets whether this target is disabed. Disabled targets cannot perform replications.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.Type">
            <summary>
            Gets the full <see cref="T:System.Type"/> name of the target.
            </summary>
            <example>IGX.Replication.FileReplicationTarget</example>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.Description">
            <summary>
            Gets and sets the detailed description of this target.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.PublishingTargetDirectory">
            <summary>
            Gets the full path of the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">Publishing Target Folder</see> to which this replication target belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.UseCommands">
            <summary>
            Gets and sets whether to execute the <see cref="P:Ingeniux.CMS.IReplicationTarget.PreReplicationCommand">PreReplicationCommand</see> and 
            <see cref="P:Ingeniux.CMS.IReplicationTarget.PostReplicationCommand">PostReplicationCommand</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.PreReplicationCommand">
            <summary>
            Gets and sets the commands that are executed before replication on this target. Uses standard Command Prompts (DOS) command syntax.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.PostReplicationCommand">
            <summary>
            Gets and sets the commands that are executed after replication on this target. Use standard Command Prompts (DOS) command syntax.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.PreReplicationCommandTimeout">
            <summary>
            Gets and sets the timeout (in seconds) for <see cref="P:Ingeniux.CMS.IReplicationTarget.PreReplicationCommand">PreReplicationCommand</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.PostReplicationCommandTimeout">
            <summary>
            Gets and sets the timeout (in seconds) for <see cref="P:Ingeniux.CMS.IReplicationTarget.PostReplicationCommand">PostReplicationCommand</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.RepTaskMonitor">
            <summary>
            Gets the Monitor object that tracks an ongoing replication. This object will stick around.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.RepTaskDetails">
            <summary>
            Gets the details of the last-completed replication.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicationTarget.Replicating">
            <summary>
            Gets whether this target is currently performing a replication.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.Replicate">
            <summary>
            Start replication
            </summary>
            <returns>Replication Session</returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.replicateAction(System.Boolean)">
            <summary>
            Log replication pre and post actions and execute replication
            Also keep track of stopping errors
            </summary>
            <param name="cleanReplication"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.prepareTaskMonitor">
            <summary>
            Generate new GUID for new replication session if needed and set meta data if session not to be canceled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.writeCompletionLog(System.Exception,System.Boolean)">
            <summary>
            Generate new unique log using pub target name, replication name and datetime.now
            Populate it with replication session info and save
            </summary>
            <param name="stoppingError"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.CleanReplicate">
            <summary>
            Start from scratch. Reset meta data and do a clean replicate
            </summary>
            <returns>Replication Session</returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.CancelReplication">
            <summary>
            Stop current (or next) replication  and write completion log
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.Destroy">
            <summary>
            Clean up the replication target directory.
            Not allowed if replication is going on
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.resetMetaData">
            <summary>
            delete meta data files
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.checkPubTargetDirectory">
            <summary>
            Create the pub target directory if it doesn't exist
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.prepareSyncLocations">
            <summary>
            The meta data folder preparation step to prevent handle locking on same pub target
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.preparePubTargetLevelReplication">
            <summary>
            locate the parent folder or pub target folder, make sure it exists and called "pub",
            this is where we will store meta data of sync
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.setOrCreateFolder(System.String,System.String)">
            <summary>
            Combine name with parent to return a directory, creating it if needed
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.fireItemReplicatedEvent(Ingeniux.CMS.Event.ReplicationItemEventArgs)">
            <summary>
            execute item replicated handler
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.Serialize">
            <summary>
            Serialize replication target to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.SetExclusiveReplicateItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            populate _ExclisiveReplicateItems with filesToReplicate
            </summary>
            <param name="filesToReplicate"></param>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.notInExclusiveItems(System.String)">
            <summary>
            check if relative path is in _ExclusiveReplicateItems
            </summary>
            <param name="fileRelativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.ExemptLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Get list of exempt locations
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.ExemptLocationsCount">
            <summary>
            Get exempt location count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.AdditionalLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Get list of additional locations
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.AdditionalLocationsCount">
            <summary>
            Get additional location count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.CleanupExemptLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Get list of cleanup exemptions
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.CleanupExemptLocationsCount">
            <summary>
            Get cleanup exemption count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.AddExemptLocation(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add exempt location. Done as method so as not to complicate constructor
            </summary>
            <param name="locationPath"></param>
            <param name="exemptAllFiles"></param>
            <param name="exemptSearchPatterns"></param>
            <param name="exemptDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.AddAdditionalLocation(System.String,System.String)">
            <summary>
            Add additional location. Done as method so as not to complicate constructor
            </summary>
            <param name="sourcePath"></param>
            <param name="targetPath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ReplicationTarget.AddCleanupExemption(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add cleanup exemption. Done as method so as not to complicate constructor
            </summary>
            <param name="locationPath"></param>
            <param name="exemptAllFiles"></param>
            <param name="exemptSearchPatterns"></param>
            <param name="exemptDescendants"></param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTarget.Replicating">
            <summary>
            Volatile property for thread safety
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ReplicationTarget.RepTaskMonitor">
            <summary>
            only return the session is not serializing the object itself. 
            this will make sure the COM serialization doesn't include session
            therefore avoid circular serialization of CultureInfo.
            Make sure to set Serializing property to true first in order not to return the session
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.FileReplicationTarget.detectChangesOnRoot">
            <summary>
            Override, because FTP client doesn't do change tracking, and the the ftp syncer preview mode item events are fired very slow in managed code.
            We will not do preview sync, instead, just list the source dir files. (exclude directories for status tracking)
            We will also introduce a indexable special list just for exclusions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.FileReplicationTarget.prepareForCleanup">
            <summary>
            Override
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.FileReplicationTarget.ChangeDetectionOnContent">
            <summary>
            If the compare file content before replication. Please note that event this will make change
            detection more accurate, it is also a lot slower and consume more CPU power.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.DirectFileSyncProvider">
            <summary>
            This is a full enumeration provider, directly
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.FTPFileSyncProvider.connect">
            <summary>
            Sub class must override
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Ingeniux.CMS.FTPFileSyncProvider.disconnect">
            <summary>
            Sub class must override
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Ingeniux.CMS.FTPFileSyncProvider.checkTargetDirectoryExistence(System.String)">
            <summary>
            Sub class must override
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Ingeniux.CMS.FTPFileSyncProvider.insertItemInner(Microsoft.Synchronization.Files.IFileDataRetriever,System.String,System.Boolean,System.String)">
            <summary>
            Subclass must override
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Ingeniux.CMS.FTPFileSyncProvider.updateItemInner(System.String,Microsoft.Synchronization.Files.IFileDataRetriever,System.String,System.Boolean)">
            <summary>
            Sub class must override
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Ingeniux.CMS.SCPFileSyncProvider">
            <summary>
            Please note that scp doesn't provide a way to remove file and folders.
            There is no way to delete extra files during replication
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SFTPFileSyncProvider.GeneratePublishKey">
            <summary>
            Generate a public key. Saves the private key in the privatekey location
            Returns public key path
            </summary>
            <returns>Generated Publish Key Path</returns>
        </member>
        <member name="P:Ingeniux.CMS.SFTPFileSyncProvider.InvalidKey">
            <summary>
            Only true when Authenticating with private key and private key is missing.
            Also this would indicate fallback to password authentication
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.StandardFTPSyncProvider">
            <summary>
            This is a prototype version of the ftp sync provider that does full change tracking. No completed due to test scenario 
            showing it being very slow and constantly making mistake of not including changed items
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.RemoteFileReplicationTargetBase`1.getTargetRelativePath(System.String)">
            <summary>
            Override, convert remote location relative path to match file system relative path
            </summary>
            <param name="filePath"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.RemoteFileReplicationTargetBase`1.ChangeDetectionOnContent">
            <summary>
            Remote target provides no change detection
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.FTPSReplicationTarget.DefaultPort">
            <summary>
            Override, change default port when using implicit encryption
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.getTargetRelativePath(System.String)">
            <summary>
            Return relative path to filePath
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.sftpAction(System.Action{Rebex.Net.Sftp})">
            <summary>
            Create temp SFTP client and perform callback
            </summary>
            <param name="sftpActionCallback"></param>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.createSftpClient">
            <summary>
            Create SFTP client from Target Location and open connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.getTargetProvider(System.String,System.String)">
            <summary>
            Return SFTP File Sync Provider
            </summary>
            <param name="targetFolder"></param>
            <param name="metaDataPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.Serialize">
            <summary>
            Serialize SFTP replication target to XElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.CleanupExemptLocations(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Get list of cleanup exemptions, all locations will be relative to the pub folder
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SFTPReplicationTarget.GeneratePublicKey">
            <summary>
            Returns private key location
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.SFTPReplicationTarget.TypeFriendlyName">
            <summary>
            class must include the default friendly name
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.SFTPReplicationTarget.PrivateKeyLocation">
            <summary>
            Private Key Location is determined by SFTP Provider
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Replicator">
            <summary>
            The object in charge of hosting replication targets for publishing target.
            It controls the action of replication and decide the order of replication
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IReplicator">
            <summary>
            Represents the replication mechanism of a <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see>.
            The Replicator object itself contains the collection of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> and is in charge of managing them.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.Target(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.IReplicationTarget">Replicator Target</see> by its unique ID.
            </summary>
            <param name="targetId">ID of the <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see> to retrieve</param>
            <returns>Replication target with matching ID, or null if no target with matching ID is found.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.Targets(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belongs to this replicator, in a paginated fashion.
            </summary>
            <param name="count">Total count of entries</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belongs to this replicator</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.TargetCount">
            <summary>
            Gets the count of the collection of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belong to this replicator.
            </summary>
            <returns>Count of the collection of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belong to this replicator</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.Clear">
            <summary>
            Removes all <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> from collection.
            </summary>
            <seealso cref="M:Ingeniux.CMS.IReplicator.AddTarget(Ingeniux.CMS.IReplicationTarget)"/>
            <seealso cref="M:Ingeniux.CMS.IReplicator.RemoveTarget(Ingeniux.CMS.IReplicationTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.AddTarget(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see> to collection.
            </summary>
            <param name="target">Replication Target to add to collection</param>
            <seealso cref="M:Ingeniux.CMS.IReplicator.Clear"/>
            <seealso cref="M:Ingeniux.CMS.IReplicator.RemoveTarget(Ingeniux.CMS.IReplicationTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.RemoveTarget(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see> from collection.
            </summary>
            <param name="target">Replication Target to remove from collection</param>
            <returns>True if target belongs to this replicator, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.IReplicator.Clear"/>
            <seealso cref="M:Ingeniux.CMS.IReplicator.AddTarget(Ingeniux.CMS.IReplicationTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.Replicate(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Starts replication on all <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see>.
            </summary>
            <param name="cleanReplication">Whether to perform a clean replication</param>
            <param name="pageFiles">Page files to replicate</param>
            <param name="miscFiles">Other files to replicate</param>
            <returns>Collection of monitors for each  <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see>.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.ReplicationTaskMonitors(System.Int32@,Ingeniux.CMS.IUserSession,System.Int32,System.Int32)">
            <summary>
            Retrieves the collection of monitor objects for the <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belongs to this replicator,
            in a paginated fashion.
            </summary>
            <param name="count">Count of monitors</param>
            <param name="sessionOverride">Override session to replace the currently openned session</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of monitor objects for the <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belongs to this replicator.</returns>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.CancelReplication">
             <summary>
             Cancels all replications.
             </summary>
            <seealso cref="M:Ingeniux.CMS.IReplicator.CancelReplicationSession(Ingeniux.CMS.IReplicationTarget)"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.CancelReplicationSession(Ingeniux.CMS.IReplicationTarget)">
             <summary>
             Cancels replication for a specific <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target.</see>
             </summary>
             <param name="repTarget">Target on which to cancel replication</param>
            <seealso cref="M:Ingeniux.CMS.IReplicator.CancelReplication"/>
        </member>
        <member name="M:Ingeniux.CMS.IReplicator.ReorderTargets(System.String[])">
            <summary>
            Reorder the sequence of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replicator Targets</see> in the collection.  When this replicator is configured to replicate sequentially, this method affects which <see cref="T:Ingeniux.CMS.IReplicationTarget">Target</see>
            performs replication first.
            </summary>
            <param name="idList">Array of <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Target</see> IDs in the desired order.</param>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.PublishingTargetID">
            <summary>
            Gets the ID of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which this replicator belongs.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ingeniux.CMS.IReplicator.PublishingTargetFolderName" -->
        <member name="P:Ingeniux.CMS.IReplicator.PublishingTargetDirectory">
            <summary>
            Gets the <see cref="P:Ingeniux.CMS.IPublishingTarget.PublishFolder">full path</see> to the folder of the publishing target to which this replicator belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.PublishingTargetName">
            <summary>
            Gets the name of the <see cref="T:Ingeniux.CMS.IPublishingTarget">Publishing Target</see> to which this replicator belongs.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.SubmitUserID">
            <summary>
            Gets of the user ID of the <see cref="T:Ingeniux.CMS.IUser">User</see> that last submitted a publishing or replication task.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.StartTime">
            <summary>
            Gets the <see cref="T:System.DateTime">Starting Date/Time</see> of last-submitted replication task.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.DoReplication">
            <summary>
            Gets and sets whether to enable replication for this replicator.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.SimultaneousReplication">
            <summary>
            Gets and sets whether to simultaneously or sequentially perform replications on its <see cref="T:Ingeniux.CMS.IReplicationTarget">Targets</see>.
            </summary>
            <remarks>
            <para>In general, simultaneous replication takes less time but may occupy significant IO bandwidth, especially when replicating from an SAN or to all remote locations.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.ReplicationStarted">
            <summary>
            Gets whether the replication has started on this replicator
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IReplicator.ReplicationCompleted">
            <summary>
            Gets whether all <see cref="T:Ingeniux.CMS.IReplicationTarget">Replication Targets</see> that belong to this replicator have finished replicating.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.Initialize(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initialize the Replicator with its publish and replication target information.
            </summary>
            <param name="tasksList"></param>
            <param name="xmlPath"></param>
            <param name="userId"></param>
            <param name="pubTargetId"></param>
            <param name="pubTargetName"></param>
            <param name="pubTargetRelativePath"></param>
            <param name="replicationSettingsXml"></param>
            <param name="logLevel"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.preparePubTargetLevelReplication">
            <summary>
            Make sure the pub folder exists in the xml folder and is named properly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.Clear">
            <summary>
            Deep clear out replication targets
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.AddTarget(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Add a new target. This target's ID will be assigned
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.ReplicationTaskMonitors(System.Int32@,Ingeniux.CMS.IUserSession,System.Int32,System.Int32)">
            <summary>
            Return list of replication sessions
            </summary>
            <param name="count"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.GetTargetById(System.String)">
            <summary>
            Given a replication target id, get the target
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.GetTarget(System.Int32)">
            <summary>
            Get replication target by structural index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.SerializeXml">
            <summary>
            Serialize to raw xml string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.queueReplication(System.Boolean,System.String[])">
            <summary>
            Add pub target and parameters to rep task queue.
            </summary>
            <param name="cleanReplication"></param>
            <param name="filesToReplicate"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.startBackgroundWorker(Ingeniux.CMS.IReplicator)">
            <summary>
            Fire off a worker thread to start replicator
            </summary>
            <param name="pubTgtReplicator"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator._BackgroundExecution(System.Object)">
            <summary>
            Private method that is executed on worker thread
            </summary>
            <param name="pubTgtReplicatorObj"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.Replicate(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combine page and asset files and queue replication
            </summary>
            <param name="cleanReplication"></param>
            <param name="pageFiles"></param>
            <param name="miscFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.CancelReplication">
            <summary>
            Cancel replication for each target in replicator
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Replicator._ReplicateInner(Ingeniux.CMS.ReplicationTaskEntry)">
            <summary>
            Create logger and fire off sequential or simultaneous replication
            </summary>
            <param name="taskParameters"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.AssignTargetLoggers(Ingeniux.CMS.IInstanceLogger)">
            <summary>
            Assign Sessions to TaskList and assign logger to replication targets
            </summary>
            <param name="taskParameters"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.simultaneousReplicate(System.Boolean,System.String[])">
            <summary>
            Create a new thread for each replication target to execute
            </summary>
            <param name="cleanReplicate"></param>
            <param name="filesToReplicate"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.sequencialReplicate(System.Boolean,System.String[])">
            <summary>
            Execute replication targets in sequence
            </summary>
            <param name="cleanReplicate"></param>
            <param name="filesToReplicate"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.targetReplication(System.Boolean,System.String[],Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Set exclusive replication files if needed and execute a clean or standard replication
            </summary>
            <param name="fullReplication"></param>
            <param name="filesToReplicate"></param>
            <param name="tgt"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.Serialize">
            <summary>
            Serialize replicator to XElement.
            Also set each target's replicator to ourselves here (this way we know there's no circular dependancies)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.CancelReplicationSession(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Cancel a target replication
            </summary>
            <param name="repTarget"></param>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.Target(System.String)">
            <summary>
            Retrieve a replication target keyed with the target ID
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.RemoveTarget(Ingeniux.CMS.IReplicationTarget)">
            <summary>
            Destroy and remove a replication target from the replicator
            </summary>
            <param name="target"></param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.Replicator.TargetCount">
            <summary>
            Returns a count of replicaton targets
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.Replicator.DoReplication">
            <summary>
            True if Replication is enabled
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IAssetPublisher">
            <summary>
            Represents the system that processes assets copying during publish/replication
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldFavorite">
            <summary>
            Represents a collection of fields with prefilled values. 
            It is used to group <see cref="T:Ingeniux.CMS.ISchemaField">Fields</see> that are most repeated across 
            <see cref="T:Ingeniux.CMS.ISchema">schemas</see>. This way, when creating a new schema, fields can be conveniently added without additional typing.
            </summary>
            <remarks>
            This object is only used for convenience in constructing <see cref="T:Ingeniux.CMS.ISchema">schemas</see>.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldFavorite.FieldsCount">
            <summary>
            Gets the count of the prefilled <see cref="T:Ingeniux.CMS.IUniqueSchemaUnit">fields</see>.
            </summary>
            <returns>Count of fields.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldFavorite.AddField(Ingeniux.CMS.IUniqueSchemaUnit)">
            <summary>
            Adds a new field to the group.
            </summary>
            <param name="field">New prefilled field to add</param>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldFavorite.RemoveField(Ingeniux.CMS.IUniqueSchemaUnit)">
            <summary>
            Removes a field from the group.
            </summary>
            <param name="field">Field to remove</param>
            <returns>True when field exists, false otherwise.</returns>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldFavorite.Fields">
            <summary>
            Gets the list of prefilled fields on this group. The list can be manipulated.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldFavorite.Public">
            <summary>
            Gets and sets whether this favorite entry is for all users. When false, it is only for the user who created this favorite entry.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldFavorite.Creator">
            <summary>
            Get the <see cref="!:Ingeniux.CMS.IUser.UserId">user ID</see> of the <see cref="T:Ingeniux.CMS.IUser">user</see> who created this favorite entry.
            If <see cref="P:Ingeniux.CMS.ISchemaFieldFavorite.Public">Public</see> is set to false, only this user can see this entry.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldProperty">
            <summary>
            Represents a filled value for a schema favorite entry's <see cref="T:Ingeniux.CMS.IUniqueSchemaUnit">field</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IUniqueSchemaUnit"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldProperty.TypeProperty">
            <summary>
            Gets the type of property.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldProperty.Value">
            <summary>
            Gets and sets the property's value.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.UniqueSchemaUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IUniqueSchemaUnit">
            <summary>
            Presents a fully filled-out <see cref="T:Ingeniux.CMS.ISchemaField">Schema Field</see>.
            It is the construction unit of <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">Schema Field Favorites</see>.
            Normally, an instance of this type has all the necessary attributes and values filled in, so can be used directly when constructing a new <see cref="T:Ingeniux.CMS.ISchema">Schema</see>.
            </summary>
            <seealso cref="T:Ingeniux.CMS.ISchemaFieldFavorite"/>
        </member>
        <member name="M:Ingeniux.CMS.IUniqueSchemaUnit.SerializeToFavorite">
             <summary>
             Serializes the XML element as a favorite entry. The favorite-entry format is not the same as output elements for schemas.
             </summary>
             <example>
             <code language="xml">
             <![CDATA[
            <Favorite Creator="ingeniux\awang" Public="false" ID="1" Name="test">
            		<FavoriteField Name="Listoflinks" Expanded="true" DefaultValue="" Hidden="false" 
            			Required="false" Readonly="false" HelpText="help test" Label="List of links" FavID="1" TypeID="5"/>
            </Favorite>
            ]]>
             </code>
             </example>
             <returns>XML element instance.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IUniqueSchemaUnit.ID">
            <summary>
            Gets this unit's unique ID.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUniqueSchemaUnit.AdditionalProperties">
            <summary>
            Gets the additional <see cref="T:Ingeniux.CMS.ISchemaFieldProperty">Properties</see> of this unit. This is where this field's values are stored.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUniqueSchemaUnit.ChildProperties">
            <summary>
            Gets the  <see cref="T:Ingeniux.CMS.ISchemaFieldProperty">Properties</see> of this field's child elements. Only applies to XPower elements.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.UniqueSchemaUnit.Serialize">
            <summary>
            This method is not implemented for unique schema unit, since it will not be used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.SchemaCrossFieldTypeTransform">
            <summary>
            Schema cross field type transform allow one type of field to be matched
            and transformed to another type if they have the same name
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.CrossField_TextToComponentTransform.Transform(Ingeniux.CMS.ISchemaUnit)">
            <summary>
            link to text transform will set the target XID to text value
            </summary>
            <param name="sourceUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.CrossField_TextToLinkTransform.Transform(Ingeniux.CMS.ISchemaUnit)">
            <summary>
            link to text transform will set the target XID to text value
            </summary>
            <param name="sourceUnit"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.SchemaContent">
            <summary>
            Interchangable representation of both schema and page, the final result of schema sync diffing plan
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SchemaContent.Add(System.Int32,Ingeniux.CMS.ISchemaUnit,System.Boolean)">
            <summary>
            Add an piece of content to specific location.
            Returns false if content exists from old schema and content transfer occurred
            </summary>
            <param name="index"></param>
            <param name="contentToAdd"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.SchemaDiffPlan">
            <summary>
            Diff plan is pretty much a stack, follows the first in last out order.
            Idea for the bottom-up approach of diffing based on edit distance calculation
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.SchemaSyncher">
            <summary>
            Schema syncher is for synching multiple pages with one schema
            Continue to set new pages before analysis and sync.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.SchemaSyncher.getDiffMatrix(Ingeniux.CMS.ISchemaUnit[],Ingeniux.CMS.ISchemaUnit[])">
            <summary>
            Fill in the edit distance matrix for later analysis
            </summary>
            <param name="pageUnits"></param>
            <param name="schemaUnits"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SchemaSynchManager.GetPagesToSync(Ingeniux.CMS.ISchema)">
            <summary>
            Get pages to sync for given schema file
            Please note that the collection returns is deferrly executed
            </summary>
            <param name="schemaFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.SchemaSynchManager.AnalyzePages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPageToSync})">
            <summary>
            Parallelle method. Analyze pages one per thread. Wait for all completed and return collection
            </summary>
            <param name="pages"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.ISchema">
             <summary>
             Represents a schema for a <see cref="T:Ingeniux.CMS.IPage">page</see>. All pages in the Ingeniux CMS are created from a schema, which defines page structure. 
             However, changes to a schema are not automatically applied to pages created from it.
             In order for a page's structure to stay in sync with a schema, you must sync it in schema designer.
             </summary>
             <example>
             <para>
             Schemas are retrieved by the <see cref="M:Ingeniux.CMS.ISchemaManager.SchemaByID(System.String)">SchemaByID</see>, <see cref="M:Ingeniux.CMS.ISchemaManager.SchemaByFriendlyName(System.String)">SchemaByFriendlyName</see>,
             and <see cref="M:Ingeniux.CMS.ISchemaManager.SchemaByRootName(System.String)">SchemaByRootName</see> methods of the <see cref="T:Ingeniux.CMS.ISchemaManager">SchemaManager</see> object.
             </para>
             <code language="C#">
             <![CDATA[
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		ISchemaManager schemaManager = session.SchemasManager;
            		ISchema detailsSchema = schemaManager.SchemaByFriendlyName("Details");
             }
             ]]>
             </code>
             <para>
             Schemas are created with the <see cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)">CreateSchema</see> or <see cref="M:Ingeniux.CMS.ISchemaManager.CreateComponentSchema(System.String,System.String,System.Int32)">CreateComponentSchema</see>
             method of the <see cref="T:Ingeniux.CMS.ISchemaManager">SchemaManager</see> object, or they are imported from XML schema content with the <see cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)">ImportSchema</see> method.
             </para>
             <code language="C#">
             <![CDATA[
             using (IUserSession session = store.OpenWriteSession(currentUser))
             {
            		ISchemaManager schemaManager = session.SchemasManager;
            		ISchema newSchema = schemaManager.CreateSchema("NewsDetails", "News Details", 3, false, true, "News_Details");
             }
             ]]>
             </code>
             <para>
             A schema's serialization output matches schema files in previous-generation CMS content:
             </para>
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Schema name="AtoZIndex" xmlns="urn:schemas-microsoft-com:xml-data" xmlns:dt="urn:schemas-microsoft-com:datatypes">
            		<AttributeType dt:type="id" name="ID" required="yes" />
            		<AttributeType dt:type="string" name="Name" required="yes" />
            		<AttributeType default="8" dt:type="int" name="Icon" />
            		<AttributeType default="A to Z Index" dt:type="string" name="FriendlyName" />
            		<AttributeType default="true" dt:type="boolean" name="SS" />
            		<AttributeType default="default.xsl" dt:type="string" name="DefaultStyleSheet" />
            		<AttributeType default="" dt:type="string" name="DefaultCategorization" />
            		<AttributeType name="Version" dt:type="int" default="1" />
            		<AttributeType name="UniqueID" dt:type="int" default="57" />
            		<ElementType content="textOnly" name="Exports" />
            		<ElementType content="textOnly" dt:type="string" name="Title" />
            		<ElementType content="textOnly" dt:type="string" name="Abstract" />
            		<ElementType content="eltOnly" name="xpowergroupstart_SEOGroup" />
            		<ElementType content="textOnly" dt:type="string" name="NavName">
            			<description>The text used for links in site navigations.  Defaults on page creation to the title.</description>
            		</ElementType>
            		<ElementType content="textOnly" dt:type="string" name="BrowserBarTitle" />
            		<ElementType content="textOnly" dt:type="string" name="MetaDescription" />
            		<ElementType content="textOnly" dt:type="string" name="MetaKeywords" />
            		<ElementType content="textOnly" dt:type="enumeration" name="Priority" values=".9 .8 .7 .6 .5 .4 .3 .2 .1" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoFollow" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoIndex" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoODP" />
            		<ElementType content="eltOnly" name="xpowergroupend" />
            		<ElementType content="eltOnly" name="dhtml_BodyCopy" />
            		<ElementType content="eltOnly" name="xpowertaxonomynavigation_ExclusionCategory">
            			<description>Select a category that will exclude tagged items from the A-Z index</description>
            		</ElementType>
            		<ElementType content="eltOnly" name="xpowernavigation_AncestorNavigation" />
            		<ElementType content="eltOnly" name="xpowercomponent_SiteControl" />
            		<ElementType content="eltOnly" name="AtoZIndex" order="seq">
            			<attribute type="ID" />
            			<attribute type="Name" />
            			<element hidden="false" label="Title" readonly="false" required="true" type="Title" />
            			<element hidden="false" label="Abstract" readonly="false" required="true" type="Abstract" />
            			<element Expanded="false" hidden="true" label="SEO Group" readonly="false" required="false" type="xpowergroupstart_SEOGroup" />
            			<element hidden="false" label="Navigation Name" readonly="false" required="false" type="NavName" />
            			<element hidden="false" label="Browser Bar Title" readonly="false" required="false" type="BrowserBarTitle" />
            			<element hidden="false" label="Meta Description" readonly="false" required="false" type="MetaDescription" />
            			<element hidden="false" label="Meta Keywords" readonly="false" required="false" type="MetaKeywords" />
            			<element hidden="false" label="Priority" readonly="false" required="false" type="Priority" />
            			<element hidden="false" label="No Follow" readonly="false" required="false" type="NoFollow" />
            			<element hidden="false" label="No Index" readonly="false" required="false" type="NoIndex" />
            			<element hidden="false" label="No ODP" readonly="false" required="false" type="NoODP" />
            			<element type="xpowergroupend" />
            			<element hidden="false" label="Body Copy" readonly="false" required="false" type="dhtml_BodyCopy" />
            			<element Depth="" FilterParentPages="" FilterSchemas="" IncludePages="false" StartNodes="" hidden="false" label="Exclusion Category" readonly="false" required="false" type="xpowertaxonomynavigation_ExclusionCategory" />
            			<element Expanded="false" GenerationOrder="down" MaxDepth="" MaxNodes="" Navigation="Ancestors" Query="" StartPage="x2" hidden="true" label="Ancestor Navigation" readonly="true" required="false" type="xpowernavigation_AncestorNavigation" />
            			<element CompTypes="SiteControl" Component="x10" hidden="true" label="Site Control" readonly="true" required="false" type="xpowercomponent_SiteControl" />
            		</ElementType>
            </Schema>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.ISchemaManager"/>
             <seealso cref="T:Ingeniux.CMS.ISchemaVersion"/>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaBasic">
            <summary>
            Represents the properties shared by the <see cref="T:Ingeniux.CMS.ISchema">Schema</see> and <see cref="T:Ingeniux.CMS.ISchemaVersion">SchemaVersion</see> objects.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.FieldsCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.ISchemaField">fields</see> in this schema.
            </summary>
            <returns>Count of <see cref="T:Ingeniux.CMS.ISchemaField">fields</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.Fields">
            <summary>
            Gets the collection of <see cref="T:Ingeniux.CMS.ISchemaField">fields</see> in this schema.
            </summary>
            <returns>Collection of schema fields in its natural order.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> by its name.
            </summary>
            <param name="fieldName">Name of the <see cref="T:Ingeniux.CMS.ISchemaField">field</see>. All schema field names must be valid XML element names.</param>
            <returns>Field with matching name. If matching name doesn't exist, returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.Field(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> by its positional index.
            </summary>
            <param name="index">Position of the <see cref="T:Ingeniux.CMS.ISchemaField">field</see></param>
            <returns>Field as the given position. If this position is out of range, returns null.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> to the collection, either at the specified position or at the end.
            </summary>
            <param name="field">New <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> to add</param>
            <param name="insertPosition">Position at which to insert this <see cref="T:Ingeniux.CMS.ISchemaField">field</see>.. If missing, appends new field to end of collection.</param>
            <returns>The index of the added <see cref="T:Ingeniux.CMS.ISchemaField">field</see>. If insertPosition is not specified, it will be the position of last field.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)">
            <summary>
            Removes from the collection a <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> at a specified index.
            </summary>
            <param name="index">Position of the <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.ISchemaField">field</see> exists at given position, false if the position of out of range.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearFields"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.ClearFields">
            <summary>
            Clears all <see cref="T:Ingeniux.CMS.ISchemaField">Fields</see> from the collection.
            </summary>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Fields"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.FieldsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.Field(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddField(Ingeniux.CMS.ISchemaField,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveField(System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.DefaultCategories">
            <summary>
            Retrieves the default <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see> collection for <see cref="T:Ingeniux.CMS.IPage">pages</see> created
            with this schema. When page is created, these categories are automaticaly applied to the page.
            </summary>
            <returns>Collection of default categories</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearDefaultCategories"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.DefaultCategoriesCount">
            <summary>
            Gets the count of default <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
            </summary>
            <returns>Count of default <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategories"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearDefaultCategories"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.ClearDefaultCategories">
            <summary>
            Clear all default <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
            </summary>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategories"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.AddDefaultCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Adds a new default <see cref="T:Ingeniux.CMS.ICategoryNode">category</see>.
            </summary>
            <param name="category">New category to add as default category</param>
            <remarks>If the <see cref="T:Ingeniux.CMS.ICategoryNode">CategoryNode</see> already exists in the collection, nothing happens.</remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategories"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearDefaultCategories"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.RemoveDefaultCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Removes a default <see cref="T:Ingeniux.CMS.ICategoryNode">category</see>.
            </summary>
            <param name="category">Default category to remove</param>
            <returns>True if a <see cref="T:Ingeniux.CMS.ICategoryNode">category</see> with a matching ID exists in the collection. Otherwise, returns false.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategories"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.DefaultCategoriesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddDefaultCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearDefaultCategories"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRoots">
            <summary>
            Retrieves the collection of <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
            Categories and their descendants in this collection are allowed to be associated with <see cref="T:Ingeniux.CMS.IPage">pages</see> created with this schema.
            </summary>
            <returns>Collection of allowed root categories.</returns>
            <remarks>
            <para>
            When this property is empty, all <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see> are allowed to be associated with <see cref="T:Ingeniux.CMS.IPage">pages</see>
            created with this schema.
            </para>
            <para>
            Note that any <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>, not just categories that are roots in the tree, must be added in this list.
            </para>
            </remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRootsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearAllowedCategoryRoots"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRootsCount">
            <summary>
            Gets the count of allowed root <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
            </summary>
            <returns>Count of allowed root <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRoots"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearAllowedCategoryRoots"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.ClearAllowedCategoryRoots">
            <summary>
            Clears all allowed root <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
            </summary>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRoots"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRootsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.AddAllowedRootCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Adds a new root <see cref="T:Ingeniux.CMS.ICategoryNode">category</see> to the allowed root categories collection.
            </summary>
            <param name="category">New category to add as an allowed root</param>
            <remarks>If the <see cref="T:Ingeniux.CMS.ICategoryNode">category</see> already exists in collection, nothing happens.</remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRoots"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRootsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.RemoveAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearAllowedCategoryRoots"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaBasic.RemoveAllowedRootCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.ICategoryNode">category</see> from the the allowed root categories collection.
            </summary>
            <param name="category">The allowed root category to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.ICategoryNode">category</see> exists in collection, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRoots"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AllowedCategoryRootsCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.AddAllowedRootCategory(Ingeniux.CMS.ICategoryNode)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaBasic.ClearAllowedCategoryRoots"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.Drafting">
            <summary>
            Gets whether the schema is in drafting state. When a schema is in drafting state, it cannot be used for <see cref="T:Ingeniux.CMS.IPage">page</see> creation.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.FriendlyName">
            <summary>
            Gets and sets the schema's friendly name.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.RootName">
            <summary>
            Gets and sets the name of the schema's root element.
            </summary>
            <remarks>Root element name must be a valid XML element name</remarks>
            <exception cref="T:System.ArgumentException">When trying to set this property with a null, empty, or whitespace value</exception>
            <exception cref="T:System.Xml.XmlException">When trying to set this property with a string that contains illegal characters for an XML element name</exception>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.IsComponent">
            <summary>
            Gets and sets whether this schema is for a component <see cref="T:Ingeniux.CMS.IPage">page</see>.
            </summary>
            <remarks>When a <see cref="T:Ingeniux.CMS.IPage">page</see> is a component, it doesn't have views (visual templates) associated with it.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.Icon">
            <summary>
            Gets and sets the icon of the <see cref="T:Ingeniux.CMS.IPage">page</see> to be created with this schema.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.IsDynamicSitePage">
            <summary>
            Gets and sets whether the <see cref="T:Ingeniux.CMS.IPage">page</see> to be created from this schema is a Dynamic Site Server page or a traditional XSLT page.
            Dynamic Site Server pages are not required to have <see cref="P:Ingeniux.CMS.ISchemaBasic.Stylesheet">stylesheet</see> values.
            </summary>
            <remarks>
            <para>
            On a Dynamic Site Server (Run-time) site, the rendering engine first searches for the view that matches either the value of <see cref="P:Ingeniux.CMS.ISchemaBasic.ViewName">ViewName</see>,
            or the <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">RootName</see> of page document. If view doesn't exist for either case, it tries to fall back to stylesheet.
            Setting this property to true only means it is not needed to set the <see cref="P:Ingeniux.CMS.ISchemaBasic.Stylesheet">stylesheet</see> property; it doesn't mean we cannot set it.
            </para>
            <para>
            Also, setting it to true doesn't mean that the <see cref="P:Ingeniux.CMS.ISchemaBasic.ViewName">ViewName</see> property is required.
            </para>
            <para>The purpose of this property is for visual presentation only in the CMS schema designer user interface.</para>
            </remarks>
            <seealso cref="P:Ingeniux.CMS.ISchemaBasic.ViewName"/>
            <seealso cref="P:Ingeniux.CMS.ISchemaBasic.Stylesheet"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.ViewName">
            <summary>
            Gets and sets the name of this page type's MVC view.
            </summary>
            <remarks>
            <para>
            This property is not required, regardless of whether <see cref="P:Ingeniux.CMS.ISchemaBasic.IsDynamicSitePage">IsDynamicSitePage</see>  is set to true or false.
            The view name always falls back to <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">RootName</see> if value of this property is null or empty.
            </para>
            <para>This property instructs the Dynamic Site Server rendering engine to choose a different view name rather than using the <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">root name</see>
            of the page XML document.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.Stylesheet">
            <summary>
            Gets and sets the entry XSLT style sheet name, located in the "xml/stylesheets" folder.
            </summary>
            <remarks>
            <para>This property is not required, even if <see cref="P:Ingeniux.CMS.ISchemaBasic.IsDynamicSitePage">IsDynamicSitePage</see> is set to false.</para>
            <para>If no view is found that matches either property, however, not setting it means that the Dynamic Site Server rendering engine outputs XML. 
            <see cref="P:Ingeniux.CMS.ISchemaBasic.ViewName">ViewName</see> or <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">RootName</see>.</para>
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.WorkflowRequired">
            <summary>
            Gets and sets whether <see cref="T:Ingeniux.CMS.IPage">pages</see> created via this schema are added to a <see cref="T:Ingeniux.CMS.IWorkflow">workflow</see> after creation.
            If this property is set to true, the <see cref="P:Ingeniux.CMS.ISchemaBasic.WorkflowDefinition">WorkflowDefinition</see> property must be set to a valid
            <see cref="T:Ingeniux.CMS.IWorkflowDefinition">workflow definition</see>. Otherwise, validation will fail.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ISchemaBasic.WorkflowDefinition"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.WorkflowDefinition">
            <summary>
            Gets and sets the workflow defintion for this schema. If set, <see cref="T:Ingeniux.CMS.IPage">pages</see> created with this schema
            will be added to a <see cref="T:Ingeniux.CMS.IWorkflow">workflow</see> based on this defintion right away.
            </summary>
            <remarks>This property is required, if <see cref="!:Ingeniux.CMS.ISchema.WorkflowRequired">WorkflowRequired</see> is true. If not set in that case, schema will not pass data validation before saving.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.Errors">
            <summary>
            Gets any errors associated with this schema.
            </summary>
            <remarks>Reserved for migrated legacy schemas from previous-generation CMS content.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.OriginPage">
            <summary>
            Gets the <see cref="T:Ingeniux.CMS.IPage">page</see> that updated or created this schema. This page will always be a page with 
            <see cref="T:Ingeniux.CMS.Presentation.IPagePresentation">presentations</see>.
            </summary>
            <remarks>Pages with presentations are allowed to update or create new schemas with presentation information included.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.Presentations">
            <summary>
            Gets the schema's <see cref="T:Ingeniux.CMS.Presentation.IPagePresentationCollection">presentations</see> collection, which is applied to all 
            <see cref="T:Ingeniux.CMS.IPage">pages</see> created from this schema.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaBasic.ContentUnitsInstantiability">
            <summary>
            Gets the collection of information on whether a Content Unit can be instantiated, and how many times it can be instantiated.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.Versions(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves the schema's history, which is a collection of all its previous <see cref="T:Ingeniux.CMS.ISchemaVersion">versions</see>, in a paginated fashion.
            </summary>
            <param name="count">Output total count of entries.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startingIndex">Starting index of entries. If not provided, starts from first entry.</param>
            <returns>Collection of previous <see cref="T:Ingeniux.CMS.ISchemaVersion">versions.</see></returns>
            <remarks>
            <see cref="T:Ingeniux.CMS.ISchemaManager">Schema manager</see> has a <see cref="!:Ingeniux.CMS.ISchemaManager.GetVersionLimit">versions limit</see> setting,
            which allows automatically cleans up older versions of schemas to keep the number of previous <see cref="T:Ingeniux.CMS.ISchemaVersion">versions</see> under the limit.
            Therefore, this collection may not be the entire history of this schema.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.VersionsCount">
            <summary>
            Gets the count of previous versions for this schema.
            </summary>
            <returns>Count of versions</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.Version(System.Int32)">
            <summary>
            Retrieves a previous <see cref="T:Ingeniux.CMS.ISchemaVersion">version</see> of this schema by its version number.
            </summary>
            <param name="version">Version number to retrieve</param>
            <returns>Previous version with matching version number. If version number is out of range, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.UpdateContent(System.Xml.Linq.XDocument)">
            <summary>
            Updates the schema with provided XML content and saves the schema in draft mode.
            If new content doesn't have a matching root name and friendly name, it will not be accepted.
            </summary>
            <param name="newContent">New content of schema XML</param>
            <exception cref="!:System.InvalidDataException">When the document has invalid schema XML</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.Save(System.Boolean)">
            <summary>
            Saves this schema.
            </summary>
            <param name="saveNewVersion">Whether to save the schema</param>
            <remarks>If saveNewVersion is true, a previous version will be created, and this schema is allowed to create pages. 
            If not, a previous version will not be created, and this schema will be in draft mode and cannot be used to create pages.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchema.IsSystemSchema">
            <summary>
            Checks whether this Schema is an essential schema that comes with default CMS instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ISchema.CurrentVersion">
            <summary>
            Gets the current <see cref="T:Ingeniux.CMS.ISchemaVersion">version</see> of this schema. <see cref="T:Ingeniux.CMS.IPage">Page</see> creation is
            based on the current version.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchema.CurrentVersionNumber">
            <summary>
            Gets the version number of the <see cref="P:Ingeniux.CMS.ISchema.CurrentVersion">current version</see>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchema.RuntimeIndexable">
            <summary>
            Gets/sets whether the Schema should be indexed at Runtime.
            This property will instruct the Runtime content indexing system for searches, to include the Schema for indexing or not.
            </summary>
            <remarks>This property only applies for Page Schemas. On Component Schemas</remarks>
        </member>
        <member name="M:Ingeniux.CMS.Schema.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.ISchemaManager,System.String)">
            <summary>
            Constructor for a new schema
            </summary>
            <param name="uniqueID"></param>
            <param name="rootName"></param>
            <param name="friendlyName"></param>
            <param name="schemaFilePath"></param>
            <param name="schemaDefs"></param>
            <param name="taxMan"></param>
        </member>
        <member name="M:Ingeniux.CMS.Schema.Save(System.Boolean)">
            <summary>
            By default, automatic tracked changes will put schema into draft mode. Use this function to save a new version
            and backup previous version.
            </summary>
            <param name="operatingUser"></param>
            <param name="saveNewVersion"></param>
        </member>
        <member name="T:Ingeniux.CMS.SchemaFieldDefinitions">
            <summary>
            The schema fields definitions. It is a singleton across entire app domain, since there should
            only be one definition at any time
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldDefinitions">
            <summary>
            Represents the collection of built-in schema <see cref="T:Ingeniux.CMS.ISchemaFieldType">field types</see>
            (<see cref="T:Ingeniux.CMS.IElement">Element</see> and <see cref="T:Ingeniux.CMS.IAttribute">Attribute</see> types) in the Ingeniux CMS.
            This collection contains all field types used to to construct a <see cref="T:Ingeniux.CMS.ISchema">schema</see>.
            </summary>
            <remarks>This collection is built into the system and cannot be changed.</remarks>
            <example>
            Below is the full collection of the field types in XML format:
            <code language="xml">
            <![CDATA[
            <Field id="1" name="Attribute" type="string" prefix="" icon="new16"/>
            <Field id="2" EnumId="1" name="Text Element" type="string" prefix="" icon="document16"/>
            <Field id="3" EnumId="2" name="XHTML Element" type="dhtml" prefix="dhtml" icon="edit16"/>
            <Field id="4" EnumId="3" name="Component" type="" prefix="xpowercomponent" icon="component16"/>
            <Field id="5" EnumId="17" name="List" type="" prefix="xpowerlist" icon="group16"/>
            <Field id="6" EnumId="4" name="Link" type="" prefix="xpowerlink" icon="link16" hasExport="true"/>
            <Field id="7" EnumId="5" name="Insert" type="" prefix="xpowerinsert" icon="insert16"/>
            <Field id="8" EnumId="6" name="Navigation" type="" prefix="xpowernavigation" icon="navigation16" hasExport="true"/>
            <Field id="9" EnumId="13" name="Checkbox" type="boolean" prefix="" icon="check16"/>
            <Field id="10" EnumId="22" name="Date" type="date" prefix="" icon="datetime16"/>
            <Field id="11" EnumId="21" name="Dropdown List" type="enumeration" prefix="" icon="dropdown16"/>
            <Field id="12" EnumId="26" name="Image File" type="imagefile" prefix="" icon="image16"/>
            <Field id="13" EnumId="27" name="Media File" type="mediafile" prefix="" icon="media16"/>
            <Field id="14" EnumId="28" name="Document" type="document" prefix="" icon="document16"/>
            <Field id="15" EnumId="15" name="GroupStart" type="" prefix="xpowergroupstart" icon="group16"/>
            <Field id="16" EnumId="16" name="GroupEnd" type="" prefix="xpowergroupend" icon="group16"/>
            <Field id="17" EnumId="8" name="ComExecute" type="" prefix="xpowercomexecute" icon="comcomponent16"/>
            <Field id="18" EnumId="11" name="JavaExecute" type="" prefix="xpowerjavaexecute" icon="javacomponent16" />
            <Field id="19" EnumId="25" name="Multi-Select: Hard-coded choices" type="multiselect" prefix="" icon="dropdown16"/>
            <Field id="20" EnumId="25" name="Multi-Select: Choices from Database Query" type="multiselect" prefix="" icon="dropdown16"/>
            <Field id="21" EnumId="25" name="Multi-Select: Choices from CMS node-set" type="multiselect" prefix="" icon="dropdown16"/>
            <Field id="22" EnumId="25" name="Multi-Select: Choices from external scripting" type="multiselect" prefix="" icon="dropdown16"/>
            <Field id="23" EnumId="18" name="TaxonomyNavigation" type="" prefix="xpowertaxonomynavigation" icon="navigation16" hasExport="true"/>
            <Field id="24" EnumId="19" name="References" type="" prefix="xpowerreferences" icon="references16" hasExport="true"/>
            <Field id="25" EnumId="14" name="password" type="" prefix="xpowerpassword" icon="comcomponent16" />
            <Field id="26" EnumId="20" name="LinkSet" type="" prefix="xpowerlinkset" icon="linkset16" hasExport="true"/>
            <Field id="27" EnumId="23" name="Local Date" type="localdate" prefix="" icon="datetime16"/>
            <Field id="28" EnumId="24" name="Local Time" type="localtime" prefix="" icon="datetime16"/>
            <Field id="29" EnumId="29" name="DynamicExecute" type="" prefix="xpowerdynamicexecute" icon="comcomponent16"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.ISchemaFieldType"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.Count">
            <summary>
            Gets the count of built-in <see cref="T:Ingeniux.CMS.ISchemaFieldType">field types</see>.
            </summary>
            <returns>The count of field types.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.Item(System.String)">
            <summary>
            Retrieves a field type by its name.
            </summary>
            <param name="name">Name of field type to retrieve</param>
            <returns>Field type with matching name. If the field doesn't exist, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.ItemByID(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchemaFieldType">field type</see> by its internal ID.
            Refer to the full list of field type IDs at <see cref="T:Ingeniux.CMS.ISchemaFieldDefinitions">SchemaFieldDefinitions</see>.
            </summary>
            <param name="id">The field type's internal ID.</param>
            <returns>Field type with a matching internal ID. If this ID doesn't exist, returns null.</returns>
            <remarks>The internal ID is not the same as the <see cref="T:Ingeniux.CMS.Enums.EnumElementType">enum type</see> of elements</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.AttributeFieldType">
            <summary>
            Retrieves the <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> field type. There is only one type of attribute field.
            </summary>
            <returns>The <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> field type. Is not null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.ElementType(Ingeniux.CMS.Enums.EnumElementType)">
            <summary>
            Retrieves a field type by <see cref="T:Ingeniux.CMS.Enums.EnumElementType">element type enum</see> value.
            </summary>
            <param name="elementType">Type of page element</param>
            <returns>Field type with matching element type enum value.</returns>
            <remarks>If element type is <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ATTRIBUTE"/>, returns the <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> type.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.ItemByPrefix(System.String)">
            <summary>
            Retrieves an Ingeniux properiatary field type by its prefix.
            </summary>
            <param name="prefix">Prefix of field type</param>
            <returns>Field type with matching prefix. If this prefix doesn't exist, returns null.</returns>
            <remarks>
            <para>
            In addition to all XPower elements having corresponding prefixes like "xpowercomponent_" or "xpowernavigation_", HTML elements could have either "dhtml_" or "xhtml_" prefixes.
            </para>
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.TextItemByType(System.String)">
            <summary>
            Retrieves a text element type by its standard "dt:type" value. These are standard schema types.
            </summary>
            <param name="type">dt:type value</param>
            <returns>Field type with matching dt:type.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.MultiSelectItemByContent(System.Xml.Linq.XElement)">
            <summary>
            Retrieves a multi-select field type by its implementation node.
            </summary>
            <param name="implementationNode">Multi-select implemenetation node</param>
            <returns>Multi-select field type with matching attributes collection.</returns>
            <remarks>There is only one <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_MULTI_SELECT"/> type on <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            There are four types of multi-select field types for schemas, and each type represents a collection of unique attributes.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldDefinitions.Items">
            <summary>
            Retrieves all built-in <see cref="T:Ingeniux.CMS.ISchemaFieldType">schema field types</see>. 
            </summary>
            <returns>All built-in field types.</returns>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldResult">
            <summary>
            Represents the combination of a <see cref="T:Ingeniux.CMS.ISchemaField">SchemaField</see>'s serialization result.
            It contains 3 pieces of xml to go to 2 different areas in the final <see cref="T:Ingeniux.CMS.ISchema">Schema</see> xml output
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldResult.IsAttribute">
            <summary>
            Gets whether the field output is for an <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> field.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldResult.Declaration">
            <summary>
            Gets the declaration element of the field
            </summary>
            <example>
            <para>
            Depending whether the field is an <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> or an <see cref="T:Ingeniux.CMS.IElement">element</see>,
            there are two types of declaration results:
            </para>
            <para>
            Attribute field output:
            </para>
            <code language="xml">
            <![CDATA[
            <AttributeType name="Timeout" dt:type="string" default="8"/>
            ]]>
            </code>
            <para>
            Element field output:
            </para>
            <code language="xml">
            <![CDATA[
            <ElementType name="Title" dt:type="string" content="textOnly"/>
            <ElementType name="xpowernavigation_AncestorNavigation" content="eltOnly"/>
            <ElementType name="xpowercomponent_SiteControl" content="eltOnly"/>
            ]]>
            </code>
            </example>
            <remarks>
            Attribute field output is always a standard data type with the "dt:type" attribute. Element field output can be standard "dt:type",
            or XPower type with an XPower prefix like "xpowercomponent_".
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldResult.ChildDeclaration">
            <summary>
            Gets the declaration of child element of the field. Only applies to <see cref="T:Ingeniux.CMS.IListElement">List elements</see>.
            The serialization format is identical to that of the <see cref="T:Ingeniux.CMS.IElement">Element</see> type field.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldResult.Implementation">
            <summary>
            <para>
            Gets the field's implementation element.
            Implementation elements are used to include details about the field and where it is placed in the <see cref="T:Ingeniux.CMS.IPage">page</see> XML.
            </para>
            <para>
            Implementation elements are always stored in the Declaration element of the Root element of a page's schema.
            </para>
            </summary>
            <example>
            <para>
            Depending on whether the field is an <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> or an <see cref="T:Ingeniux.CMS.IElement">element</see>,
            there are two types of implementation results:
            </para>
            <para>
            Attribute implementation output:
            </para>
            <code language="xml">
            <attribute type="Timeout" default="8" hidden="false" readonly="false" required="false" label="Timeout Setting"/>
            </code>
            <para>The "type" attribute value is the field name.</para>
            <para>
            Element implementation output:
            </para>
            <code language="xml">
            <![CDATA[
            	<element required="true" type="Title" readonly="false" label="Title" hidden="false"/>
            	<element required="false" type="xpowernavigation_AncestorNavigation" readonly="true" label="Ancestor Navigation" hidden="true" Expanded="false" StartPage="x2"
            		Query="" Navigation="Ancestors" MaxNodes="" MaxDepth="" GenerationOrder="down"/>
            	<element required="false" type="xpowercomponent_SiteControl" readonly="true" label="Site Control" hidden="true" Component="x10" CompTypes="SiteControl"/>
            ]]>
            </code>
            <para>
            Navigation element types may also contain an Exports element for local exports.
            </para>
            </example>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldType">
            <summary>
            Represents a built-in type of <see cref="T:Ingeniux.CMS.ISchemaField">schema field</see> in a <see cref="T:Ingeniux.CMS.ISchema">schema</see> (<see cref="T:Ingeniux.CMS.IAttribute">attribute</see> or <see cref="T:Ingeniux.CMS.IElement">element</see> in a <see cref="T:Ingeniux.CMS.IPage">page</see>).
            Most field types in a schema correspond to an <see cref="T:Ingeniux.CMS.Enums.EnumElementType"/> for a page, except for four types of multi-select fields that correspond to the <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_MULTI_SELECT"/> element type.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldType.PropertiesCount">
            <summary>
            Gets the count of exclusive properties for this field type.
            </summary>
            <returns>Count of exclusive properties</returns>
            <remarks>This count doesn't include properties like ReadOnly and Hidden that apply to all field types.</remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.Property(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.ExclusiveProperties"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldType.Property(System.String)">
            <summary>
            Retrieves an exclusive property of the field type by its name.
            </summary>
            <param name="name">Name of exclusive <see cref="T:Ingeniux.CMS.ISchemaFieldTypeProperty">property</see> for this field type</param>
            <returns>Exclusive property with matching name. Returns null if the property doesn't exist for this field type.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.PropertiesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.ExclusiveProperties"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldType.ExclusiveProperties">
            <summary>
            Retrieves all the exclusive properties of this field type.
            </summary>
            <returns>Collection of exclusive properties.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.PropertiesCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaFieldType.Property(System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.ID">
            <summary>
            Gets the field type's ID.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.Name">
            <summary>
            Gets the field type's name.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.DataType">
            <summary>
            Gets the field type's date type (dt:type) value.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.Prefix">
            <summary>
            Gets the field type's prefix. Only XPower and HTML field types have prefixes.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.IconName">
            <summary>
            Gets the field's icon name. This value is an actual image name.
            </summary>
            <example>
            icon="document16"
            </example>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.ElementType">
            <summary>
            Gets the field type's corresponding <see cref="!:Ingeniux.CMS.Enum.EnumElementType"/>.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.IsXpower">
            <summary>
            Gets whether this field type is an XPower field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldType.HasExports">
            <summary>
            Gets whether this field type can define local exports. If true, the field type is a navigation type of element.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaFieldTypeProperty">
            <summary>
            Represents an exclusive property of a <see cref="T:Ingeniux.CMS.ISchemaFieldType">Schema Field Type</see>
            </summary>
            <seealso cref="T:Ingeniux.CMS.ISchemaFieldType"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaFieldTypeProperty.Choices">
            <summary>
            Gets the built-in choices of this property. The value of the property (<see cref="T:Ingeniux.CMS.IAttribute">Attribute</see>) will be selected among these choices.
            </summary>
            <returns>Collection of choices</returns>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldTypeProperty.Name">
            <summary>
            Gets the name of this exclusive property
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaFieldTypeProperty.Type">
            <summary>
            Gets the type name of this exclusive property
            </summary>
            <remarks>Some fo the type name matches the "dt:type" value. Some of are beyond the allowed "dt:type" values.</remarks>
            <example>
            "boolean", "enumeration", "pages", "schemas"
            </example>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaManager">
            <summary>
            Represents the manager object that provides means to query and managee <see cref="T:Ingeniux.CMS.ISchema">schemas</see> and
            <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">schema field favorites</see>. It also provides the built-in <see cref="T:Ingeniux.CMS.ISchemaFieldDefinitions">field definitions</see>.
            </summary>
            <remarks>
            <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object and only work within that session.</para>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	ISchemaManager schemasManager = session.SchemasManager;
            	...
            }
            </code>
            </remarks>
            <example>
            <para>
            There is a metadata XML file from previous-generation CMS content for schema manager; therefore, its output is simply the <see cref="T:Ingeniux.CMS.ISchema">schema</see> count.
            </para>
            <code language="xml">
            <Schemas Count="123"/>
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.ISchema"/>
            <seealso cref="T:Ingeniux.CMS.ISchemaFieldDefinitions"/>
            <seealso cref="T:Ingeniux.CMS.ISchemaFieldFavorite"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.CreateComponentSchema(System.String,System.String,System.Int32)">
             <summary>
             Creates a new component <see cref="T:Ingeniux.CMS.ISchema">schema</see>. 
             This schema creates a component <see cref="T:Ingeniux.CMS.IPage">page</see>, which doesn't have a fixed
             view associated with it.
             </summary>
             <param name="name">The new schema's root element name, which must be a valid XML element name.</param>
             <param name="friendlyName">The new schema's friendly name. This can be any name you choose, but it's recommended that you limit its length.</param>
             <param name="icon">An icon ID, which corresponds to an icon image.</param>
             <returns>The newly created component schema.</returns>
             <remarks>
             <para>
             The returned <see cref="T:Ingeniux.CMS.ISchema">schema</see> is not yet saved to the content store.
             </para>
             <para>
             The "name" parameter provided cannot be null, empty, or whitespace, and it must be a valid XML element name.
             </para>
             <para>
             The friendly names and root element names are unique to the <see cref="T:Ingeniux.CMS.ISchema">schema's</see> collection.
             If any schemas with a matching friendly name or root element name already exist, an error is thrown.
             </para>
             <para>
             The newly created <see cref="T:Ingeniux.CMS.ISchema">schema</see> will be in <see cref="!:Ingeniux.CMS.ISchema.Drafting">draft</see> mode.
             It cannot be used to create <see cref="T:Ingeniux.CMS.IPage">pages</see> until it is <see cref="M:Ingeniux.CMS.ISchema.Save(System.Boolean)">saved</see> with a new version.
             </para>
             <para>
             If the icon ID provided doesn't match any icon images, it defaults to a blank page icon.
             </para>
             <para>
             The newly created <see cref="T:Ingeniux.CMS.ISchema">schema</see> doesn't have any fields yet. Fields must be added to the 
             returned object before saving (for more information, see <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession disposal</see>).
             </para>
             </remarks>
             <example>
             The following example shows how to create a component schema, add one <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> and 
             one <see cref="T:Ingeniux.CMS.IElement">element</see> field, and save to allow page creation.
             <code language="C#">
             <![CDATA[
            using (IUserWriteSession session = _Store.OpenWriteSession(operatingUser))
            {
            		schema = session.SchemasManager.CreateComponentSchema("NewsDetails", "News Details", 2);
            		
            		ISchemaFieldType attributeType = session.SchemasManager.FieldDefinitions.ItemByID("1");
            		ISchemaField attribField = new SchemaField(attributeType,
            			"Source", "Source Publication");
            		attribField.HelpText = "The Publication that first published the news";
            		attribField.DefaultValue = "Seattle Times";
            		
            		ISchemaFieldType textElementType = session.SchemasManager.FieldDefinitions.ItemByID("2");
            		ISchemaField textField = new SchemaField(textElementType,
            			"Title", "Title", true, false, false);
            			
            		schema.AddField(attribField);
            		schema.AddField(textField);
            		schema.Save(true);
            }
             ]]>
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException">When the "name" parameter is null, empty or contains whitespace</exception>
             <exception cref="T:System.ArgumentException">When the "name" parameter is not a valid XML element name, or there are already
             schemas with the same root name or friendly name.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)">
             <summary>
             Creates a new <see cref="T:Ingeniux.CMS.ISchema">Schema</see>. This can be either a page or component schema.
             </summary>
             <param name="name">The new schema's root element name. This must be a valid XML element name.</param>
             <param name="friendlyName">The new schema's friendly name. This can be any name you choose, but it's recommended that you limit its length.</param>
             <param name="icon">An icon ID, which corresponds to an icon image.</param>
             <param name="isComponent">If true, the schema creates a component. If false, it creates a page.</param>
             <param name="isViewPage">Specifies whether <see cref="T:Ingeniux.CMS.IPage">page</see> this schema creates will render
             using MVC views or XSLT style sheets. Has no effect if "isComponent" is true.
             </param>
             <param name="viewNameorStylesheetName">Specifies the view or XSLT style sheet file name for the <see cref="T:Ingeniux.CMS.IPage">pages</see> created from this schema.
             If "isViewPage" is true, it will be the view name; otherwise, it will be the XSLT entry style sheet file name.
             </param>
             <param name="presentations">Specifies the <see cref="T:Ingeniux.CMS.Presentation.IPagePresentationCollection">presentations collection</see> that is applied to pages created from this schema.</param>
             <returns>The newly created schema.</returns>
             <remarks>
             <para>
             The schema returned is not yet saved to the content store.
             </para>
             <para>
             The "name" paramter provided cannot be null, empty, or contain whitespace, and it must be a valid XML element name.
             </para>
             <para>
             The friendly names and root element names are unique to the <see cref="T:Ingeniux.CMS.ISchema">schema's</see> collection.
             If any schemas with a matching friendly name or root element name already exist, an error is thrown.
             </para>
             <para>
             The newly created <see cref="T:Ingeniux.CMS.ISchema">schema</see> will be in <see cref="!:Ingeniux.CMS.ISchema.Drafting">draft</see> mode.
             It cannot be used to create <see cref="T:Ingeniux.CMS.IPage">pages</see> until it is <see cref="M:Ingeniux.CMS.ISchema.Save(System.Boolean)">saved</see> with a new version.
             </para>
             <para>
             If the icon ID provided doesn't match any icon images, it defaults to a blank page icon.
             </para>
             <para>
             The newly created <see cref="T:Ingeniux.CMS.ISchema">schema</see> doesn't have any fields yet. Fields must be added to the 
             returned object before saving (for more information, see <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession disposal</see>).
             </para>
             <para>
             On a Dynamic Site Server (run-time) site, the rendering engine first searches for the view that matches either the value of <see cref="P:Ingeniux.CMS.ISchemaBasic.ViewName">ViewName</see>,
             or the <see cref="P:Ingeniux.CMS.ISchemaBasic.RootName">RootName</see> of page document. If the view doesn't exist, it tries to fall back to the style sheet.
             isViewPage being true only means it is not needed to set the <see cref="P:Ingeniux.CMS.ISchemaBasic.Stylesheet">style sheet</see> property; it doesn't mean you cannot set it.
             </para>
             <para>
             Setting isViewPage to true doesn't mean that the <see cref="P:Ingeniux.CMS.ISchemaBasic.ViewName">ViewName</see> property is required.
             </para>
             <para>The purpose of this parameter is for visual presentation only in the CMS schema designer user interface.</para>
             </remarks>
             <example>
             The following example shows how to create a page schema, add one <see cref="T:Ingeniux.CMS.IAttribute">attribute</see> and 
             one <see cref="T:Ingeniux.CMS.IElement">element</see> field, and save to allow page creation.
             <code language="C#">
             <![CDATA[
            using (IUserWriteSession session = _Store.OpenWriteSession(operatingUser))
            {
            		//Create a new View page with View Name "News", instead of the default "NewsDetails"
            		schema = session.SchemasManager.CreateSchema("NewsDetails", "News Details", 2, False, True, "News");
            		
            		ISchemaFieldType attributeType = session.SchemasManager.FieldDefinitions.ItemByID("1");
            		ISchemaField attribField = new SchemaField(attributeType,
            			"Source", "Source Publication");
            		attribField.HelpText = "The Publication that first published the news";
            		attribField.DefaultValue = "Seattle Times";
            		
            		ISchemaFieldType textElementType = session.SchemasManager.FieldDefinitions.ItemByID("2");
            		ISchemaField textField = new SchemaField(textElementType,
            			"Title", "Title", true, false, false);
            			
            		schema.AddField(attribField);
            		schema.AddField(textField);
            		schema.Save(true);
            }
             ]]>
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException">When the "name" parameter is null, empty, or contains whitespace.</exception>
             <exception cref="T:System.ArgumentException">When the "name" parameter is not a valid XML element name; there are already
             schemas with same root name or friendly name; or the view name or style sheet name is invalid.</exception>
             <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
             <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
             <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
             <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
             <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)">
            <summary>
            Imports a <see cref="T:Ingeniux.CMS.ISchema">schema</see> with a string serialization of the previous-generation schema XML file.
            </summary>
            <param name="schemaContent">XML content of a schema file.</param>
            <param name="overwrite">Overwrite existing schema if found</param>
            <returns>Imported content.</returns>
            <remarks>
            <para>
            The content string must be parsed so that it is valid schema XML.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When the string is invalid XML or invalid schema XML.</exception>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.Xml.Linq.XDocument,System.Boolean)">
            <summary>
            Imports a <see cref="T:Ingeniux.CMS.ISchema">schema</see> with a string serialization of the previous-generation schema XML file.
            </summary>
            <param name="schemaContent">XML content of a schema file.</param>
            <param name="overwrite">Overwrite existing schema if found</param>
            <returns>Imported content.</returns>
            <remarks>
            <para>
            The content must be valid schema XML.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">When the string is invalid XML or invalid schema XML.</exception>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.ParseSchema(System.Xml.Linq.XDocument)">
            <summary>
            Parse xml document and convert it into schema entity. Please note that this entity is not saved to database yet.
            </summary>
            <param name="schemaContent">The schema document</param>
            <returns>Parse schema entity</returns>
            <exception cref="T:System.ArgumentNullException">When schemaContent parameter is null</exception>
            <exception cref="T:System.Xml.XmlException">When schemaContent is not a valid schema document</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)">
            <summary>
            Removes an existing <see cref="T:Ingeniux.CMS.ISchema">schema</see>.
            </summary>
            <param name="schema">Schema to remove</param>
            <returns>True if the <see cref="T:Ingeniux.CMS.ISchema">schema</see> is not null and exists in collection, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SchemasCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.ISchema">schemas</see>, including schemas with errors that cannot be used
            to create <see cref="T:Ingeniux.CMS.IPage">pages</see>.
            </summary>
            <returns>Count of all schemas.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount">
            <summary>
            Gets the count of valid <see cref="T:Ingeniux.CMS.ISchema">schemas</see>, which can be used to create <see cref="T:Ingeniux.CMS.IPage">pages</see>.
            </summary>
            <returns>Count of valid schemas.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.Schemas(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves schemas in a paginated fashion.
            </summary>
            <param name="count">Ouput count of all <see cref="T:Ingeniux.CMS.ISchema">schemas</see></param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of schemas.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.Schemas(System.String[])">
            <summary>
            Retrieves schemas by unique ID.
            </summary>
            <param name="schemaIds">Array of schema IDs</param>
            <returns>Schemas with matching IDs</returns>
            <remarks>If there are IDs that don't exist in the collection, the returned collection count will not match the count of IDs. Additionally, the <see cref="T:Ingeniux.CMS.ISchema">schemas'</see> positions will not necessarily match the ID positions.</remarks>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.CreateSchema(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ImportSchema(System.String,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.RemoveSchema(Ingeniux.CMS.ISchema)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemasCount"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.ValidSchemasCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.HasSchemaFriendlyName(System.String)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.ISchema">schema</see> with a given <see cref="!:Ingeniux.CMS.ISchema.FriendlyName">friendly name</see>
            exists in the collection.
            </summary>
            <param name="friendlyName">Schema friendly name to check.</param>
            <returns>True if the schema exists, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaID(System.String)"/>
            <seealso cref="!:Ingeniux.CMS.ISchemaManager.HasSchemaRootName"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByFriendlyName(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.HasSchemaID(System.String)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.ISchema">schema</see> with a given <see cref="!:Ingeniux.CMS.ISchema.Id">ID</see> exists
            in collection.
            </summary>
            <param name="schemaId">The schema's unique ID.</param>
            <returns>True if the schema exists, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaFriendlyName(System.String)"/>
            <seealso cref="!:Ingeniux.CMS.ISchemaManager.HasSchemaRootName"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByID(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SchemaRootNameAvailable(System.String,Ingeniux.CMS.Presentation.IPagePresentationCollection)">
            <summary>
            Checks whether a <see cref="T:Ingeniux.CMS.ISchema">schema</see> with a given <see cref="!:Ingeniux.CMS.ISchema.RootName">page root element name</see> exists
            in the collection.
            </summary>
            <param name="rootName">The schema's page root element name</param>
            <returns>True if the schema exists, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaFriendlyName(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaID(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByRootName(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SchemaByFriendlyName(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchema">schema</see> by its <see cref="!:Ingeniux.CMS.ISchema.FriendlyName">friendly name</see>.
            Friendly names are unique to a schema's collection.
            </summary>
            <param name="friendlyName">The schema's friendly name</param>
            <returns>Schema with matching friendly name. Returns null if the friendly name doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByID(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByRootName(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaFriendlyName(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SchemaByID(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchema">schema</see> by its <see cref="!:Ingeniux.CMS.ISchema.Id">ID</see>.
            </summary>
            <param name="uniqueID">The schema's ID.</param>
            <returns>Schema with matching ID. Returns null if the ID doesn't exit or it is not a schema entity.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByFriendlyName(System.String)"/>		
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByRootName(System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.HasSchemaID(System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SchemaByRootName(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchema">schema</see> by its <see cref="!:Ingeniux.CMS.ISchema.RootName">page root element name</see>.
            Root element names are unique to a schema's collection.
            </summary>
            <param name="rootName">The schema's page root element name</param>
            <returns>Schema with matching page root element name. Returns null if this name doesn't exist.</returns>
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByFriendlyName(System.String)"/>		
            <seealso cref="M:Ingeniux.CMS.ISchemaManager.SchemaByID(System.String)"/>
            <seealso cref="!:Ingeniux.CMS.ISchemaManager.HasSchemaRootName"/>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.SystemSchema(Ingeniux.CMS.Enums.EnumSystemSchema)">
            <summary>
            Retrieves one of the six <see cref="T:Ingeniux.CMS.Enums.EnumSystemSchema">system schemas</see>.
            These system schemas are essential to CMS functionality and cannot be modified via the CSAPI.
            </summary>
            <param name="systemSchemaType">The type of system schema to retrieve.</param>
            <returns>The system schema with matching enum value.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.Favorites(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves all the <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">schema field favorites</see>, in a paginated fashion.
            These favorites are field combinations used to make <see cref="T:Ingeniux.CMS.ISchema">schema</see> design more convenient for users.
            </summary>
            <param name="count">Output total count of schema field favorites</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of schema favorites.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.Favorite(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">schema field favorite</see> entry by it unique ID.
            </summary>
            <param name="id">ID of the schema field favorite.</param>
            <returns>Schema field favorite with matching ID. Returns null if this ID doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.AddFavorite(Ingeniux.CMS.ISchemaFieldFavorite)">
            <summary>
            Adds a new <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">schema field favorite</see> entry to a collection.
            </summary>
            <param name="favEntry">New favorite entry to add.</param>
        </member>
        <member name="M:Ingeniux.CMS.ISchemaManager.RemoveFavorite(System.String)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.ISchemaFieldFavorite">schema field favorite</see> entry from a collection
            by its unique ID.
            </summary>
            <param name="favEntryId">Unique ID of the favorite</param>
            <returns>True if favorite if the ID exists, false otherwise.</returns>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaManager.FieldDefinitions">
            <summary>
            Gets the built-in field definitions of schemas and pages. <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> are constructued from 
            these units.
            </summary>
            <remarks>
            <see cref="T:Ingeniux.CMS.ISchemaFieldDefinitions">Field definitions</see> is a fixed list for each version of Ingeniux CMS.
            It cannot be manipulated.
            </remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaManager.VersionsLimit">
            <summary>
            Gets and sets the settings for the number of <see cref="T:Ingeniux.CMS.ISchemaVersion">schema versions</see> the CMS keeps.
            If the limit is reached, the oldest previous versions of a schema are removed when a new version is saved.
            </summary>
            <remarks>
            <para>
            By default, the CMS stores 10 version of a schema. When set to 0, the CMS allows unlimited schema versions and does not autotomatically archive
            any previous versions.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the <see cref="!:Ingeniux.CMS.IUserWriteSession.OperatingUser">operating user</see>
            of the <see cref="T:Ingeniux.CMS.IUserWriteSession">UserWriteSession</see> is not an administrator.</exception>
        </member>
        <member name="F:Ingeniux.CMS.SchemaManager.DexRootNameToComExFileNameMap">
            <summary>
            Map of dynamic execute schema root name to old com execute schema file name
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISchemaVersion">
             <summary>
             Represents a version entry of a <see cref="T:Ingeniux.CMS.ISchema">Schema</see>. Can be the current version or the previous version.
             </summary>
             <example>
             <para>
             Schemas versions are retrieved from schemas.
             </para>
             <para>
             To retrieve the current version, use the <see cref="P:Ingeniux.CMS.ISchema.CurrentVersion">CurrentVersion</see> property:
             </para>
             <code language="C#">
             ISchemaVersion schemaCurrentVersion = schema.CurrentVersion;
             </code>
             <para>
             To retrieve a previous version, use the <see cref="M:Ingeniux.CMS.ISchema.Version(System.Int32)">Version</see> method:
             </para>
             <code language="C#">
             ISchemaVerison version3 = schema.Version(3);
             </code>
             </example>
             <para>
             The serialization output of a schema version is the same as the serialization output of a <see cref="T:Ingeniux.CMS.ISchema">schema</see>:
             </para>
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Schema name="AtoZIndex" xmlns="urn:schemas-microsoft-com:xml-data" xmlns:dt="urn:schemas-microsoft-com:datatypes">
            		<AttributeType dt:type="id" name="ID" required="yes" />
            		<AttributeType dt:type="string" name="Name" required="yes" />
            		<AttributeType default="8" dt:type="int" name="Icon" />
            		<AttributeType default="A to Z Index" dt:type="string" name="FriendlyName" />
            		<AttributeType default="true" dt:type="boolean" name="SS" />
            		<AttributeType default="default.xsl" dt:type="string" name="DefaultStyleSheet" />
            		<AttributeType default="" dt:type="string" name="DefaultCategorization" />
            		<AttributeType name="Version" dt:type="int" default="1" />
            		<AttributeType name="UniqueID" dt:type="int" default="57" />
            		<ElementType content="textOnly" name="Exports" />
            		<ElementType content="textOnly" dt:type="string" name="Title" />
            		<ElementType content="textOnly" dt:type="string" name="Abstract" />
            		<ElementType content="eltOnly" name="xpowergroupstart_SEOGroup" />
            		<ElementType content="textOnly" dt:type="string" name="NavName">
            			<description>The text used for links in site navigations.  Defaults on page creation to the title.</description>
            		</ElementType>
            		<ElementType content="textOnly" dt:type="string" name="BrowserBarTitle" />
            		<ElementType content="textOnly" dt:type="string" name="MetaDescription" />
            		<ElementType content="textOnly" dt:type="string" name="MetaKeywords" />
            		<ElementType content="textOnly" dt:type="enumeration" name="Priority" values=".9 .8 .7 .6 .5 .4 .3 .2 .1" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoFollow" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoIndex" />
            		<ElementType content="textOnly" dt:type="boolean" name="NoODP" />
            		<ElementType content="eltOnly" name="xpowergroupend" />
            		<ElementType content="eltOnly" name="dhtml_BodyCopy" />
            		<ElementType content="eltOnly" name="xpowertaxonomynavigation_ExclusionCategory">
            			<description>Select a category that will exclude tagged items from the A-Z index</description>
            		</ElementType>
            		<ElementType content="eltOnly" name="xpowernavigation_AncestorNavigation" />
            		<ElementType content="eltOnly" name="xpowercomponent_SiteControl" />
            		<ElementType content="eltOnly" name="AtoZIndex" order="seq">
            			<attribute type="ID" />
            			<attribute type="Name" />
            			<element hidden="false" label="Title" readonly="false" required="true" type="Title" />
            			<element hidden="false" label="Abstract" readonly="false" required="true" type="Abstract" />
            			<element Expanded="false" hidden="true" label="SEO Group" readonly="false" required="false" type="xpowergroupstart_SEOGroup" />
            			<element hidden="false" label="Navigation Name" readonly="false" required="false" type="NavName" />
            			<element hidden="false" label="Browser Bar Title" readonly="false" required="false" type="BrowserBarTitle" />
            			<element hidden="false" label="Meta Description" readonly="false" required="false" type="MetaDescription" />
            			<element hidden="false" label="Meta Keywords" readonly="false" required="false" type="MetaKeywords" />
            			<element hidden="false" label="Priority" readonly="false" required="false" type="Priority" />
            			<element hidden="false" label="No Follow" readonly="false" required="false" type="NoFollow" />
            			<element hidden="false" label="No Index" readonly="false" required="false" type="NoIndex" />
            			<element hidden="false" label="No ODP" readonly="false" required="false" type="NoODP" />
            			<element type="xpowergroupend" />
            			<element hidden="false" label="Body Copy" readonly="false" required="false" type="dhtml_BodyCopy" />
            			<element Depth="" FilterParentPages="" FilterSchemas="" IncludePages="false" StartNodes="" hidden="false" label="Exclusion Category" readonly="false" required="false" type="xpowertaxonomynavigation_ExclusionCategory" />
            			<element Expanded="false" GenerationOrder="down" MaxDepth="" MaxNodes="" Navigation="Ancestors" Query="" StartPage="x2" hidden="true" label="Ancestor Navigation" readonly="true" required="false" type="xpowernavigation_AncestorNavigation" />
            			<element CompTypes="SiteControl" Component="x10" hidden="true" label="Site Control" readonly="true" required="false" type="xpowercomponent_SiteControl" />
            		</ElementType>
            </Schema>
             ]]>
             </code>
             <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
             <seealso cref="T:Ingeniux.CMS.ISchemaManager"/>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaVersion.SchemaId">
            <summary>
            Gets the entity ID of the <see cref="T:Ingeniux.CMS.ISchema">schema</see> that this schema version belongs to.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaVersion.IsCurrentVersion">
            <summary>
            Checks whether this version is the <see cref="T:Ingeniux.CMS.ISchema">schema</see>'s current version.
            </summary>
            <remarks>The current version of a <see cref="T:Ingeniux.CMS.ISchema">schema</see> also has its own <see cref="P:Ingeniux.CMS.ISchemaVersion.VersionNumber">version number</see>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ISchemaVersion.VersionNumber">
            <summary>
            Gets the this schema version's version number.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IBrandEntryBase">
            <summary>
            Represents the base of branding entries (Site, UserAgent). This is a branding system used only for XSLT rendering.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IBrandEntryBase.SearchString">
            <summary>
            Gets and sets the search string of this brand entry.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISiteBranding">
            <summary>
            Represents the site branding system, which defines cobranding at the server level. It is used only for XSLT rendering.
            <para>
            Each Site Branding entry corresponding to a presentation style collection.
            Site Branding at run time is determined by locating its search string on the request URL. If the search string is found on the request URL, site branding is applied.
            </para>
            <para>
            In other words, site brandings allow for presentation style switching based on request URL, include host name, base URL, and query strings.
            </para>
            </summary>
            <remarks>
            <para>At run time, site branding information is included in the IGX_Info/XPRESS/Site element:</para>
            <code language="xml">
            <![CDATA[
            <IGX_Info>
            	<XPRESS>
            		<SITE>print</SITE>
            	</XPRESS>
            </IGX_Info>
            ]]>
            </code>
            <para>User agent brandings are managed by the <see cref="T:Ingeniux.CMS.ISiteMap"/> Manager object.</para>
            </remarks>
            <example>
            Site branding is retrieved from <see cref="T:Ingeniux.CMS.ISiteMap"/>:
            <code language="C#">
            ISiteBranding siteBrand = session.SiteMap.Site("print");
            </code>
            </example>
            <seealso cref="M:Ingeniux.CMS.ISiteMap.Site(System.String)"/>
        </member>
        <member name="P:Ingeniux.CMS.ISiteBranding.SiteGroup">
            <summary>
            Gets and sets the group to which this site branding belongs. Optional.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ISiteMap">
            <summary>
            Represents the manager object that manages the XSLT rendering branding system.
            It add entries to, removes entries from, and updates <see cref="T:Ingeniux.CMS.ISiteBranding"/> and <see cref="T:Ingeniux.CMS.IUserAgent"/>.
            </summary>
            <remarks>
            <para>
            Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object, and it only works within this session. 
            </para>
            <code language="C#">
            using (IUserSession session = store.OpenReadSession(currentUser))
            {
            	ISiteMap siteMap= session.SiteMap;
            	...
            }
            </code>
            </remarks>
            <seealso cref="T:Ingeniux.CMS.ISiteBranding"/>
            <seealso cref="T:Ingeniux.CMS.IUserAgent"/>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.UserAgents(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Gets a paginated list of user agents.
            </summary>
            <param name="count">Output total count</param>
            <param name="pageSize">Number of items to return. Default is all items.</param>
            <param name="startIndex">Starting item index. Default is first item.</param>
            <returns>Collection of UserAgent entries</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.Sites(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Gets a paginated list of site brandings.
            </summary>
            <param name="count">Output total count</param>
            <param name="pageSize">Number of items to return. Default is all items.</param>
            <param name="startIndex">Starting item index. Default is first item.</param>
            <returns>Collection of site branding entries</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.UserAgent(System.String)">
            <summary>
            Gets a user agent branding by its name
            </summary>
            <param name="userAgentName">Name of the user agent branding</param>
            <returns>The user agent branding with matching name. Returns null if this user agent doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.Site(System.String)">
            <summary>
            Gets a site branding by its name.
            </summary>
            <param name="siteName">Name of site branding</param>
            <returns>The site branding with matching name. If this site branding doesn't exist, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.AddUserAgent(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new user agent branding to a collection.
            </summary>
            <param name="name">Name of new user agent branding. This parameter cannot be null or empty.</param>
            <param name="searchString">Search string of the user agent branding. Not case-sensitive, cannot be null or empty.</param>
            <param name="contentType">User agent branding content type</param>
            <param name="fileExtension">User agent branding file extension (reserved for MFO publish)</param>
            <returns>Newly created user agent branding.</returns>
            <exception cref="T:System.ArgumentNullException">When name or search string provided is null or empty</exception>
            <exception cref="T:System.ArgumentException">When entries with the same name or search string exist in the collection.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.AddSite(System.String,System.String,System.String)">
            <summary>
            Adds a new site branding to a collection.
            </summary>
            <param name="name">Name of the new site branding. This parameter cannot be null or empty.</param>
            <param name="searchString">Search string of the site branding. Not case-sensitive, cannot be null or empty.</param>
            <param name="siteGroup">Site group name (optional)</param>
            <returns>Newly created site branding.</returns>
            <exception cref="T:System.ArgumentNullException">When the name or search string provided is null or empty.</exception>
            <exception cref="T:System.ArgumentException">When entries with the same name or search string exist in the collection.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.UpdateUserAgent(Ingeniux.CMS.IUserAgent)">
            <summary>
            Updates content of a user agent branding instance.
            </summary>
            <param name="newUserAgentInfo">Updated information</param>
            <returns>Newly updated user agent. Null if user agent with given name doesn't exist.</returns>
            <remarks>Nothing happens if the user agent with given name doesn't exist.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.UpdateSite(Ingeniux.CMS.ISiteBranding)">
            <summary>
            Updates content of a site branding instance.
            </summary>
            <param name="newSiteInfo">Updated information</param>
            <returns>Newly updated site branding. Null if site branding with given name doesn't exist.</returns>
            <remarks>Nothing happens if the site branding with the given name doesn't exist.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.ReorderUserAgents(System.String[])">
            <summary>
            Reorders user agent branding with given order of user agent names.
            </summary>
            <param name="order">An array of user agent branding names in the desire order</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When order count doesn't match collection count, or the names in the order array don't exist in the collection.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.ReorderSites(System.String[])">
            <summary>
            Reorders site branding with given order of user agent names.
            </summary>
            <param name="order">An array of site branding names in the desired order</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When order count doesn't match collection count, or the names in the order array don't exist in the collection.</exception>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.RemoveUserAgent(Ingeniux.CMS.IUserAgent)">
            <summary>
            Removes a user agent branding from a collection.
            </summary>
            <param name="userAgent">User agent to remove. Only the value of the name property counts.</param>
            <returns>True if user agent name exists in collection and removal is successful. Returns false if the name doesn't exist.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ISiteMap.RemoveSite(Ingeniux.CMS.ISiteBranding)">
            <summary>
            Removes a site branding from a collection.
            </summary>
            <param name="site">Site branding to remove. Only the value of the name property counts.</param>
            <returns>True if site name exists in collection and removal is successful. Returns false if the name doesn't exist.</returns>
        </member>
        <member name="T:Ingeniux.CMS.IUserAgent">
            <summary>
            Represents a user agent branding. This is a branding system used only for XSLT rendering.
            <para>
            User agent branding is used to define cobranding at the client level. Each user agent branding entry corresponds to a presentation style collection.
            User agent branding at run time is determined by locating its search string on the requested, browser-specific user agent string. If the search string is found on the requested user agent, then this user agent branding is applied.
            </para>
            <para>
            Creating user agent brandings allows presentation style switching based on browser type. This is mainly used for mobile-device detection.
            </para>
            </summary>
            <remarks>
            <para>At run time, the information of applied user agent branding is included in the IGX_Info/XPRESS/USER_AGENT element:</para>
            <code language="xml">
            <![CDATA[
            <IGX_Info>
            	<XPRESS>
            		<USER_AGENT>mobile</USER_AGENT>
            	</XPRESS>
            </IGX_Info>
            ]]>
            </code>
            <para>User agent brandings are managed by the <see cref="T:Ingeniux.CMS.ISiteMap"/> manager object.</para>
            </remarks>
            <example>
            User agent brandings are retrieved from <see cref="T:Ingeniux.CMS.ISiteMap"/>:
            <code language="C#">
            IUserAgent siteBrand = session.SiteMap.UserAgent("mobile");
            </code>
            </example>
            <seealso cref="T:Ingeniux.CMS.ISiteMap"/>
        </member>
        <member name="P:Ingeniux.CMS.IUserAgent.ContentType">
            <summary>
            Gets and sets the type of content this user agent should present. 
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IUserAgent.FileExtension">
            <summary>
            Getss and sets the file extension this user agent should present.
            </summary>
            <remarks>This property is reserved for MFO publish only. It doesn't apply to normal requests.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.IAssetNodeLevelPermission">
            <summary>
            Represents a unit of security permission to apply to a particular asset folder or file.
            </summary>
            <remarks>This permission entry applies to both files and folders.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.IAssetNodeLevelPermission.GroupId">
            <summary>
            Gets and sets the UserGroup ID for this permission entry.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IAssetNodeLevelPermission.Permission">
            <summary>
            Gets and sets the permission for the given UserGroup.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.INodeLevelPermission">
            <summary>
            Represents a unit of security permission to apply to a particular object. The object represents a node in the tree structure.
            </summary>
            <example>
            This permission object is used on <see cref="T:Ingeniux.CMS.IPage">Page</see> and <see cref="T:Ingeniux.CMS.ICategoryNode">CategoryNode</see> objects to describe security permissions.
            </example>
        </member>
        <member name="P:Ingeniux.CMS.INodeLevelPermission.GroupId">
            <summary>
            Gets and sets the UserGroup ID for this permission entry.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.INodeLevelPermission.Permission">
            <summary>
            Gets and sets the permission for the given UserGroup.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ICategoryNode">
            <summary>
            <para>
            Represents one CategoryNode in the Taxonomy tree.
            </para>
            <para>
            Categories are used to tag <see cref="T:Ingeniux.CMS.IPage">Page</see> objects, creating another way to organize and index Page objects.
            </para>
            <para>
            The Taxonomy system is hierarchical. Each CategoryNode may have parent and children nodes.
            </para>
            </summary>
            <remarks>
            <para>
            CategoryNode instances are retrieved from <see cref="T:Ingeniux.CMS.ITaxonomyManager">TaxonomyManager</see>:
            </para>
            <code language="C#">
            ICategoryNode category = session.TaxonomyManager.Category("Categories/342");
            </code>
            </remarks>
            <example>
            Example of XML serialization for a CategoryNode "Animalia"
            <code language="xml">
            <![CDATA[
            <C ID="198" N="Animalia" D="Animals Category" EID="G2374D-T948975" T="Kingdom" locale="en-us" LUU="ingeniux\awang" LUD="20130815T16:24:08" />
            ]]>
            </code>
            </example>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Category(System.String)"/>
            <seealso cref="T:Ingeniux.CMS.IHierarchyId"/>
            <seealso cref="T:Ingeniux.CMS.INodeLevelPermission"/>
            <seealso cref="T:Ingeniux.CMS.ICategorySynonym"/>
            <seealso cref="T:Ingeniux.CMS.ICategoryTranslation"/>
            <seealso cref="T:Ingeniux.CMS.ILocale"/>
            <seealso cref="T:Ingeniux.CMS.IPage"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Depth">
            <summary>
            Gets the hierarchy depth of this CategoryNode, starting from the root CategoryNode.
            </summary>
            <returns>Depth level</returns>
            <remarks>Root category node depth is 0. The depth value for a descendant node is how many ancestors away it is from the root category.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Parent">
            <summary>
            Gets the parent CategoryNode of this node.
            </summary>
            <returns>If it is a root node, it returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Path">
            <summary>
            Gets the path of this CategoryNode.
            </summary>
            <returns>Path string is delimited by greater-than characters (">").</returns>
            <example>Life Forms>Animalia>Chordata>Mammal</example>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Permissions">
            <summary>
            Gets the permissions of this CategoryNode.
            </summary>
            <returns>Collection of permissions. If no permission is defined at any level, it will be 
            one entry of <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS"/> for "Everyone".</returns>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)">
            <summary>
            Adds a new permission to this CategoryNode.
            </summary>
            <param name="groupAccess">Permission with both <see cref="T:Ingeniux.CMS.IUserGroup"/> information and access type.</param>
            <remarks>If this CategoryNode was inheriting permissions before, this action will cause it to have its own permissions. Its descendants inherit its permissions by default.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AddPermissions(System.Collections.Generic.IEnumerable{Ingeniux.CMS.INodeLevelPermission})">
            <summary>
            Adds a collection of new permissions to this CategoryNode.
            </summary>
            <param name="groupAccess">Permissions with both <see cref="T:Ingeniux.CMS.IUserGroup"/> information and access type.</param>
            <remarks>If this CategoryNode inherits, this action causes it to have its own permissions. 
            Its descendants will inherit its permissions by default.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)">
            <summary>
            Remove a UserGroup's permission entries from this CategoryNode.
            </summary>
            <param name="group">UserGroup from which to remove permissions. Note that if the parameter value is null, nothing will happen.</param>
            <returns>True if this CategoryNode doesn't inherit permissions and permission entry for the group exists. Otherwise, this method returns false.</returns>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)">
            <summary>
            Check if a given <see cref="T:Ingeniux.CMS.IUser"/> is allowed the type of access specified.
            </summary>
            <param name="user">User on whom to check access level.</param>
            <param name="accessType">Type of access to check for. </param>
            <returns>True if the highest permission level of all groups this user belongs to is greater than or equal to the given permission. Otherwise, this method returns false.</returns>
            <remarks>Please note that if the accessType parameter value is <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.NO_ACCESS"/>, this method
            will always return true, regardless of whether there are any permissions defined for groups the user belongs to.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.PermissionsCount">
            <summary>
            Gets the count of permissions defined for this CategoryNode.
            </summary>
            <returns>Count of permissions defined for this CategoryNode.</returns>
            <remarks>If this CategoryNode inherits its permissions, this method returns 0.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Ancestors">
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AncestorsCount">
            <summary>
            Gets the ancestor count for this CategoryNode.
            </summary>
            <returns>Count of ancestor nodes. If this CategoryNode is a root node, returns 0.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Gets the child nodes of this CategoryNode in a paginated format.
            </summary>
            <param name="count">Output of total count</param>
            <param name="pageSize">Number of items to return; default is all items.</param>
            <param name="startIndex">Starting item index; default is first item.</param>
            <returns>Collection of child nodes.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.ChildrenCount">
            <summary>
            Gets the count of child nodes of this CategoryNode.
            </summary>
            <returns>Count of child nodes.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets descendants of this CategoryNode, in a paginzated format.
            </summary>
            <param name="depth">The number of levels of descendants to return</param>
            <param name="count">Output of total count</param>
            <param name="pageSize">Number of items to return; default is all items.</param>
            <param name="startIndex">Starting item index; default is first item.</param>
            <returns>Collection of descendant nodes.</returns>
            <remarks>The natural order of collection is the creation time of CategoryNode. It can be organized by hierarchy value.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.DescendantsCount">
            <summary>
            Gets the count of all descendants of this CategoryNode.
            </summary>
            <returns>Count of all descendant of this CategoryNode.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Remove">
            <summary>
            Permanently removes this CategoryNode from the Taxonomy tree.
            </summary>
            <returns>True when successful.</returns>
            <remarks>All descedants of this CategoryNode are also removed.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveChildren"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemoveChildren">
            <summary>
            Permanently removes all descendants of this CategoryNode from the Taxonomy tree.
            </summary>
            <returns>True when successful</returns>
            <remarks>Unlike <see cref="M:Ingeniux.CMS.ICategoryNode.Remove">the Remove method</see>, this method doesn't remove the CategoryNode itself.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Ancestors"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AncestorsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Children(System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ChildrenCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Descendants(System.Int32@,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.DescendantsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Remove"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Pages">
            <summary>
            Gets all pages associated with this CategoryNode.
            </summary>
            <returns>Collection of page IDs and names.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePages"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)">
            <summary>
            Checks whether a given page is associated with this CategoryNode.
            </summary>
            <param name="page">Page on which to check category association</param>
            <returns>True if page is associated with this CategoryNode, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Pages"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePages"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)">
            <summary>
            Associates a new page with this CategoryNode.
            </summary>
            <param name="page">Page to associate with this CategoryNode</param>
            <remarks>Nothing happens if the page was already associated with this CategoryNode.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Pages"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePages"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})">
            <summary>
            Associates a collection of new pages with this CategoryNode.
            </summary>
            <param name="pages">Pages to associate with this CategoryNode</param>
            <remarks>Any already-associated pages are ignored.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Pages"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePages"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)">
            <summary>
            Removes association of this CategoryNode from a given page.
            </summary>
            <param name="page">Page from which to remove association</param>
            <returns>True if association exist, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Pages"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePages"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemovePages">
            <summary>
            Removes all page associations from this CategoryNode.
            </summary>
            <remarks>This CategoryNode will have no page associations after method is called.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Pages"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.HasPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPage(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPages(System.Collections.Generic.IEnumerable{Ingeniux.CMS.IPage})"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.PagesCount(System.Boolean)">
            <summary>
            Gets the count of all pages associated with this CategoryNode, with or without its descendants.
            </summary>
            <param name="recursive">True to include associations with all of its descendants; false to include only associations to this CategoryNode.</param>
            <returns>Count of associations</returns>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Synonyms">
            <summary>
            Gets the synonyms of this CategoryNode across all locales.
            </summary>
            <returns>Collection of synonyms.</returns>		
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveSynonym(Ingeniux.CMS.ICategorySynonym)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Synonyms(Ingeniux.CMS.ILocale)">
            <summary>
            Gets the synonyms of this CategoryNode defined under a given locale.
            </summary>
            <param name="locale">Collection of synonyms</param>
            <returns>Collection of synonyms.</returns>		
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveSynonym(Ingeniux.CMS.ICategorySynonym)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)">
            <summary>
            Adds a new synonym under a given locale.
            </summary>
            <param name="synonymLocale">Locale for the new synonym</param>
            <param name="name">Synonym value</param>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Synonyms"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveSynonym(Ingeniux.CMS.ICategorySynonym)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemoveSynonym(Ingeniux.CMS.ICategorySynonym)">
            <summary>
            Removes a synonym from this CategoryNode.
            </summary>
            <param name="synonym">Synonym to remove</param>
            <returns>True if synonym exists under its locale, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Synonyms"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemoveSynonyms(Ingeniux.CMS.ILocale)">
            <summary>
            Removes all synonyms from this CategoryNode under given locale or across all locales
            </summary>
            <param name="locale">All synonyms with this locale will be removed. If not specified, removes all synonyms.</param>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Synonyms"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.SynonymsCount(Ingeniux.CMS.ILocale)">
            <summary>
            Gets the count of synonyms, under given locale or across all locales.
            </summary>
            <param name="locale">The locale where synonyms are under. If not specified, includes all synonyms.</param>
            <returns>Count of synonyms</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Synonyms"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddSynonym(Ingeniux.CMS.ILocale,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveSynonym(Ingeniux.CMS.ICategorySynonym)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.ResetPermissions">
            <summary>
            Resets permissions for this CategoryNode.
            </summary>
            <remarks>This will make this CategoryNode inherit permissions from its parent. If it is a root node, it will have the permissions of
            <see cref="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS"/> for "Everyone".</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.PermissionInherited"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.Translations">
            <summary>
            Gets all translations of this CategoryNode across all locales.
            </summary>
            <returns>A collection of translations.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.TranslationsCount"/>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Translated"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)">
            <summary>
            Sets translation for this CategoryNode under a specific locale.
            </summary>
            <param name="locale">Locale of this translation</param>
            <param name="name">Translated name</param>
            <param name="description">Translated description</param>
            <param name="typeName">Translated type name</param>
            <remarks>If no translation exists under this locale, a new translation is created. 
            Otherwise, the existing translation is updated. At any time, there can be only one translation per locale.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.TranslationsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Translations"/>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Translated"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)">
            <summary>
            Removes a translation from this CategoryNode.
            </summary>
            <param name="locale">Locale of the translation to remove</param>
            <returns>True if translation with given locale exists, false otherwise.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.TranslationsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Translations"/>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Translated"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations">
            <summary>
            Removes all translations from this CategoryNode.
            </summary>
            <remarks>This method does nothing if the CategoryNode doesn't have any translations.</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.TranslationsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Translations"/>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Translated"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryNode.TranslationsCount">
            <summary>
            Gets the count of translations for this CategoryNode.
            </summary>
            <returns>Count of translations.</returns>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Translations"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations"/>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Translated"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.Hierarchy">
            <summary>
            Gets the hierarchy value of this CategoryNode.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.ExternalID">
            <summary>
            Gets and sets the ExternalID of this CategoryNode.
            </summary>
            <remarks>External ID is used to integrate taxonomy with an existing categorization system.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.TypeName">
            <summary>
            Gets and sets the name of the category type under the current locale.
            </summary>
            <remarks>When <see cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/> is <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>, this method gets and sets
            <see cref="P:Ingeniux.CMS.ICategoryNode.OriginalTypeName"/>. Otherwise, it will get and set the <see cref="T:Ingeniux.CMS.ICategoryTranslation">Translated Description</see> 
            under <see cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/>.</remarks>
            <example>
            TypeName is normally associated with category depth. 
            <para>
            For example, in biological classifications, the categories "Monera," "Fungi," "Protista," "Plantae," and "Animalia" have the type name "Kingdom." 
            The categories "Chordata," "Mollusca," and "Phoronida"—located under the kingdom "Animalia"—have the type name "Phylum."
            </para>
            <para>
            Within the Ingeniux taxonomy system, however, this property is free form and can have any information or meaning.
            </para>
            </example>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.OriginalTypeName"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.Description">
            <summary>
            Gets and sets the description of this CategoryNode.
            </summary>
            <remarks>When <see cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/> is <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>, this method gets and sets
            <see cref="P:Ingeniux.CMS.ICategoryNode.OriginalDescription"/>; Otherwise, it gets and sets the <see cref="T:Ingeniux.CMS.ICategoryTranslation">Translated Description</see> 
            under <see cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/>.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.OriginalDescription"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.OriginalName">
            <summary>
            Gets the name of this CategoryNode in its native creation locale.
            </summary>
            <remarks>This property's value is that of its creation locale, not the value this CategoryNode was created with.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.OriginalTypeName">
            <summary>
            Gets the type name of this CategoryNode in its native creation locale.
            </summary>
            <remarks>This property's value is the value with which the CategoryNode was created. It is the value under <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.OriginalDescription">
            <summary>
            Gets the description of this CategoryNode in its native creation locale.
            </summary>
            <remarks>This property's value is the value with which the CategoryNode was created. It is the value under <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.PermissionInherited">
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Permissions"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.PermissionsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AllowAccess(Ingeniux.CMS.IUser,Ingeniux.CMS.Enums.EnumNodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.AddPermission(Ingeniux.CMS.INodeLevelPermission)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemovePermission(Ingeniux.CMS.IUserGroup)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.ResetPermissions"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.CreationLocale">
            <summary>
            Gets the locale under which this category node was created. 
            </summary>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.CurrentLocale">
            <summary>
            Gets the current operating locale.
            </summary>
            <remarks>This is the locale that <see cref="T:Ingeniux.CMS.ITaxonomyManager">TaxonomyManager</see> is currently under.</remarks>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryNode.Translated">
            <summary>
            Checks if this CategoryNode has translation under <see cref="P:Ingeniux.CMS.ICategoryNode.CurrentLocale"/>
            </summary>
            <remarks>True if this CategoryNode has translation under its current locale, false otherwisea</remarks>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.Translations"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.TranslationsCount"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.SetTranslation(Ingeniux.CMS.ILocale,System.String,System.String,System.String)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslation(Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ICategoryNode.RemoveTranslations"/>
        </member>
        <member name="M:Ingeniux.CMS.CategoryNode.Children(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Get the children of current Category Node
            </summary>
            <param name="count">Output the count of children</param>
            <param name="pageSize">Size per page</param>
            <param name="startIndex">Starting index of the page</param>
            <remarks>This method will list all children of current Category Node, including nodes current user with no read access.</remarks>
            <returns>List of children</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ingeniux.CMS.CategoryNode.getLocaleSpecificProperty(System.Func{System.String},System.Func{Ingeniux.CMS.CategoryTranslation,System.String})" -->
        <member name="M:Ingeniux.CMS.CategoryNode.setLocaleSpecificProperty(System.Action,System.Action{Ingeniux.CMS.CategoryTranslation})">
            <summary>
            A callback driven method. Depending on the locale, either execute the default setter callback, when 
            current locale is the categorie's creation locale; or execute translation setter callback.
            </summary>
            <param name="defaultSetter">The callback to set the default property value</param>
            <param name="translationSetter">The callback to set the translated property value in current locale</param>
        </member>
        <member name="T:Ingeniux.CMS.ICategorySynonym">
            <summary>
            <para>
            Represents a Synonym entry for a CategoryNode.
            </para>
            <para>
            Synonym is another name of the CategoryNode that is specific to a <see cref="T:Ingeniux.CMS.ILocale">Locale</see>.
            </para>
            </summary>
            <remarks>Categories can have multiple synonyms under one locale.</remarks>
            <seealso cref="T:Ingeniux.CMS.ICategoryNode"/>
            <seealso cref="T:Ingeniux.CMS.ICategoryTranslation"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategorySynonym.Serialize">
            <summary>
            Returns the XML presentation of this Synonym.
            </summary>
            <returns>XML presentation</returns>
            <example>
            One Synonym for Category "Animalia":
            <code language="xml">
            <![CDATA[
            <S>Animal</S>
            ]]>
            </code>
            </example>
            <remarks>Synonyms are not serialized under the CategoryNode serialization output, but under the "SYN/L" node of Taxonomy Manager serialization output.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ICategorySynonym.Value">
            <summary>
            Gets and sets the name of this Synonym.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategorySynonym.Locale">
            <summary>
            Gets the locale of this Synonym.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategorySynonym.LastModified">
            <summary>
            Gets the last time this Synonym was modified.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategorySynonym.LastModifiedUser">
            <summary>
            Gets the UserId of the most recent user to modify the Synonym.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.CategorySynonym.#ctor(System.String,Ingeniux.CMS.ILocale,Ingeniux.CMS.IUser)">
            <summary>
            Constructor for creating a branding new synonym
            </summary>
            <param name="value">Synonym string</param>
            <param name="locale">Locale this synonym belongs to, default to en-us</param>
            <param name="creationUser">The user who created this synonym</param>
        </member>
        <member name="T:Ingeniux.CMS.ICategoryTranslation">
            <summary>Represents a translation entry of a CategoryNode under a specific locale.</summary>
            <remarks>
            CategoryNode may have multiple translations, but it can only have one translation per locale.
            </remarks>
            <seealso cref="T:Ingeniux.CMS.ICategoryNode"/>
            <seealso cref="T:Ingeniux.CMS.ICategorySynonym"/>
        </member>
        <member name="M:Ingeniux.CMS.ICategoryTranslation.Serialize">
            <summary>
            Returns the XML presentation of this translation.
            </summary>
            <example>
            <para>One Translation for CategoryNode "Animalia" under language "zh-cn" (Simplified Chinese–People's Republic of China).</para>
            <code language="xml">
            <![CDATA[
            <TR LUD="20130816T10:56:34" LUU="ingeniux\awang" T="界" D="動物是多細胞真核生命體中的一大類群" N="動物界" locale="zh-cn"/>
            ]]>
            </code>
            </example>
            <remarks>
            Translations are not serialized under the CategoryNode serialization output, but under the "L10N/C" node of Taxonomy Manager serialization output.
            Translations are grouped by the CategoryNode they belong to.
            </remarks>
            <returns>XML presentation.</returns>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.Locale">
            <summary>
            Gets the code of translation's locale.
            </summary>
            <remarks>Locale code normally contains two sections: [language code]-[region code].</remarks>
            <example>
            <para>Example of locale value:</para>
            <para>"en-us" represents "English–United States"</para>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.Name">
            <summary>
            Gets and sets the name of the CategoryNode under this translation.
            </summary>
            <seealso cref="!:Ingeniux.CMS.ICategoryNode.Name"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.Description">
            <summary>
            Gets and sets the description of the CategoryNode under this translation.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.Description"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.TypeName">
            <summary>
            Gets and sets the type name of the CategoryNode under this translation.
            </summary>
            <seealso cref="P:Ingeniux.CMS.ICategoryNode.TypeName"/>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.Created">
            <summary>
            Gets the creation time of this translation.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.CreationUser">
            <summary>
            Gets the creation user of this translation.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ICategoryTranslation.RequiresUpdate">
            <summary>
            Checks whether this translation requires an update.
            </summary>
            <remarks>A translation must be updated if its creation time is older than the last-modified time of the CategoryNode it belongs to.</remarks>
        </member>
        <member name="T:Ingeniux.CMS.ITaxonomyManager">
             <summary>
             Represents the manager object that provides a means to query and manage <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> collections.
             ITaxonomyManager also manages the associations between <see cref="T:Ingeniux.CMS.IPage">pages</see> and <see cref="T:Ingeniux.CMS.ICategoryNode">categories</see>.
             </summary>
             <remarks>
             <para>Like all manager objects, instances of this manager are retrieved from an <see cref="T:Ingeniux.CMS.IUserSession"/> object, and it only works within that session.</para>
             <code language="C#">
             using (IUserSession session = store.OpenReadSession(currentUser))
             {
            		ITaxonomyManage TaxonomyManager = session.TaxonomyManager;
            		...
             }
             </code>
             </remarks>
             <example>
             Below is a serialization example that, except for the modification information in the root element, matches the TaxonomyTree.xml file from previous-generation CMS Sites:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <Taxonomy>
            	<Definitions>
            		<Definition Description="The CategoryNode element tag" FullName="Category" TagName="C" />
            		<Definition Description="The internal ID of the Category" FullName="ID" TagName="ID" />
            		<Definition Description="The ID for the category that is imported form another source (Optional)" FullName="External ID" TagName="EID" />
            		<Definition Description="The name of the Category" FullName="Name" TagName="N" />
            		<Definition Description="The description of the category" FullName="Description" TagName="D" />
            		<Definition Description="The name of classification type for this level of category node (Optional)" FullName="Classification Type" TagName="T" />
            		<Definition Description="Last updated date" FullName="LastUpdatedDate" TagName="LUD" />
            		<Definition Description="Last update user" FullName="LastUpdateUser" TagName="LUU" />
            	</Definitions>
            	<Tree>
            		<C ID="Categories/128" N="News" D="News" EID="" T="" LUU="ingeniux\ashley" LUD="20081201T17:59:13">
            			<C ID="Categories/142" N="Admissions" D="Admissions" EID="" T="" LUU="ingeniux\awang" LUD="20120330T09:53:41">
            			</C>
            			<C ID="Categories/187" N="Alumni" D="Alumni" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:53:58" />
            		</C>
            		<C ID="Categories/127" N="Departments" D="Departments" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:50:01">
            			<C ID="Categories/137" N="Math" D="Math" EID="" T="" LUU="ingeniux\ashley" LUD="20091102T11:05:31" />
            			<C ID="Categories/138" N="Biology" D="Biology" EID="" T="" LUU="ingeniux\neggen" LUD="20091203T07:11:40" />
            			<C ID="Categories/151" N="Physics" D="Physics" EID="" T="" LUU="ingeniux\neggen" LUD="20091203T06:58:29" />
            			<C ID="Categories/179" N="Business" D="Business" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:50:27" />
            			<C ID="Categories/180" N="Chemistry" D="Chemistry" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:50:42" />
            			<C ID="Categories/181" N="English" D="English" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:51:02" />
            			<C ID="Categories/182" N="French" D="French" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:51:37" />
            			<C ID="Categories/183" N="German" D="German" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:52:10" />
            			<C ID="Categories/184" N="History" D="History" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:52:26" />
            			<C ID="Categories/185" N="Medicine" D="Medicine" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:52:47" />
            			<C ID="Categories/186" N="Spanish" D="Spanish" EID="" T="" LUU="ingeniux\awang" LUD="20100427T11:53:04" />
            		</C>
            	</Tree>
            	<L10N>
            		<C ID="Categories/128">
            			<TR locale="es-mx" LUU="ingeniux\awang" LUD="20101025T14:23:34" N="Noticias" D="Noticias" T="" />
            			<TR locale="zh-cn" LUU="ingeniux\awang" LUD="20130408T15:41:13" N="新闻" D="新闻" T="" />
            		</C>
            	</L10N>
            	<Security />
            	<SYN>
            		<L loc="EN-US">
            			<C ID="Categories/187">
            				<S>Collegian</S>
            			</C>
            			<C ID="Categories/128">
            				<S>Story</S>
            				<S>Message</S>
            				<S>Report</S>
            			</C>
            		</L>
            		<L loc="ZH-CN">
            			<C ID="128">
            				<S>新消息</S>
            				<S>新事件</S>
            			</C>
            		</L>
            	</SYN>
            </Taxonomy>
             ]]>
             </code>
             </example>
             <seealso cref="T:Ingeniux.CMS.ICategoryNode"/>
             <seealso cref="T:Ingeniux.CMS.IPage"/>
             <seealso cref="T:Ingeniux.CMS.ILocale"/>
             <seealso cref="T:Ingeniux.CMS.ITransactionalEntity"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.Associate(Ingeniux.CMS.IPage,Ingeniux.CMS.ICategoryNode[])">
            <summary>
            Associates a <see cref="T:Ingeniux.CMS.IPage">Page</see>  with a given collection of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see>.
            </summary>
            <param name="page">Page to associate</param>
            <param name="categories">Category node collection to associate with the page</param>
            <remarks>
            <para>The "page" parameter value cannot be null. Otherwise, an error is thrown.</para>
            <para>The "categories" parameter ignores all null values in the colleciton, but all the categories must be from the current session. Otherwise, an error is thrown.</para>
            <para>The current user must either be an administrator or have permissions to manage the taxonomy system. Otherwise an error is thrown.</para>
            <para>The current user must have full access to the page node and at least read-only access to provided categories. Otherwise, an error is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">When the "page: parameter is null</exception>
            <exception cref="T:System.ArgumentException">When any of the categories are not from this session.</exception>
            <exception cref="T:System.InvalidOperationException">When user doesn't have rights to manage taxonomy; doesn't have full acess to page; or doesn't have at least read-only access to any of the categories.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.UnassociatePage(Ingeniux.CMS.IPage)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.UnassociatePage(Ingeniux.CMS.IPage)">
            <summary>
            Clears all categorization from a <see cref="T:Ingeniux.CMS.IPage">Page</see> .
            </summary>
            <param name="page">Page from which to clear all categorization.</param>
            <remarks>If the page parameter is null, nothing happens.</remarks>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Associate(Ingeniux.CMS.IPage,Ingeniux.CMS.ICategoryNode[])"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Retrieves a paginated list of all the <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> that are associated with a given <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="page">Page on which to retrieve categorization information.</param>
            <param name="count">Total count of all category associations on the page.</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> that are asssociated with the specified <see cref="T:Ingeniux.CMS.IPage">Page</see>.
            </summary>
            <param name="page">Page on which to get category association count.</param>
            <returns>Count of category associations.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.Category(System.String)">
            <summary>
            Retrieves a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> by its unique ID.
            </summary>
            <param name="id">ID of the category node to retrieve.</param>
            <returns>The category node with matching ID. If it doesn't exist, returns null.</returns>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CopyCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean,System.Boolean)">
            <summary>
            Copies a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> and its descendants, and places the copy as child or sibling of another <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>.
            </summary>
            <param name="sourceCategory">The category node to copy. Cannot be null.</param>
            <param name="targetCategory">The category node under which to place the copy. If null, the copy will be placed as a new root category.</param>
            <param name="asSibling">Specifies whether the copy is placed as a child or as a sibling of the target node. If the target node is null, this parameter has no effect.</param>
            <param name="recursive">Specifies whether the copy includes all the category node's descendants.</param>
            <returns>The copy that was placed at the correct location</returns>
            <remarks>
            <para>
            The copy returned is not yet stored in the database.
            </para>
            <para>
            The operating user must have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>. This user must also have at least read-only
            permissions on the source category and full access to the target cateogry. (If the target category is null, the user's permissions don't matter.)
            </para>
            <para>
            There is no concept of orders in the taxonomy tree.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the operating user doesn't have permissions to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>; doesn't have read-only access to the source node; or doesn't have full access to the target node.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.MoveCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CreateCategory(System.String,System.String,System.String,System.String,Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.MoveCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean)">
            <summary>
            Makes a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> a child or sibling of another <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>e, or turns it into a Root Node.
            </summary>
            <param name="sourceCategory">The category node to move.</param>
            <param name="targetCategory">The category node at which to place the moved node. If null, the moved node becomes a root node.</param>
            <param name="asSibling">Specifies whether the moved node is placed as a child or as a sibling of the target node. If the target node is null, this parameter has no effect.</param>
            <returns>The moved category node as its new location</returns>
            <remarks>
            <para>
            The moved node is not yet stored in the database.
            </para>
            <para>
            The operating user must have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>. This user must also have full access to both the source category and target cateogry. 
            </para>
            <para>
            There is no concept of orders in the taxonomy tree.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When operating user doesn't have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>
            or doesn't have full access to both the source node and the target node.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CopyCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.RemoveCategory(Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CreateCategory(System.String,System.String,System.String,System.String,Ingeniux.CMS.ICategoryNode)">
            <summary>
            Creates a new <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> under another <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>.
            </summary>
            <param name="name">Name of new category</param>
            <param name="description">Description of new category</param>
            <param name="externalId">External ID of new category (for integration with another taxonomy system)</param>
            <param name="typeName">Type name of new category</param>
            <param name="parentNode">Parent node under which to place the new category; if not listed, creates new node as root category</param>
            <returns>Newly created category.</returns>
            <remarks>
            <para>
            When the new <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> is returned, it has not yet been stored in the database.
            </para>
            <para>
            The operating user must have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see> and also have full access to the specified parent node.
            </para>
            <para>
            The taxonomy tree doesn't have the concept of orders.
            </para>
            <para>
            The <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/> of the new category is the value of the <see cref="P:Ingeniux.CMS.ITaxonomyManager.CurrentLocale"/> property.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the operating user doesn't have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>
            or full access to parent node.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CopyCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CreateRootCategory(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CreateRootCategory(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Root <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>.
            </summary>
            <param name="name">Name of new category</param>
            <param name="description">Description of new category</param>
            <param name="externalId">External ID of new category (for integration with another taxonomy system)</param>
            <param name="typeName">Type name of new category</param>
            <returns>Newly created toot category</returns>
            <remarks>
            <para>
            When the new node is returned, it has not yet been stored in the database.
            </para>
            <para>
            The operating user must have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>.
            </para>
            <para>
            The taxonomy tree doesn't have the concept of orders.
            </para>
            <para>
            The <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/> of the new category is the value of the <see cref="P:Ingeniux.CMS.ITaxonomyManager.CurrentLocale"/> property.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When operating user doesn't have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CopyCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CreateCategory(System.String,System.String,System.String,System.String,Ingeniux.CMS.ICategoryNode)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.RemoveCategory(Ingeniux.CMS.ICategoryNode)">
            <summary>
            Removes a <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see> from the content store. This also removes any associations this <see cref="T:Ingeniux.CMS.ICategoryNode">Category</see>  
            has with any <see cref="T:Ingeniux.CMS.IPage">Pages</see>.
            </summary>
            <param name="category">The category to remove. If null, returns false.</param>
            <returns>True if category exists, false if it doesn't.</returns>
            <remarks>
            <para>
            Category is permanently removed after this method is called.
            </para>
            <para>
            Category removal occurs when session closes.
            </para>
            <para>
            The operating user must have rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see> and full access to the category to be removed. 
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When the operating user doesn't have the rights to <see cref="F:Ingeniux.CMS.Enums.EnumUserRight.IGX_USER_RIGHT_MANAGE_TAXONOMY">Manage Taxonomy System</see>
            or doesn't have full access to the category to be removed.</exception>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.MoveCategory(Ingeniux.CMS.ICategoryNode,Ingeniux.CMS.ICategoryNode,System.Boolean)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.RootCategories(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Returns a paginated list of root <see cref="T:Ingeniux.CMS.ICategoryNode">Category Node</see>, which are nodes without parent.
            </summary>
            <param name="count">Total count of all root categories</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of root category node instances</returns>
            <remarks>
            Root categories are categories without parents.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.RootCategoriesCount">
            <summary>
            Gets the count of all <see cref="M:Ingeniux.CMS.ITaxonomyManager.RootCategories(System.Int32@,System.Int32,System.Int32)">Root Categories</see>.
            </summary>
            <returns>Count of root categories.</returns>
            <remarks>When this method returns 0, it means there are no categories in the taxonomy system.</remarks>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])">
            <summary>
            Gets <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> by their unique IDs.
            </summary>
            <param name="categoryIds">Unique IDs of categories to retrieve.</param>
            <returns>Collection of category node instances</returns>
            <remarks>
            Any non-existing category IDs are ignored. Therefore, the order 
            of returned categories doesn't necessarily match the order of IDs.
            </remarks>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.Int32@,Ingeniux.CMS.ILocale,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>
            Gets <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> by initial characters in name, filtered by locale, in a paginated fashion.
            </para>
            <para>
            This is the main way of searching for categories. By default, it returns all categories with all input
            parameters missing. 
            </para>
            </summary>
            <param name="count">Total count of all matching categories</param>
            <param name="locale">The locale in which to search. If missing or null, uses the taxonomy manger's current locale.</param>
            <param name="nameInitialLetters">The initial characters to search for in a category name. If the locale is not the <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale">creation locale</see> of a category, searches translated name for that locale.</param>
            <param name="searchSynonyms">Specifies whether or not to search synonyms</param>
            <param name="pageSize">Number of entries to return. If not provided, returns all entries.</param>
            <param name="startIndex">Starting index of entries. If not provided, starts from the first entry.</param>
            <returns>Collection of category node instances matching the criteria.</returns>		
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> by initial characters in name, filtered by locale.
            </summary>
            <param name="nameInitialLetters">The initial characters to search for in a category name. If the locale is not the category's creation locale, searches the translated name for that locale.</param>
            <param name="locale">The locale in which to search. If missing or null, uses the taxonomy manager's current locale.</param>
            <param name="searchSynonyms">Specifies whether to search synonyms.</param>
            <returns>Count of categories matching the criteria.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount">
            <summary>
            Gets the count of all <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see>.
            </summary>
            <returns>Count of all categories.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> created under a specified locale.
            </summary>
            <param name="locale">Locale to search. If missing or null, defaults to "en-us".</param>
            <returns>Count of categories created under given locale.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.Categories(System.String[])"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.TranslatedCategoriesCount"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.TranslatedCategoriesCount">
            <summary>
            Gets the count of <see cref="T:Ingeniux.CMS.ICategoryNode">Category Nodes</see> that have a translation under any locale.
            </summary>
            <returns>Count of translated categories.</returns>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCount(System.String,Ingeniux.CMS.ILocale,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPage(Ingeniux.CMS.IPage,System.Int32@,System.Int32,System.Int32)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesOnPageCount(Ingeniux.CMS.IPage)"/>
            <seealso cref="M:Ingeniux.CMS.ITaxonomyManager.CategoriesCreatedInLocaleCount(Ingeniux.CMS.ILocale)"/>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.SerializeAssociations">
             <summary>
             Returns the XML presentation of taxonomy associations.
             </summary>
             <remarks>The output matches the TaxonomyAssociations.xml file in previous-generation CMS sites but doesn't include change information on the root element.</remarks>
             <returns>The XML presentation of taxonomy associations.</returns>
             <example>
             Below is an example of output:
             <code language="xml">
             <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <TaxonomyAssociations>
              <Definitions>
            	<Definition Description="The Association between category and page" FullName="Association" TagName="A" />
            	<Definition Description="The category id" FullName="CategoryID" TagName="C" />
            	<Definition Description="The page XID associated with certain category" FullName="Page XID" TagName="P" />
            	<Definition Description="Last Updated Date" FullName="LastUpdatedDate" TagName="LUD" />
            	<Definition Description="Last Update User" FullName="LastUpdateUser" TagName="LUU" />
              </Definitions>
              <Associations>
            	<A C="Categories/132" P="x27" LUU="ingeniux\awang" LUD="20081215T11:48:05" />
            	<A C="Categories/130" P="x34" LUU="ingeniux\awang" LUD="20081215T11:48:09" />
            	<A C="Categories/131" P="x35" LUU="ingeniux\awang" LUD="20081215T11:48:18" />
              </Associations>
            </TaxonomyAssociations>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Ingeniux.CMS.ITaxonomyManager.Serialize(System.Boolean)">
            <summary>
            Returns the XML presentation of the Taxonomy Tree
            </summary>
            <param name="isPublish">If it is a publish, we don't need to include user security information.</param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ITaxonomyManager.CurrentLocale">
            <summary>
            Gets and sets the current operating locale. <see cref="T:Ingeniux.CMS.ICategoryNode">Category node</see> instances created within the session use this locale as a <see cref="P:Ingeniux.CMS.ICategoryNode.CreationLocale"/>.
            The <see cref="!:Ingeniux.CMS.ICategoryNode.Name"/>, <see cref="P:Ingeniux.CMS.ICategoryNode.Description"/>, <see cref="P:Ingeniux.CMS.ICategoryNode.TypeName"/> updates depend on the current locale value to determine whether to update original values create translations under this locale.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceUserProfile.#ctor">
            <summary>
            Create and initialize a new Tiny MCE Profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceUserProfile.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Create and initialize a Tiny MCE Profile
            </summary>
            <param name="id">ID number of the profile</param>
            <param name="name">Name of the profile</param>
            <param name="groupid">Group ID associated with the profile</param>
        </member>
        <member name="P:Ingeniux.CMS.TinyMceUserProfile.CommandRow">
            <summary>
            Ordered collection of button items representing the command row for tinyMCE
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceGroupProfile.#ctor">
            <summary>
            Create and initialize a new Tiny MCE Profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceGroupProfile.#ctor(System.Int32,System.String,System.String,Ingeniux.CMS.ITinyMceGroupProfile)">
            <summary>
            Create and initialize a Tiny MCE Profile
            </summary>
            <param name="id">ID number of the profile</param>
            <param name="name">Name of the profile</param>
            <param name="groupid">Group ID associated with the profile</param>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceTemplate.#ctor">
            <summary>
            Create and initialize the Tiny Mce template profile
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.TinyMceTemplate.CommandRow">
            <summary>
            Ordered collection of button items representing the command row for tinyMCE
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceConfig.#ctor">
            <summary>
            Create the Time MCE Config
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceConfig.Initialize">
            <summary>
            Initialize the Tiny MCE Configuration
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceConfig.UserProfile">
            <summary>
            Build the Tiny MCE profile for the current user, merging group profiles or using default profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceConfig.GroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Given a CMS group, retrieve the Tine MCE Profile associated with it, otherwise return the default profile.
            </summary>
            <param name="group">CMS Group to search for</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceConfig.AddGroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Add a new toolbar profile for given group
            </summary>
            <param name="group">CMS Group to create profile for</param>
            <param name="operatingUser">CMS User performing action</param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.TinyMceConfig.DefaultProfile">
            <summary>
            Default Tiny MCE Profile
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.TinyMceConfig.TemplateProfile">
            <summary>
            Template Tiny MCE Profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TinyMceSetting.#ctor(System.String,System.String,Ingeniux.CMS.Enums.EnumTinyMceSettingsType)">
            <summary>
            Create and initialize a new Tiny MCE setting
            </summary>
            <param name="value">Value of the setting</param>
            <param name="friendlyName">Friendly name of the setting</param>
            <param name="type">Setting type</param>
        </member>
        <member name="T:Ingeniux.CMS.IToolbarButton">
            <summary>
            Represents a button on the Ingeniux CMS client toolbar
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.IToolbarButton.Serialize">
            <summary>
            Serialize the button in XML format.
            </summary>
            <returns>Serialized XML that contains the button information</returns>
            <example>
            Serialization example of the button "Check In":
            <code language="xml">
            <![CDATA[
            <Command Name="Check In" IsDisplayed="true" />
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarButton.Name">
            <summary>
            Gets the Name/Label of the button
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarButton.IsDisplayed">
            <summary>
            Gets whether this button will be visible or hidden
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarButton.IsSeparator">
            <summary>
            Gets whether this button is a real fuctional button or just a spacer between buttons
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarButton.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create and initialize a toolbar button item
            </summary>
            <param name="name">Name of the button object</param>
            <param name="isDisplayed">Display the button in the UI</param>
            <param name="isseparator">Button is a separator object</param>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.#ctor">
            <summary>
            Create and initialize the Toolbar Configuration
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.initialize">
            <summary>
            Initialize Template and Default profiles
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.GroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Given a CMS group, retrieve the Toolbar Profile associated with it, otherwise return the default profile.
            </summary>
            <param name="group">CMS Group to search for</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.AddGroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Add a new toolbar profile for given group
            </summary>
            <param name="group">CMS Group to create profile for</param>
            <param name="operatingUser">CMS User performing action</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.RemoveGroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Remove group profile from tree menu configuration
            </summary>
            <param name="group">CMS Group who's profile will be removed</param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfig.UserProfile">
            <summary>
            Build the Toolbar profile for the current user, merging group profiles or using default profile
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.ToolbarConfig.Profiles">
            <summary>
            Collection of Toolbar Profiles
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ToolbarConfig.DefaultProfile">
            <summary>
            Default Toolbar Profile
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.ToolbarConfig.TemplateProfile">
            <summary>
            Template Toolbar Profile
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IToolbarConfigProfile">
            <summary>
            Represents the <see cref="T:Ingeniux.CMS.IUserGroup">Group</see>-specific configuration of the Ingeniux CMS client toolbar
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarConfigProfile.Buttons">
            <summary>
            Gets the List of Button that will show up on the toolbar
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarConfigProfile.Type">
            <summary>
            Gets the type of config this is profile, it is one of the three types:  Template, Default, Group
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.IToolbarConfigProfile.GroupId">
            <summary>
            Gets the Id of the <see cref="T:Ingeniux.CMS.IUserGroup">Group</see> this profile is for. If the <see cref="P:Ingeniux.CMS.IToolbarConfigProfile.Type">Type</see> is not
            "Group", this value doesn't matter.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.ToolbarConfigProfile.#ctor(System.String,System.String,Ingeniux.CMS.IToolbarConfigProfile)">
            <summary>
            Create and initialize a new Toolbar Profile
            </summary>
            <param name="type">"Group"/"Default"/"Template" profile type</param>
            <param name="groupid">CMS Group ID associated with the profile</param>
        </member>
        <member name="P:Ingeniux.CMS.ToolbarConfigProfile.Buttons">
            <summary>
            Collection of button items set by the profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.#ctor">
            <summary>
            Create and initialize the Tree Menu Configuration
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.initialize">
            <summary>
            Initialize Tree Menu Configuration by loading in template and default data from resource .xml file
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.GroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Given a CMS group, retrieve the Tree Menu Profile associated with it, otherwise return the default profile.
            </summary>
            <param name="group">CMS Group to search for</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.AddGroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Add a new tree menu profile for given group
            </summary>
            <param name="group">CMS Group to create profile for</param>
            <param name="operatingUser">CMS User performing action</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.UserProfile">
            <summary>
            Build the Tree Menu profile for the current user, merging group profiles or using default profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig.RemoveGroupProfile(Ingeniux.CMS.IUserGroup)">
            <summary>
            Remove group profile from tree menu configuration
            </summary>
            <param name="group">CMS Group who's profile will be removed</param>
            <param name="operatingUser"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuConfig._merge(Ingeniux.CMS.ITreeMenuProfile,Ingeniux.CMS.ITreeMenuProfile)">
            <summary>
            Merge two tree menu profiles and return result
            </summary>
            <param name="outProfile">Profile to be merged to</param>
            <param name="inProfile">Profile to be merged from</param>
            <returns></returns>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuConfig.Profiles">
            <summary>
            Collection of Tree Menu Profiles
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuConfig.TemplateProfile">
            <summary>
            Template Tree Menu Profile
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuConfig.DefaultProfile">
            <summary>
            Default Tree Menu Profile
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuItem.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create and initialize a new tree menu item
            </summary>
            <param name="name">Item name</param>
            <param name="caption">Item caption (friendly name)</param>
            <param name="icon">Icon image file</param>
            <param name="isDisplayed">Display item in tree menu</param>
            <param name="hasSubmenu">Item contains sub-items</param>
            <param name="isseparator">Item is a separator</param>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuItem.HasSubMenu">
            <summary>
            Indicates whether Children structure contains submenu tree menu items
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuItem.Children">
            <summary>
            Children tree menu items of the item.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuProfile.#ctor(System.String,System.String,Ingeniux.CMS.ITreeMenuProfile)">
            <summary>
            Initialize a new Tree Menu Profile
            </summary>
            <param name="type">"Group"/"Default"/"Template", used for serialization</param>
            <param name="groupid">Group ID associated with profile</param>
        </member>
        <member name="M:Ingeniux.CMS.TreeMenuProfile.GetMenuItem(System.String)">
            <summary>
            Given the name of an item, traverse all of the tree menu and find the item object.
            </summary>
            <param name="name">name of the item object to retrieve</param>
            <returns>retrieved tree menu item</returns>
        </member>
        <member name="P:Ingeniux.CMS.TreeMenuProfile.Children">
            <summary>
            List of Tree Menu Item children of the profile.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.WorldViewSettings.#ctor(System.String,System.Collections.Generic.IEnumerable{Ingeniux.CMS.WorldViewSettingEntry},System.Collections.Generic.IEnumerable{Ingeniux.CMS.WorldViewSettingEntry})">
            <summary>
            This constructor will only be called once during site construction
            </summary>
            <param name="workstates"></param>
            <param name="workflowDefinitions"></param>
        </member>
        <member name="M:Ingeniux.CMS.ITranslationProject.SetPages(System.String)">
            <summary>
            Set the pages involved in the handout.
            </summary>
            <param name="pageIds">Pipe-delimited xIDs</param>
        </member>
        <member name="M:Ingeniux.CMS.ITranslationProject.ContinueStep(Ingeniux.CMS.IHandout,System.DateTime,System.Int32)">
            <summary>
            Complete the previous step and create a new handout for the next step.
            </summary>
            <param name="previousStep"></param>
            <param name="expectedEndDate"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.Event.CloneVersionMapFinalizationEventArgs">
            <summary>
            Arguments for <see cref="T:Ingeniux.CMS.ILingualPageVersionMap">LingualPageVersionMap</see>'s <see cref="E:Ingeniux.CMS.ILingualPageVersionMap.OnFinalize">OnFinalize</see>
            event. Signals that a lingual page version map has been finalized, which means translation for the master <see cref="T:Ingeniux.CMS.IPage">Page</see>'s corresponding
            <see cref="P:Ingeniux.CMS.ILingualPageVersionMap.MasterPageVersion">version</see> has been translated and has a corresponding <see cref="!:Ingeniux.CMS.ILingualPageVersionMap.ClonePageVersion">clone version</see>
            in the target language.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Event.CloneVersionMapFinalizationEventArgs.VersionMap">
            <summary>
            Gets the version map that has been finalized.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumNodeLevelPermission">
            <summary>
            The list of node-level permissions for <see cref="T:Ingeniux.CMS.IPage">Pages</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.NO_ACCESS">
            <summary>
            Denied access
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.READ_ONLY">
            <summary>
            Read-only access
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumNodeLevelPermission.FULL_ACCESS">
            <summary>
            Full read/write access
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumAssetNodeLevelPermission">
            <summary>
            The list of node-level permissions for asset folders
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAssetNodeLevelPermission.READ_ONLY">
            <summary>
            Read-only access
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAssetNodeLevelPermission.UPLOAD">
            <summary>
            Allowed to upload to folder
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAssetNodeLevelPermission.FULL_ACCESS">
            <summary>
            Full read/write access
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumAssetType">
            <summary>
            The list of asset entry types
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAssetType.FILE">
            <summary>
            A asset <see cref="T:System.IO.FileInfo">File</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAssetType.FOLDER">
            <summary>
            A <see cref="T:System.IO.DirectoryInfo">Folder</see> that contains asset <see cref="T:System.IO.FileInfo">Files</see>
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType">
            <summary>
            The list of authentication types to an SMTP server
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType.ANONYMOUS">
            <summary>
            Anonymous authentication
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType.BASIC">
            <summary>
            Basic authentication
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSMTPAuthenticationType.NTLM">
            <summary>
            Windows Challenge/Response authentication, for SMTP server on Windows only
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumStepState">
            <summary>
            The list of states of a <see cref="T:Ingeniux.CMS.IStep">Task Step</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumStepState.NOT_STARTED">
            <summary>
            <see cref="T:Ingeniux.CMS.IStep">Task Step</see> is not yet started
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumStepState.ON_GOING">
            <summary>
            <see cref="T:Ingeniux.CMS.IStep">Task Step</see> is on going
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumStepState.COMPLETED">
            <summary>
            <see cref="T:Ingeniux.CMS.IStep">Task Step</see> is completed
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumReferenceRemovalType">
            <summary>
            The list of action type on removing a <see cref="T:Ingeniux.CMS.IReferenceEntry">Page to Page Reference</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumReferenceRemovalType.AsSourceAndTarget">
            <summary>
            Remove as both source and target
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumReferenceRemovalType.AsTarget">
            <summary>
            Remove as target
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumReferenceRemovalType.AsSource">
            <summary>
            Remove as source
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType">
            <summary>
            The list of types of history entry for one specific <see cref="T:Ingeniux.CMS.IPage">Page</see> in a <see cref="T:Ingeniux.CMS.IUrlMapPageEntry">URL Map</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.NativeID">
            <summary>
            The <see cref="T:Ingeniux.CMS.IUrlMapPageEntry">URL Map entry</see> is the XID of the page
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.NativeStructuredUrl">
            <summary>
            Represents the natural StructuredUrl; added automatically <see cref="T:Ingeniux.CMS.IUrlMapPageEntry">URL Map</see> building
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Deleted">
            <summary>
            Represents a delete action of <see cref="T:Ingeniux.CMS.IPage">Page</see>'s location
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Renamed">
            <summary>
            Represents a removal action of <see cref="T:Ingeniux.CMS.IPage">Page</see>'s location
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.PublishAs">
            <summary>
            Added by the migration process when new PublishAs info is available.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Moved">
            <summary>
            Represents a move action of <see cref="T:Ingeniux.CMS.IPage">Page</see>'s location
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Custom">
            <summary>
            Added by the user.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Canonical">
            <summary>
            A mapped path that should override the structured URL to become the canonical URL.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.Unknown">
            <summary>
            Added by the migration process when a page does not have mapType info associated with it.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumUrlMapPageHistoryType.MultiFormatPage">
            <summary>
            Represents a very special url override for Multi_format publishes only.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType">
            <summary>
            The list of how <see cref="T:Ingeniux.CMS.IAuditTrail">Audit Trail</see> perform archives
            </summary>
            <seealso cref="T:Ingeniux.CMS.IAuditTrailSettings"/>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType.ByPeriod">
            <summary>
            Archives <see cref="T:Ingeniux.CMS.IAuditEntry">audit entries</see> by time period
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAuditTrailArchiveType.BySize">
            <summary>
            Archives <see cref="T:Ingeniux.CMS.IAuditEntry">audit entries</see> by entries count
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumAuditTrailArchivePeriod">
            <summary>
            The list of <see cref="T:Ingeniux.CMS.IAuditTrail">Audit Trail</see> archive period units
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAuditTrailArchivePeriod.Year">
            <summary>
            Archives <see cref="T:Ingeniux.CMS.IAuditEntry">audit entries</see> per year
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAuditTrailArchivePeriod.Month">
            <summary>
            Archives <see cref="T:Ingeniux.CMS.IAuditEntry">audit entries</see> per month
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumAuditTrailArchivePeriod.Week">
            <summary>
            Archives <see cref="T:Ingeniux.CMS.IAuditEntry">audit entries</see> per week
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumSystemSchema">
            <summary>
            The list of types for <see cref="T:Ingeniux.CMS.ISchema">Schemas</see> that will be available by default to all Ingeniux CMS Site Instances
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.BinaryDocument">
            <summary>
            The "Binary Document" <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.Folder">
            <summary>
            The "Folder" <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.Image">
            <summary>
            The "Image" <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.Insert">
            <summary>
            The "Insert" xPower component <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.Media">
            <summary>
            The "Media" <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumSystemSchema.Navigation">
            <summary>
            The "Navigation" xPower component <see cref="T:Ingeniux.CMS.ISchema">Schema</see>
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap">
            <summary>
            The list of level to specify when a <see cref="T:Ingeniux.CMS.Presentation.ILayoutRow">Layout Row</see> will wrap its columns.
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap.WrapOnMobileDeviceScreen">
            <summary>
            <see cref="T:Ingeniux.CMS.Presentation.ILayoutRow">Layout Row</see> will wrap its columns, on a Mobile Device screen size or smaller
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap.WrapOnTabletScreen">
            <summary>
            <see cref="T:Ingeniux.CMS.Presentation.ILayoutRow">Layout Row</see> will wrap its columns, on a Tablet Device screen size or smaller
            </summary>
        </member>
        <member name="F:Ingeniux.CMS.Enums.EnumLayoutRowGridsWrap.NeverWrap">
            <summary>
            <see cref="T:Ingeniux.CMS.Presentation.ILayoutRow">Layout Row</see> will not wrap its column, no matter the screen size
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.SelectionChoiceItem">
            <summary>
            Represents a choice item for a field select perform select or multi-select
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.SelectionChoiceItem.Label">
            <summary>
            Gets/set the label of the choice.  If label is set to null or white space, will use 
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.ChoicesProviderOptions">
            <summary>
            Contains information on how the choices for a enumerative <see cref="T:Ingeniux.CMS.IElement">element</see>
            should be presented.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IEnumerationElementChoicesProvider"/>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Ingeniux.CMS.ChoicesProviderOptions.Sort" -->
        <member name="F:Ingeniux.CMS.ChoicesProviderOptions.Filter">
             <summary>
            If the client requests that the data be filtered
            (typically by matching a "starts-with" test of the value), then this property
            holds the string to be tested against. If this option is left
            unchanged, the system filters the results. The developer has the
            option to apply the filter here, after which the filter property should be
            changed to be an empty string or a Boolean false, so that the system does not try to
            apply the filter again. This option is available to apply more-efficient
            filtering techniques (such as a SQL "WHERE" clause, in the case of selecting
            from a database).
            This option applies only to Multiselect Elements, not Enumeration Elements.
             </summary>
        </member>
        <member name="F:Ingeniux.CMS.ChoicesProviderOptions.Validate">
             <summary>
            True by default. This option instructs the system to remove
            empty values from the list before the response is sent to the client. The
            validate property can be set to false in order to disable this behavior and
            potentially increase performance.
            This option applies only to Multiselect Elements, not Enumeration Elements.
             </summary>
        </member>
        <member name="F:Ingeniux.CMS.ChoicesProviderOptions.PageId">
             <summary>
            This input can be used to determine the page for which the client
            is requesting data. This allows the developer to return different data based
            on page ID (example: "x123")
            This option applies to both Multiselect Elements and Enumeration Elements.
             </summary>
        </member>
        <member name="T:Ingeniux.CMS.ChoicesProviderApplicableCondition">
            <summary>
            Describes the when this provider should provide the choices to an <see cref="T:Ingeniux.CMS.IElement">element</see>.
            This object provides the logic to decide whether the provider to which it belongs should be used to provide element choices, based
            on the combination of <see cref="T:Ingeniux.CMS.ISchema">Schema</see>Name and <see cref="T:Ingeniux.CMS.IElement">Element</see>Names.
            </summary>
            <seealso cref="T:Ingeniux.CMS.IEnumerationElementChoicesProvider"/>
        </member>
        <member name="M:Ingeniux.CMS.ChoicesProviderApplicableCondition.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the ChoicesProviderApplicableCondition class, given <see cref="T:Ingeniux.CMS.ISchema">schema</see>Name
            and <see cref="T:Ingeniux.CMS.IElement">element</see>Names.
            </summary>
            <param name="schemaName">The name of the <see cref="T:Ingeniux.CMS.ISchema">schema.</see></param>
            <param name="elementNames">A collection of <see cref="!:Ingeniux.CMS.Ielement">element</see> names.</param>
        </member>
        <member name="M:Ingeniux.CMS.ChoicesProviderApplicableCondition.Match(System.String,System.String)">
            <summary>
            Checks if the <see cref="T:Ingeniux.CMS.IEnumerationElementChoicesProvider">provider</see> can provide choices for the given <see cref="T:Ingeniux.CMS.IElement">element</see>,
            by checking the <see cref="T:Ingeniux.CMS.ISchema">schema</see>Name and <see cref="T:Ingeniux.CMS.IElement">element</see>Name.
            </summary>
            <param name="schemaName">Name of the page schema</param>
            <param name="elementName">Name of the element on page</param>
            <returns>True if it can provide choices, false otherwise</returns>
        </member>
        <member name="P:Ingeniux.CMS.ChoicesProviderApplicableCondition.SchemaName">
            <summary>
            Gets the SchemaName criteria.
            <see cref="T:Ingeniux.CMS.IEnumerationElementChoicesProvider">Provider</see> will only work if SchemaName matches.
            </summary>
            <remarks>Please note that this is the <see cref="!:Ingeniux.CMS.ISchema.RootName">RootName</see> of the schema, not the <see cref="!:Ingeniux.CMS.ISchema.FriendlyName">FriendlyName</see>.</remarks>
        </member>
        <member name="P:Ingeniux.CMS.ChoicesProviderApplicableCondition.ElementNames">
            <summary>
            Gets the list of <see cref="T:Ingeniux.CMS.IElement">Element</see>Names criteria.
            <see cref="T:Ingeniux.CMS.IEnumerationElementChoicesProvider">Provider</see> will only work if ElementNames is contained in this collection
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.IEnumerationElementChoicesProvider">
            <summary>
            Represents objects that provide choices for selection-type elements.
            The CSAPI searches for concrete classes that implement this interface to provide actual choices
            </summary>
            <example>
            This provider type affects the element types of
            <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_ENUMERATION"/> and <see cref="F:Ingeniux.CMS.Enums.EnumElementType.IGX_MULTI_SELECT"/>.
            </example>
        </member>
        <member name="M:Ingeniux.CMS.IEnumerationElementChoicesProvider.GetElementValues(Ingeniux.CMS.ISite,Ingeniux.CMS.ChoicesProviderOptions)">
            <summary>
            Returns choices for the <see cref="T:Ingeniux.CMS.IElement">element</see> that invokes it.
            </summary>
            <param name="site">The <see cref="T:Ingeniux.CMS.ISite">site</see> instance</param>
            <param name="options">The options for how the choices are presented</param>
            <returns>Collection of choices.</returns>
        </member>
        <member name="P:Ingeniux.CMS.IEnumerationElementChoicesProvider.ApplicableConditions">
            <summary>
            Gets the conditions under which this provider kicks in.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.Customizability.CustomIndexes.CustomIndexesCodeCompiler.CompileCustomIndexes(System.DateTime@,System.String,System.String)">
            <summary>
            Return the temporary assembly compiled that contains the custom indexes defined 
            </summary>
            <param name="hookClassInstance"></param>
            <param name="fileLoadTime"></param>
            <param name="hookClassFileLocation"></param>
            <param name="typeName"></param>
            <param name="compilationErrorPrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.InvalidCrossLocaleCopyException">
            <summary>
            The exception that indicates an error during cross-locale page copy. It carries additional information on the cross-locale page copy action.
            </summary>
            <seealso cref="M:Ingeniux.CMS.ISite.CrossLocaleCopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,System.Boolean)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.CopyRegionRootPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions,Ingeniux.CMS.ILocale)"/>
            <seealso cref="M:Ingeniux.CMS.ISite.CopyPage(Ingeniux.CMS.IPage,Ingeniux.CMS.IPage,Ingeniux.CMS.Enums.EnumCopyActions)"/>
        </member>
        <member name="F:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetParentPage">
            <summary>
            Gets and sets the target page.
            </summary>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetLocale"/>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourcePage"/>
        </member>
        <member name="M:Ingeniux.CMS.InvalidCrossLocaleCopyException.#ctor(System.String)">
            <summary>
            Constructs a new instance of InvalidCrossLocaleCopyException, with a provided message.
            </summary>
            <param name="msg">Error message</param>
        </member>
        <member name="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourceLocale">
            <summary>
            Gets and sets the locale of the source page for the copy action.
            </summary>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourcePage"/>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetLocale">
            <summary>
            Gets and sets the locale of the target page for the copy action.
            </summary>
            <seealso cref="F:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetParentPage"/>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourceLocale"/>
        </member>
        <member name="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourcePage">
            <summary>
            Gets and sets the source page.
            </summary>
            <seealso cref="P:Ingeniux.CMS.InvalidCrossLocaleCopyException.SourceLocale"/>
            <seealso cref="F:Ingeniux.CMS.InvalidCrossLocaleCopyException.TargetParentPage"/>
        </member>
        <member name="T:Ingeniux.CMS.InvalidRegionRootSetException">
            <summary>
            The exception that indicates an error while copying a lingual root page. It carries additional information on the copy action.
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.CSAPILogger.GetLogger(System.String,Ingeniux.CMS.ISettings)">
            <summary>
            CSAPI Logger is singleton, attached to each content store. Therefore, there cannot be 2 loggers in the same app domain.
            
            Logger will be swapped for another one, if for any reason content store switches, a new logger will be created and returned
            </summary>
            <param name="sitePath"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.CSAPILogger.CreateCMSActivityLogger(Ingeniux.CMS.ISettings,System.String,System.String)">
            <summary>
            Creates a Logger for tracking CMS activities.
            Custom applications of CMS can use this method to create their own logger, while sticking to CMS logging settings
            </summary>
            <param name="settings">CMS settings</param>
            <param name="logFilePath">Path of log file</param>
            <param name="logTargetName">Name of log target</param>
            <returns></returns>
        </member>
        <member name="M:Ingeniux.CMS.CSAPILogger.CreateLogger``1(System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Creates a Logger for any purpose. Log settings and decided arbituarily
            </summary>
            <param name="logFilePath"></param>
            <param name="logTargetName"></param>
            <param name="archiveAboveSize"></param>
            <param name="maxArchiveFiles"></param>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Ingeniux.CMS.Models.Messaging.MessengerBase">
            <summary>
            The base class for all proxies
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ingeniux.CMS.Models.Messaging.Messenger">
            <summary>
            The proxy class for general purpose messages
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.Models.Messaging.PushMessenger`1">
            <summary>
            This is a internal use class for sending SignalR push notifiction.
            It is not in charge to received request from client, just to a way for CMS site to push out notifications
            </summary>
            <typeparam name="TClientProxy">Proxy type - which client proxy to send message to</typeparam>
        </member>
        <member name="T:Ingeniux.CMS.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ActionAttributes">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;ActionTypes&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_ARCHIVE_PAGE&quot;&gt;
            	&lt;/ActionType&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_BRIDGE&quot;&gt;
            		&lt;Attribute Name=&quot;Target_Workflow&quot;/&gt;
            	&lt;/ActionType&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_CHECKIN&quot;&gt;
            		&lt;Attribute Name=&quot;CheckInPubTargets&quot;/&gt;
            	&lt;/ActionType&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_CHECKOUT&quot;&gt;
            	&lt;/ActionType&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_CUSTOM&quot;&gt;
            		&lt;Attribute Name=&quot;ProgID&quot;/&gt;
            	&lt;/ActionType&gt;
            	&lt;ActionType Name =&quot;IGX_ACTION_EXTERNAL_CLIENT&quot;&gt;
            	&lt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.AdditionalLocationSourceDirectoryX0Contain">
            <summary>
              Looks up a localized string similar to Additional location source directory &quot;{0}&quot; contains illegal characters that are not supported by replication system.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.AssetSecurity">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;AssetSecurity LastUpdatedUser=&quot;ingeniux\awang&quot; LastUpdated=&quot;20080424T18:45:49&quot; LastUpdateUser=&quot;ingeniux\awang&quot;&gt;
              &lt;Definitions&gt;
                &lt;Definition Description=&quot;The Asset (Folder only for now)&quot; FullName=&quot;Asset&quot; TagName=&quot;A&quot; /&gt;
                &lt;Definition Description=&quot;The Asset Path&quot; FullName=&quot;Path&quot; TagName=&quot;PT&quot; /&gt;
                &lt;Definition Description=&quot;The Asset&apos;s parent folder&quot; FullName=&quot;ParentFolder&quot; TagName=&quot;PA&quot; /&gt;
                &lt;Definition Description=&quot;Type of asset (File or Folder, reserved)&quot;  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.AttributeTypeSSIsRequiredForSchema">
            <summary>
              Looks up a localized string similar to AttributeType &quot;SS&quot; is required for schema.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.buildURlMapStepMessage">
            <summary>
              Looks up a localized string similar to Building Structured URL Map.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddAnotherDefaultPresentationToPageA">
            <summary>
              Looks up a localized string similar to Cannot add another Default Presentation to Page, all publishing targets have presentations associated..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddAttributeX0ToSchemaAAttributeWith">
            <summary>
              Looks up a localized string similar to Cannot add attribute &quot;{0}&quot; to schema. A attribute with the same name already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddChildElementCannotFindAnchorEleme">
            <summary>
              Looks up a localized string similar to Cannot add child element, cannot find anchor element in collection..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddChildItemToGroupElementGroupIsAlr">
            <summary>
              Looks up a localized string similar to Cannot add child item to Group Element: Group is already closed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddCustomLocaleAnotherCustomLocaleWi">
            <summary>
              Looks up a localized string similar to Cannot add custom locale, another custom locale with the same region code already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddCustomLocaleAnotherNativeLocaleWi">
            <summary>
              Looks up a localized string similar to Cannot add Custom Locale, another Native Locale with with region code already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddDeviceToPreviewEmulationBundleInv">
            <summary>
              Looks up a localized string similar to Cannot add device to preview emulation bundle: Invalid device ID &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddElemenetTheElementUniqueX0Already">
            <summary>
              Looks up a localized string similar to Cannot add elemenet, the element unique &quot;{0}&quot; already exists in element collection..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddElementBeforeSelfCurrentElementIs">
            <summary>
              Looks up a localized string similar to Cannot add element before self: Current element is not child of any element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddElementX0ToSchemaAnElementWithThe">
            <summary>
              Looks up a localized string similar to Cannot add element &quot;{0}&quot; to schema. An element with the same name already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddGlobalVariableAnotherVariableWith">
            <summary>
              Looks up a localized string similar to Cannot add Global Variable, another Variable with the same name already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddLingualMapBetweenPageX0AndX1There">
            <summary>
              Looks up a localized string similar to Cannot add Lingual Map between Page {0} and {1}, there is already a &quot;{2}&quot; Clone Map..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddLingualPageMapToNullMasterMapGrou">
            <summary>
              Looks up a localized string similar to Cannot add lingual page map to null master map group.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddMobilePresentationGivenPublishing">
            <summary>
              Looks up a localized string similar to Cannot add Mobile Presentation. Given publishing target always associated with another presentation for given user agent..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddMobilePresentationToPublishingTar">
            <summary>
              Looks up a localized string similar to Cannot add mobile presentation to publishing target, pub target already associated with a presentation with same user agent search string..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddMobilePresentationWithoutSpecifyi">
            <summary>
              Looks up a localized string similar to Cannot add mobile presentation without specifying pub target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewDefaultPresentationForAllPubli">
            <summary>
              Looks up a localized string similar to Cannot add new Default Presentation for all Publishing Targets, some Publishing Targets already have presentations associated with them..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewDefaultPresentationWithoutSpec">
            <summary>
              Looks up a localized string similar to Cannot add new Default Presentation, without specifying what Publishing Targets they are for..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewMobilePresentationForAllPublis">
            <summary>
              Looks up a localized string similar to Cannot add new Mobile Presentation for all publishing target. Another presentation is already taken the all publishing target role for given user agent..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewMobilePresentationWithoutSpeci">
            <summary>
              Looks up a localized string similar to Cannot add new mobile presentation without specifying user agent search string..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewMobilePresentationWithoutSpeci1">
            <summary>
              Looks up a localized string similar to Cannot add new Mobile Presentation without specifying publishing targets..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewPresentationOtherwisePresentat">
            <summary>
              Looks up a localized string similar to Cannot add new Presentation, otherwise Presentation with the same name already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewPresentationWithoutSpecifyingC">
            <summary>
              Looks up a localized string similar to Cannot add new presentation without specifying container id..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewRedirectEntryAnotherRedirectEn">
            <summary>
              Looks up a localized string similar to Cannot add new Redirect entry, another Redirect entry with the same from address &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNewReplicationSessionsThePublishi">
            <summary>
              Looks up a localized string similar to Cannot add new replication sessions. The publishing target with target folder &quot;{0}&quot; has ongoing replication..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNullCategoryAsAllowedRootCategory">
            <summary>
              Looks up a localized string similar to Cannot add null category as allowed root category for schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNullCategoryAsDefaultCategoryToAn">
            <summary>
              Looks up a localized string similar to Cannot add null category as default category to an schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddNullUnitChangeActionToDiffPlan">
            <summary>
              Looks up a localized string similar to Cannot add null unit change action to diff plan..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddPageToWorkflowPageOrWorkflowDefin">
            <summary>
              Looks up a localized string similar to Cannot add Page to Workflow, Page or Workflow Definition not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddPageToWorkflowWithoutSpecifyingTh">
            <summary>
              Looks up a localized string similar to Cannot add page to workflow without specifying the workflow definition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddPageX0ToWorkflowX1PageWasAlreadyI">
            <summary>
              Looks up a localized string similar to Cannot add Page &quot;{0}&quot; to Workflow &quot;{1}&quot;. Page was already in Workflow..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddPresentationToNullPubTarget">
            <summary>
              Looks up a localized string similar to Cannot add presentation to null pub target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddPresentationToPubTargetPubTargetA">
            <summary>
              Looks up a localized string similar to Cannot add presentation to pub target, pub target already associated with an existing presentation..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddSchemaFavoriteEntryAnotherEntryWi">
            <summary>
              Looks up a localized string similar to Cannot add schema favorite entry, another entry with the same name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTaskMonitorWithoutSpecifyingPubli">
            <summary>
              Looks up a localized string similar to Cannot add Task Monitor without specifying Publishing Target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTransitionToWorkflowDefinitionATr">
            <summary>
              Looks up a localized string similar to Cannot add Transition to Workflow Definition, a Transition with name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTransitionToWorkflowDefinitionInv">
            <summary>
              Looks up a localized string similar to Cannot add Transition to Workflow Definition: Invalid or missing transition name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTransitionToWorkflowDefinitionThe">
            <summary>
              Looks up a localized string similar to Cannot add Transition to Workflow Definition. There is already a transition start at workstate &quot;{0}&quot; and end at workstate &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTransitionToWorkflowDefinitionWit">
            <summary>
              Looks up a localized string similar to Cannot add Transition to Workflow Definition without providing both current state and next state..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAddTransitionToWorkflowDefinitionWit1">
            <summary>
              Looks up a localized string similar to Cannot add Transition to Workflow Definition without specifying the next User Group of the Transition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAdvanceALockedWorkflow">
            <summary>
              Looks up a localized string similar to Cannot advance a locked Workflow.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAdvancePageInWorkflowAnyFurtherNoTra">
            <summary>
              Looks up a localized string similar to Cannot advance Page in Workflow any further, no transition is available from current Work State..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssignPageToUserX0BecauseItIsNotAMem">
            <summary>
              Looks up a localized string similar to Cannot assign page to user &quot;{0}&quot;, because it is not a member of workflow&apos;s current group &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssignPresentationToNullPubTarget">
            <summary>
              Looks up a localized string similar to Cannot assign presentation to null pub target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssignTransitionSDefaultUserBeforeAs">
            <summary>
              Looks up a localized string similar to Cannot assign Transition&apos;s default user before assigning the next group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssignTransitionSDefaultUserTheUserP">
            <summary>
              Looks up a localized string similar to Cannot assign Transition&apos;s default user, the user provided doesn&apos;t belong to next group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssociateCategoriesToANullPage">
            <summary>
              Looks up a localized string similar to Cannot associate categories to a null page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotAssociateSearchFieldWithPublishingTa">
            <summary>
              Looks up a localized string similar to Cannot associate Search Field with Publishing Target without specifying the Publishing Target to associate with..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCategorizePageThereAreCategoriesNotL">
            <summary>
              Looks up a localized string similar to Cannot categorize page, there are categories not loaded from current session. Cross session objects manipulation is not allowed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeCategoryCategoryIs">
            <summary>
              Looks up a localized string similar to Cannot change Category: Category is not retrieve under a Writing session, or doesn&apos;t have Operating User context..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeCategoryOperatingU">
            <summary>
              Looks up a localized string similar to Cannot Category: Operating user doesn&apos;t have write permission on Category..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeCMSSettingsWithProvidingSettin">
            <summary>
              Looks up a localized string similar to Cannot change CMS settings with providing setting name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeCMSSettingWithProvidingSection">
            <summary>
              Looks up a localized string similar to Cannot change CMS setting with providing section name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeContentFreezeStateCurrentUserI">
            <summary>
              Looks up a localized string similar to Cannot change Content Freeze state, current user is not one of the allowed users to access the CMS..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotChangeStylesheetFileNameX0">
            <summary>
              Looks up a localized string similar to Cannot change Stylesheet File Name: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCheckInCurrentPageThePageIsAssignedT">
            <summary>
              Looks up a localized string similar to Cannot check in current page, the page is assigned to another user, and current user doesn&apos;t have permission to check in pages assigned to other users..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCheckOutRemovedPages">
            <summary>
              Looks up a localized string similar to Cannot check out removed pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotClaimPageBecauseCurrentUserDoesnTBel">
            <summary>
              Looks up a localized string similar to Cannot claim page because current user doesn&apos;t belong to the assigned group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotClaimPageThatIsNotAssignedToAnyGroup">
            <summary>
              Looks up a localized string similar to Cannot claim page that is not assigned to any group.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCloneANullObject">
            <summary>
              Looks up a localized string similar to Cannot clone a null object..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCloneFromProvidedObjectBecauseItWasN">
            <summary>
              Looks up a localized string similar to Cannot clone from provided object, because it was not retrieved from this session..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCloneGroupElementCloneSourceElementI">
            <summary>
              Looks up a localized string similar to Cannot clone group element: clone source element is not an group element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConnectToFTPHostX0">
            <summary>
              Looks up a localized string similar to Cannot connect to FTP host &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConnectToSCPHostX0">
            <summary>
              Looks up a localized string similar to Cannot connect to SCP host &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConnectToSecureFTPHostX0">
            <summary>
              Looks up a localized string similar to Cannot connect to Secure FTP host &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConstructComponentContentUnitWithAnE">
            <summary>
              Looks up a localized string similar to Cannot construct Component content unit with an Element that is not a Component element..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConstructContentUnitWithProvidingFie">
            <summary>
              Looks up a localized string similar to Cannot construct ContentUnit with providing field information..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotConstructSearchSchemaExceptionWithou">
            <summary>
              Looks up a localized string similar to Cannot construct SearchSchemaException without specifying schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotContinueProjectAllReadyAtLastStep">
            <summary>
              Looks up a localized string similar to Cannot continue project, all ready at last step..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCopyPageWithoutProvidingTargetParent">
            <summary>
              Looks up a localized string similar to Cannot copy page without providing target parent page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateAComponentContentUnitWithoutPr">
            <summary>
              Looks up a localized string similar to Cannot create a Component Content Unit without providing the component type..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateACustomLocaleThatIsBasedOnAnot">
            <summary>
              Looks up a localized string similar to Cannot create a custom locale that is based on another custom locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateAPageWithPageCreationRuleWitho">
            <summary>
              Looks up a localized string similar to Cannot create a Page with Page Creation Rule without specifying the Page Creation Rule..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateAReplicationTaskMonitorWithout">
            <summary>
              Looks up a localized string similar to Cannot create a ReplicationTaskMonitor without specifying the Replication Target it is for..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateAUserGroupWithoutProvidingName">
            <summary>
              Looks up a localized string similar to Cannot create a UserGroup without providing name of the UserGroup..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateBlankComponentContentUnitWitho">
            <summary>
              Looks up a localized string similar to Cannot create blank Component Content Unit without specifying component schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateCategorySynonymWithoutActualSy">
            <summary>
              Looks up a localized string similar to Cannot create Category Synonym without actual synoym string..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateComponentContentUnitReferringT">
            <summary>
              Looks up a localized string similar to Cannot create Component Content Unit referring to a Page that no longer associates with any schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateComponentContentUnitWithRefere">
            <summary>
              Looks up a localized string similar to Cannot create Component Content Unit with reference without specifying the component to refer to..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateContentUnitBasedOnListFieldTyp">
            <summary>
              Looks up a localized string similar to Cannot create Content Unit based on List field type..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateContentUnitWithoutProvidingCon">
            <summary>
              Looks up a localized string similar to Cannot create content unit without providing content unit name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateCustomLocaleInstanceWithoutBas">
            <summary>
              Looks up a localized string similar to Cannot create Custom Locale instance without base Locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateCustomLocaleInstanceWithoutPro">
            <summary>
              Looks up a localized string similar to Cannot create Custom Locale instance without providing region code and English name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateElementBaseOnSchemaFieldX0Sche">
            <summary>
              Looks up a localized string similar to Cannot create element base on schema field &quot;{0}&quot;: schema field type is Attribute..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateElementOnPageWithNullSchemaFie">
            <summary>
              Looks up a localized string similar to Cannot create element on page with null schema field..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateExportDefinitionNameNotProvide">
            <summary>
              Looks up a localized string similar to Cannot create ExportDefinition: Name not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateExportElementNullOrEmptyNameOr">
            <summary>
              Looks up a localized string similar to Cannot create Export element: Null or empty Name or Query.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateExportEntryMissingExportName">
            <summary>
              Looks up a localized string similar to Cannot create Export entry: Missing export name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateFTPFileSyncProviderInvalidMeta">
            <summary>
              Looks up a localized string similar to Cannot create FTPFileSyncProvider: Invalid meta store directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateGlobalVariableWithoutSpecifyin">
            <summary>
              Looks up a localized string similar to Cannot create Global Variable without specifying its Name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateGroupedElementsFromSchemaUnabl">
            <summary>
              Looks up a localized string similar to Cannot create Grouped elements from schema: Unable to locate matching group end..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateGroupElementFromSchemaFieldsNo">
            <summary>
              Looks up a localized string similar to Cannot create Group Element from schema fields. Not detecting group start and group end at the right locations..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateInstanceOfDirectFileSyncProvid">
            <summary>
              Looks up a localized string similar to Cannot create instance of DirectFileSyncProvider: Invalid meta data directory &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateLingualMapOfMasterAndCloneBein">
            <summary>
              Looks up a localized string similar to Cannot create lingual map of master and clone being the same page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateLingualMapWithMasterAndClonePa">
            <summary>
              Looks up a localized string similar to Cannot create Lingual Map with master and clone pages being the same locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateListElementFromSchemaInvalidCh">
            <summary>
              Looks up a localized string similar to Cannot create list element from schema, invalid child element type..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateListElementTheChildTypeCannotB">
            <summary>
              Looks up a localized string similar to Cannot create ListElement: The child type cannot be list or group.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateLocaleInstanceWithoutSpecifyin">
            <summary>
              Looks up a localized string similar to Cannot create Locale instance without specifying Culture info..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNavigationElementTypeElementTy">
            <summary>
              Looks up a localized string similar to Cannot create navigation element type, element type from schema is not navigation type..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewActionMustSpecifyTheOperatingUser">
            <summary>
              Looks up a localized string similar to Cannot create new action: Must specify the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewCategorySynoymWithoutSpecif">
            <summary>
              Looks up a localized string similar to Cannot create new Category Synoym without specifying the creation user..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewGroupRoleWithoutSpecifyingB">
            <summary>
              Looks up a localized string similar to Cannot create new Group Role without specifying both Role name and permissions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewObjectWithNullObjectPassedI">
            <summary>
              Looks up a localized string similar to Cannot create new object with null object passed in..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewPageMobilePresentationWitho">
            <summary>
              Looks up a localized string similar to Cannot create new PageMobilePresentation without specifying user agent search string..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewPagePresentationWithoutProv">
            <summary>
              Looks up a localized string similar to Cannot create new PagePresentation without providing id of html element that will be the container of presentation rendering..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewPublishingTargetWithoutSpec">
            <summary>
              Looks up a localized string similar to Cannot create new Publishing Target without specifying its name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewPublishingTargetWithoutSpec1">
            <summary>
              Looks up a localized string similar to Cannot create new Publishing Target without specifying root Page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewPublishingTargetWithRecycle">
            <summary>
              Looks up a localized string similar to Cannot create new Publishing Target with Recycle folder as the root Page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewSchemaWithoutSchemaNameProv">
            <summary>
              Looks up a localized string similar to Cannot create new schema without schema name provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewSearchFieldExceptionWithout">
            <summary>
              Looks up a localized string similar to Cannot create new Search field exception without specifying the name of the field..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewTransitionMustSpecifyTheOperatingUser">
            <summary>
              Looks up a localized string similar to Cannot create new transition: Must specify the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewUserGroupMustSpecifyTheOper">
            <summary>
              Looks up a localized string similar to Cannot create new user group: Must specify the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewUserMustSpecifyTheOperating">
            <summary>
              Looks up a localized string similar to Cannot create new user: Must specify the operating user of the action.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNewUserUserX0AlreadyExists">
            <summary>
              Looks up a localized string similar to Cannot create new user: User &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateNodeLevelPermissionInstanceUse">
            <summary>
              Looks up a localized string similar to Cannot create NodeLevelPermission instance: User group not sepecified..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageCreationRuleObjectInvalidR">
            <summary>
              Looks up a localized string similar to Cannot create PageCreationRule object: Invalid Rule Name.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageCreationRuleWithoutProvidi">
            <summary>
              Looks up a localized string similar to Cannot create Page Creation Rule without providing Schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageParentPageNotProvided">
            <summary>
              Looks up a localized string similar to Cannot create page: Parent page not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePagePresentationCollectionWith">
            <summary>
              Looks up a localized string similar to Cannot create PagePresentationCollection with specifying which page it is for..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageSchemaNotProvided">
            <summary>
              Looks up a localized string similar to Cannot create page: schema not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageVersionObjectPagePassedInC">
            <summary>
              Looks up a localized string similar to Cannot create PageVersion object: Page passed in cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageViaPageCreationRuleNoParen">
            <summary>
              Looks up a localized string similar to Cannot create page via Page Creation Rule: No parent page available..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageViaPageCreationRuleUserDoe">
            <summary>
              Looks up a localized string similar to Cannot create page via Page Creation Rule. User doesn&apos;t have full access to override parent page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageWithDraftSchema">
            <summary>
              Looks up a localized string similar to Cannot create Page with draft Schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageWithPageCreationRuleInvali">
            <summary>
              Looks up a localized string similar to Cannot create page with page creation rule: Invalid parent page provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageWithPageCreationRulePageCr">
            <summary>
              Looks up a localized string similar to Cannot create page with page creation rule: Page creation rule doesn&apos;t have any parent pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePageWithSchemaX0UnclosedGroupS">
            <summary>
              Looks up a localized string similar to Cannot create Page with Schema &quot;{0}&quot;: Unclosed GroupStart fields detected in schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreatePublishingProfileWithoutSpecif">
            <summary>
              Looks up a localized string similar to Cannot create Publishing Profile without specifying its name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaFieldFieldTypeNotProvide">
            <summary>
              Looks up a localized string similar to Cannot create SchemaField: field type not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaFieldInvalidNameOfFieldX">
            <summary>
              Looks up a localized string similar to Cannot create schema field: Invalid name of field &quot;{0}&quot;: {1}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaFieldNameNotProvided">
            <summary>
              Looks up a localized string similar to Cannot create SchemaField: Name not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaObjectInvalidDefaultStyl">
            <summary>
              Looks up a localized string similar to Cannot create Schema object: Invalid default stylesheet name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaObjectInvalidRootNameX0">
            <summary>
              Looks up a localized string similar to Cannot create schema object: Invalid root name &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaObjectInvalidViewNameX0">
            <summary>
              Looks up a localized string similar to Cannot create Schema object: Invalid View Name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaObjectRootNameNotProvide">
            <summary>
              Looks up a localized string similar to Cannot create schema object: Root name not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaSchemaWithSameFriendlyNa">
            <summary>
              Looks up a localized string similar to Cannot create schema: schema with same friendly name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSchemaSchemaWithSameRootNameX0">
            <summary>
              Looks up a localized string similar to Cannot create schema: schema with same root name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateScpFileSyncProviderInvalidMet">
            <summary>
              Looks up a localized string similar to Cannot create ScpFileSyncProvider: Invalid meta store directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSFTPFileSyncProviderInvalidMet">
            <summary>
              Looks up a localized string similar to Cannot create SFTPFileSyncProvider: Invalid meta store directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateSiteInstanceOperatingUserNotPr">
            <summary>
              Looks up a localized string similar to Cannot create Site instance: operating user not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateStylesheetObjectInvalidStylesh">
            <summary>
              Looks up a localized string similar to Cannot create Stylesheet object: Invalid stylesheet file or file doesn&apos;t exist: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateUserActivityPageEntryWithNullP">
            <summary>
              Looks up a localized string similar to Cannot create UserActivityPageEntry with null page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateUserEntityUpdateSessionWithout">
            <summary>
              Looks up a localized string similar to Cannot create UserEntityUpdateSession without providing entity to update..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotCreateUserWithoutProvidingUserId">
            <summary>
              Looks up a localized string similar to Cannot create user without providing user id.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotDirectlyCopyARegionRootPageUnderAnot">
            <summary>
              Looks up a localized string similar to Cannot directly copy a Region Root Page under another Region Root Page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotEmbedAnObjectThatIsNotDerivedFromPag">
            <summary>
              Looks up a localized string similar to Cannot embed an object that is not derived from PageVersion type..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotEmbedComponentContentUserDoesnTHaveN">
            <summary>
              Looks up a localized string similar to Cannot embed component content: User doesn&apos;t have necessary permissions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotEmbedComponentEmbedContentSchemaIsNo">
            <summary>
              Looks up a localized string similar to Cannot embed component: Embed content schema is not in the allowed component types..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotEmptyRecycleFolderCurrentUserX0Doesn">
            <summary>
              Looks up a localized string similar to Cannot empty recycle folder: Current user &quot;{0}&quot; doesn&apos;t have the necessary permissions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotExecuteActionsOnSiteTreeCurrentUserD">
            <summary>
              Looks up a localized string similar to Cannot execute actions on Site tree: Current user doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotExecuteDynamicMFOPublishMFOPublisher">
            <summary>
              Looks up a localized string similar to Cannot execute Dynamic MFO publish: MFO publisher assembly not found..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotExecuteTaxonomyActionOperatingUserNo">
            <summary>
              Looks up a localized string similar to Cannot execute taxonomy action: Operating user not specified..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotFormatContentUnitInstanceSourceConte">
            <summary>
              Looks up a localized string similar to Cannot format Content Unit Instance: Source Content Unit &quot;{0}&quot; no longer exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotGetSetAttributeWithNullOrEmptyAttrib">
            <summary>
              Looks up a localized string similar to Cannot get/set/ Element/Attribute with null or empty name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotHaveALingualRootUnderAnotherLingualR">
            <summary>
              Looks up a localized string similar to Cannot have a lingual root under another lingual root in the page tree..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotHaveDuplicateOfLingualClone">
            <summary>
              Looks up a localized string similar to Cannot have duplicate of lingual clone.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotInitializeANewVersionMapCurrentOpenn">
            <summary>
              Looks up a localized string similar to Cannot initialize a new version map: Current openned version map must be finalized first..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotInitializeSchemaSyncherWithNullSchem">
            <summary>
              Looks up a localized string similar to Cannot initialize Schema Syncher with null schema.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotInsertElementNullAnchorSpecified">
            <summary>
              Looks up a localized string similar to Cannot insert element: Null anchor specified.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotJumpToANullWorkState">
            <summary>
              Looks up a localized string similar to Cannot jump to a null Work State..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotMakeDeviceX0TheRepresentativeDeviceO">
            <summary>
              Looks up a localized string similar to Cannot make device &quot;{0}&quot; the representative device of the bundle, because it is not in the bundled devices list..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotManagerGroupRolesWithoutAdministrati">
            <summary>
              Looks up a localized string similar to Cannot manager Group Roles without administrative privillages.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotMarkAFreshPageForPublish">
            <summary>
              Looks up a localized string similar to Cannot mark a Page for publish that has no current version, this is probably because the page has never been checked in: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotMarkAPageForPublishWithoutProvidingT">
            <summary>
              Looks up a localized string similar to Cannot mark a Page for publish, without providing the Page first..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotMarkARecycledPageForPublish">
            <summary>
              Looks up a localized string similar to Cannot mark a recycled Page for publish..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotModifyCategoryNodeX0CurrentUserDoesn">
            <summary>
              Looks up a localized string similar to Cannot modify Category Node &quot;{0}&quot;: Current user doesn&apos;t have full access to the node..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformActionOnPageX0UserX1DoesnTHav">
            <summary>
              Looks up a localized string similar to Cannot perform action on page &quot;{0}&quot;: User &quot;{1}&quot; doesn&apos;t have the necessary access right..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformActionOnPageX0UserX1DoesnTHav1">
            <summary>
              Looks up a localized string similar to Cannot perform action on page &quot;{0}&quot;: User &quot;{1}&quot; doesn&apos;t have the necessary node-level permission..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformAnyActionsWithCurrentSessionI">
            <summary>
              Looks up a localized string similar to Cannot perform any actions with current session. It was already closed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformCrossLocaleCopyBecauseTargetP">
            <summary>
              Looks up a localized string similar to Cannot perform cross locale copy, because target parent doesn&apos;t have master lingual map for source page locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformCrossLocaleCopyFromPageX0ToX1">
            <summary>
              Looks up a localized string similar to Cannot perform cross-locale copy from Page {0} to {1}: Either source Page or target Page doesn&apos;t have language specified..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformCrossLocaleCopyFromPageX0ToX11">
            <summary>
              Looks up a localized string similar to Cannot perform cross-locale copy from Page {0} to {1}: There is no established Lingual Map between their Language Roots..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformCrossLocalePageCopyDueToTheAc">
            <summary>
              Looks up a localized string similar to Cannot perform cross locale page copy, due to the actual target parent page already has a locale and doesn&apos;t allow region root as children..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformCrossRegionCopyBecauseSourceP">
            <summary>
              Looks up a localized string similar to Cannot perform cross-region copy, because source page &quot;{0}({1})&quot; is a region root page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformEntityUpdateEntityDoesnTHaveA">
            <summary>
              Looks up a localized string similar to Cannot perform entity update: Entity doesn&apos;t have an session associated, or session doesn&apos;t have a user associated, or session is already closed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformOperationsOnPagesThatAreInRec">
            <summary>
              Looks up a localized string similar to Cannot perform operations on pages that are in Recycle Folder..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformOperationsOnSchemaExceptionSi">
            <summary>
              Looks up a localized string similar to Cannot perform operations on Schema Exception, since the schema is not set or doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPageCategorizationCurrentUser">
            <summary>
              Looks up a localized string similar to Cannot perform page categorization: Current user doesn&apos;t have full access to given page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPageMoveCopyWhenTargetPageDoe">
            <summary>
              Looks up a localized string similar to Cannot perform Page move/copy when target Page doesn&apos;t have valid hierarchy..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPageMoveWithoutSourceHierarchy">
            <summary>
              Looks up a localized string similar to Cannot perform Move/Copy with no source hierarchy..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPageMoveWithoutSpecifyingTarg">
            <summary>
              Looks up a localized string similar to Cannot perform Page move without specifying target Page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPageMoveWithoutSpecifyingTheP">
            <summary>
              Looks up a localized string similar to Cannot perform Page move/copy without specifying the Page to be moved/copied..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformPublishesWithReadonlySession">
            <summary>
              Looks up a localized string similar to Cannot perform publishes with readonly-session..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformRegionRootCopyCannotCreateARe">
            <summary>
              Looks up a localized string similar to Cannot perform region root copy: Cannot create a region root under another region root.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformRegionRootCopyWithSpecifyingT">
            <summary>
              Looks up a localized string similar to Cannot perform Region Root Copy with specifying target locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformReplicationInvalidPublishingT">
            <summary>
              Looks up a localized string similar to Cannot perform replication, invalid publishing target directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPerformSaveOnTransactionalEntityNoSe">
            <summary>
              Looks up a localized string similar to Cannot perform save on transactional entity, no session openned to content store.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotProvideCrossLocalePageCopyWithoutPro">
            <summary>
              Looks up a localized string similar to Cannot provide cross locale page copy without providing both source page and target parent page.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPublishGlobalVariablesWithoutProvidi">
            <summary>
              Looks up a localized string similar to Cannot publish Global Variables without providing Publishing Target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPublishPageWithoutSpecifyingPublishi">
            <summary>
              Looks up a localized string similar to Cannot publish Page without specifying Publishing Target to publish to..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPublishPresentationCollectionWithout">
            <summary>
              Looks up a localized string similar to Cannot publish presentation collection without specifying publishing target..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotPutAttachmentAttachmentContainsNoCon">
            <summary>
              Looks up a localized string similar to Cannot put attachment: Attachment contains no content stream..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveATransitionWithOnCreateTrigger">
            <summary>
              Looks up a localized string similar to Cannot remove a transition with &quot;OnCreate&quot; trigger from workflow definition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveCategoryX0OperatingUserDoesnTH">
            <summary>
              Looks up a localized string similar to Cannot perform actions on category &quot;{0}&quot;: Operating user doesn&apos;t have full access for this Category or its descendants..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveChildPageCurrentUserX0DoesnTHa">
            <summary>
              Looks up a localized string similar to Cannot remove child Page. Current User &quot;{0}&quot; doesn&apos;t have the rights to remove pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveContentUnitX0ThisContentUnitIs">
            <summary>
              Looks up a localized string similar to Cannot remove Content Unit &apos;{0}&apos;, this Content Unit is being used for existing pages or page versions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveCustomLocaleX0ThereArePagesUsi">
            <summary>
              Looks up a localized string similar to Cannot remove Custom Locale &quot;{0}&quot;, there are Pages using this locale..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveInitialWorkState">
            <summary>
              Looks up a localized string similar to Cannot remove &quot;Initial&quot; WorkState..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemovePageX0AndItsDescendantsSchemaO">
            <summary>
              Looks up a localized string similar to Cannot remove Page {0} and its descendants, Schema origin Pages found in the collection..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemovePageX0FromItsCurrentWorkflowBe">
            <summary>
              Looks up a localized string similar to Cannot remove page {0} from its current workflow, because the workflow is locked..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemovePermissionOnAssetWithoutPathOf">
            <summary>
              Looks up a localized string similar to Cannot remove permission on asset without path of asset provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveSchemaX0ItIsStillBeingUsedByFo">
            <summary>
              Looks up a localized string similar to Cannot remove Schema &quot;{0}&quot;, it is still being used by following Page Creation Rules: {1}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveSchemaX0ThereAreX1ExistingPage">
            <summary>
              Looks up a localized string similar to Cannot remove Schema &quot;{0}&quot;, there are {1} existing Pages created from this Schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveTheRepresentativeDeviceOfADevi">
            <summary>
              Looks up a localized string similar to Cannot remove the representative device of a device bundle..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveTransitionMustSpecifyTheOperatingUser">
            <summary>
              Looks up a localized string similar to Cannot remove transition: Must specify the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveUserGroupMustSpecifyTheOperati">
            <summary>
              Looks up a localized string similar to Cannot remove user group: Must specify the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveUserMustSpecifiyTheOperatingUs">
            <summary>
              Looks up a localized string similar to Cannot remove user: Must specifiy the operating user of the action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRemoveWorkflowDefinitionX0ThereAreOn">
            <summary>
              Looks up a localized string similar to Cannot remove Workflow Definition &quot;{0}&quot;. There are one or more active workflow using this Definition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRenameGlobalVariableAnotherVariableW">
            <summary>
              Looks up a localized string similar to Cannot rename Global Variable, another variable with the same name already exists..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotReOrderActionsInTransitionTheOrdered">
            <summary>
              Looks up a localized string similar to Cannot re-order Actions in Transition: The ordered ids provided are missing Actions from current list..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotReplaceChildContentUnitInstanceWhenE">
            <summary>
              Looks up a localized string similar to Cannot replace child Content Unit Instance, when either original unit or new unit is null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotReplaceSchemaFieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Cannot replace schema field, index out of range.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRetrieveAssociatedPublishingTargetsO">
            <summary>
              Looks up a localized string similar to Cannot retrieve associated Publishing Targets, object missing Manager..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRetrieveCMSSettingWithoutSpecifyingO">
            <summary>
              Looks up a localized string similar to Cannot retrieve CMS setting without specifying operating user..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRetrieveFirstAccessibleParentPageWit">
            <summary>
              Looks up a localized string similar to Cannot retrieve first accessible parent page without valid Site instance..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRetrieveParentPagesOnCurrentPageCrea">
            <summary>
              Looks up a localized string similar to Cannot retrieve parent pages on current Page Creation Rule: Session for rule doesn&apos;t exist or already closed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotRevertToAVersionThatDoesnTBelongToCu">
            <summary>
              Looks up a localized string similar to Cannot revert to a version that doesn&apos;t belong to current page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSaveContentUnitInstanceCurrentUserDo">
            <summary>
              Looks up a localized string similar to Cannot save Content Unit Instance, Current user doesn&apos;t have the necessary permissions to work with Page Presentations..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSavePCRDescriptorRootPageIdNotProvid">
            <summary>
              Looks up a localized string similar to Cannot save PCR Descriptor: Root page id not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSaveRemoteReplicationTargetX0Because">
            <summary>
              Looks up a localized string similar to Cannot save Remote Replication Target &quot;{0}&quot;, because it doesn&apos;t have a valid address.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSaveScreenHeightInvalidValue">
            <summary>
              Looks up a localized string similar to Cannot save screen height, invalid value..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSaveWorldViewSettingsDueToFollowingW">
            <summary>
              Looks up a localized string similar to Cannot save WorldView settings due to following workstate entries not having actual actual workstates associated: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSaveWorldViewSettingsDueToFollowingW1">
            <summary>
              Looks up a localized string similar to Cannot save WorldView settings due to following workflow definition entries not associated with actual workflow definition: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSendEmailInvalidOrMissingToAddresses">
            <summary>
              Looks up a localized string similar to Cannot send email: Invalid or missing &quot;To&quot; addresses..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSerializeSchemaSinceItDoesnTHaveTheC">
            <summary>
              Looks up a localized string similar to Cannot serialize schema, since it doesn&apos;t have the current version..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetAPageAttributeToNull">
            <summary>
              Looks up a localized string similar to Cannot set a page attribute to null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetCategorySynoymValueToNullOrEmptyS">
            <summary>
              Looks up a localized string similar to Cannot set Category Synoym value to null or empty string..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetComponentElementPropertyToNullOnC">
            <summary>
              Looks up a localized string similar to Cannot set ComponentElement property to null on Component Content Unit..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetContentFreezeStateEndingTimeToPas">
            <summary>
              Looks up a localized string similar to Cannot set Content Freeze state ending time to past time..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetGlobalExportMissingExportName">
            <summary>
              Looks up a localized string similar to Cannot set Global Export: Missing export name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetLocaleOfCategoryTranslationToNull">
            <summary>
              Looks up a localized string similar to Cannot set locale of CategoryTranslation to null value..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetLocaleOnAPageThatIsAncestorOfAReg">
            <summary>
              Looks up a localized string similar to Cannot set locale on a Page that is ancestor of a Region Root Page.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetLocaleOnAPageUnderARegionRootPage">
            <summary>
              Looks up a localized string similar to Cannot set locale on a Page under a Region Root page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetLocaleOnLanguageRootPages">
            <summary>
              Looks up a localized string similar to Cannot set locale on language root pages.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetNullValueOnPublishingSystemSecuri">
            <summary>
              Looks up a localized string similar to Cannot set null value on Publishing System Security..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetNullValueToStructuredURLSettings">
            <summary>
              Looks up a localized string similar to Cannot set null value to Structured URL Settings..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetOverrideStylesheetForPageCreation">
            <summary>
              Looks up a localized string similar to Cannot set override stylesheet for Page Creation Rule: Invalid stylesheet name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetPermissionsOnAssetWithoutAssetPat">
            <summary>
              Looks up a localized string similar to Cannot set permissions on asset without asset path provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetPublishFolderPropertyInvalidLocat">
            <summary>
              Looks up a localized string similar to Cannot set &quot;PublishFolder&quot; property, invalid location, location not under &quot;pub&quot; folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetPublishFolderPropertyToNullOrEmpt">
            <summary>
              Looks up a localized string similar to Cannot set &quot;PublishFolder&quot; property to null or empty..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetSchemaAsNullOnPageCreationRule">
            <summary>
              Looks up a localized string similar to Cannot set Schema as null on Page Creation Rule..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetSchemaOfComponentContentUnitToNul">
            <summary>
              Looks up a localized string similar to Cannot set schema of Component content unit to null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetScreenWidthInvalidValue">
            <summary>
              Looks up a localized string similar to Cannot set screen width, invalid value..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetStylesheetFileNameProvidedNameIsI">
            <summary>
              Looks up a localized string similar to Cannot set stylesheet file name, provided name is invalid..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetTranslationForCategoryLocaleOfThe">
            <summary>
              Looks up a localized string similar to Cannot set translation for category. Locale of the translation is not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetViewNameForSchemaInvalidViewNameX">
            <summary>
              Looks up a localized string similar to Cannot set view name for schema: Invalid view name &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotSetWorkFlowDefinitionToBeNullOnPageC">
            <summary>
              Looks up a localized string similar to Cannot set WorkFlow Definition to be null on Page Creation Rules.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotShareBackEmbeddedComponentTheEmbedde">
            <summary>
              Looks up a localized string similar to Cannot share back embedded component. The embedded content was not from an existing component..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotShareBackEmbeddedComponentTheOrigina">
            <summary>
              Looks up a localized string similar to Cannot share back embedded component: The original component {0} is either removed or permenantly deleted..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotShareBackEmbeddedComponentTheTargetC">
            <summary>
              Looks up a localized string similar to Cannot share back embedded component: The target component doesn&apos;t have the same schema as the embedded content..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotShareBackEmbeddedComponentTheTargetC1">
            <summary>
              Looks up a localized string similar to Cannot share back embedded component: The target component is not checked out, or not assigned to current user..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotShareBackToComponentX0UserDoesnTFull">
            <summary>
              Looks up a localized string similar to Cannot share back to component {0}: User doesn&apos;t full access permission to the component..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotStartReplicationPubTargetDirectoryX0">
            <summary>
              Looks up a localized string similar to Cannot start replication, pub target directory &quot;{0}&quot; doesn&apos;t have a parent folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotStartReplicationsInvalidPublishingTa">
            <summary>
              Looks up a localized string similar to Cannot start replications or save replicator information, invalid publishing target directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotStartReplicationThePubTargetDirector">
            <summary>
              Looks up a localized string similar to Cannot start replication, the pub target directory &quot;{0}&quot; is not under &quot;pub&quot; folder.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUnassignAPageThatIsCheckedOut">
            <summary>
              Looks up a localized string similar to Cannot unassign a page that is checked out..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUnembdedComponentUserDoesnTHaveWrite">
            <summary>
              Looks up a localized string similar to Cannot unembded component: User doesn&apos;t have write access to root page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUnembedComponentElementRootPageNotPr">
            <summary>
              Looks up a localized string similar to Cannot unembed component element: Root page not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUnembedComponentTheComponentSSchemaN">
            <summary>
              Looks up a localized string similar to Cannot unembed component: The component&apos;s schema no longer exists anymore.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUnembedComponentUserDoesnTHaveTheNec">
            <summary>
              Looks up a localized string similar to Cannot unembed component: User doesn&apos;t have the necessary permissions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdatePageX0SSchemaPresentationField">
            <summary>
              Looks up a localized string similar to Cannot update Page {0}&apos;s Schema: Presentation Fields Group not found, this Page might have been corrupted due to manual editing..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdatePageX0SSchemaTheSchemaAlreadyH">
            <summary>
              Looks up a localized string similar to Cannot update Page {0}&apos;s Schema, the Schema already has an origin Page that is not this Page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdatePageX0SSchemaThisPageIsNotSync">
            <summary>
              Looks up a localized string similar to Cannot update Page {0}&apos;s Schema: this Page is not synched yet with its Schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdatePageX0SSchemaVersionNotSchemaV">
            <summary>
              Looks up a localized string similar to Cannot update Page {0}&apos;s schema version, not schema version parameter provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdateSchemaOfThisPageOnlyPagesWithP">
            <summary>
              Looks up a localized string similar to Cannot update Schema of this Page: Only Pages with Presentations are allowed to update its Schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdateSchemaOfThisPagePageIsNotCheck">
            <summary>
              Looks up a localized string similar to Cannot update Schema of this Page: Page is not checked in..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdateSchemaOfThisPagePageIsNotOnItS">
            <summary>
              Looks up a localized string similar to Cannot update Schema of this Page: Page is not on it&apos;s Schema&apos;s current version..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdateStylesheetFileNameStylesheetX0">
            <summary>
              Looks up a localized string similar to Cannot update stylesheet file name: Stylesheet &quot;{0}&quot; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUpdateWorkflowDefinintionUserIsNotAd">
            <summary>
              Looks up a localized string similar to Cannot update Workflow Definintion: User is not administrator..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CannotUseTextItemByTypeMethodToFindMultiSe">
            <summary>
              Looks up a localized string similar to Cannot use TextItemByType method to find multi-select type. Please use MultiSelectItemByContent instead..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ClaimedByUserInGroup">
            <summary>
              Looks up a localized string similar to Claimed by user in group.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ClonePageCannotBeNull">
            <summary>
              Looks up a localized string similar to Clone page cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ClonePageIsNotInTheCorrectTranslationWorkf">
            <summary>
              Looks up a localized string similar to Clone page is not in the correct translation Workflow.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ClonePageLocaleMustBeSet">
            <summary>
              Looks up a localized string similar to Clone page locale must be set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ClonePageMustBeMappedToAMasterpage">
            <summary>
              Looks up a localized string similar to Clone page must be mapped to a Masterpage..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CloneVersionIsAlreadyCurrent">
            <summary>
              Looks up a localized string similar to Clone version is already current..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CloneVersionMustBeSet">
            <summary>
              Looks up a localized string similar to Clone version must be set.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ContextMenuConfigTemplate">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;ContextMenuConfig Version=&quot;8.0&quot;&gt;
              &lt;Template&gt;
                &lt;Command Name=&quot;EmptyRecycleFolder&quot; IsDisplayed=&quot;True&quot; Caption=&quot;Empty Recycle Folder&quot; ImageFile=&quot;delete16.png&quot; /&gt;
                &lt;Command Name=&quot;New&quot; IsDisplayed=&quot;True&quot; HasSubMenu=&quot;True&quot; Caption=&quot;New&quot; ImageFile=&quot;new16.png&quot;&gt;
                  &lt;Command Name=&quot;Folder&quot; IsDisplayed=&quot;True&quot; Caption=&quot;Folder&quot; ImageFile=&quot;folder16.png&quot; /&gt;
                  &lt;separator Name=&quot;separator1&quot; IsDisplayed=&quot;True&quot; /&gt;
                  &lt;Command Name=&quot;Page&quot; IsDisplayed=&quot;True&quot; Caption [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CopyingPagesIntoRecycleFolderIsNotAllowed">
            <summary>
              Looks up a localized string similar to Copying pages into Recycle Folder is not allowed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CreatingPagesUnderRecycleFolderIsNotAllowe">
            <summary>
              Looks up a localized string similar to Creating pages under Recycle Folder is not allowed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CrossRegionCopyCannotContinueSinceTheFollo">
            <summary>
              Looks up a localized string similar to Cross-region copy cannot continue, since the following descendants of the tree node already had mappings under target region language &quot;{0}&quot;: {1}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentStateCannotBeNull">
            <summary>
              Looks up a localized string similar to Current State cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentStateIsRequiredForTransition">
            <summary>
              Looks up a localized string similar to Current state is required for Transition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserCannotCheckOutCheckedInPagesTha">
            <summary>
              Looks up a localized string similar to Current user cannot check out checked-in pages that were assigned to other users or group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserCannotRemovePageBecausePageIsAs">
            <summary>
              Looks up a localized string similar to Current User cannot remove Page, because Page is assigned to another user, the current user doesn&apos;t have the right to assign another user&apos;s pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveAccessOfPageX0">
            <summary>
              Looks up a localized string similar to Current User doesn&apos;t have access of Page &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio">
            <summary>
              Looks up a localized string similar to Current user doesn&apos;t have the necessary permission to check out pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio1">
            <summary>
              Looks up a localized string similar to Current user doesn&apos;t have the necessary permission to work with Asset Security..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio2">
            <summary>
              Looks up a localized string similar to Current user doesn&apos;t have the necessary permission to unassign this page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio3">
            <summary>
              Looks up a localized string similar to Current user doesn&apos;t have the necessary permissions to manage Content Units..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio4">
            <summary>
              Looks up a localized string similar to Current user doesn&apos;t have the necessary permission to manage Asset Security..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio5">
            <summary>
              Looks up a localized string similar to Current User doesn&apos;t have the necessary permission or access to check in Page {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserDoesnTHaveTheNecessaryPermissio6">
            <summary>
              Looks up a localized string similar to Current User doesn&apos;t have the necessary permissions or access rights to undo check out on Page {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserIsNotAdministratorThereforeCann">
            <summary>
              Looks up a localized string similar to Current user is not administrator, therefore cannot manager Custom Tabs settings..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserIsNotAllowedToPerformIncrementa">
            <summary>
              Looks up a localized string similar to Current User is not allowed to perform incremental publishes..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserIsNotAllowedToWorkWithPublishin">
            <summary>
              Looks up a localized string similar to Current user is not allowed to work with Publishing Target {0}, publish aborted..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentUserX0DoesnTHaveTheNecessaryPermiss">
            <summary>
              Looks up a localized string similar to Current user &quot;{0}&quot; doesn&apos;t have the necessary permissions to manage Publishing Profiles..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrentWorkStateMustMatchTheInitialStateFo">
            <summary>
              Looks up a localized string similar to Current Work State must match the initial state for transistion..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CurrnetUserIsNotAllowedToPerformPublishesP">
            <summary>
              Looks up a localized string similar to Currnet User is not allowed to perform publishes. Publish aborted..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.CustomActionMustBeCalledWithinAWriteSessio">
            <summary>
              Looks up a localized string similar to Custom Action must be called within a write session..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.DefaultWorkflowEmailTemplate">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Template&gt;
            	&lt;Subject&gt;%siteName% - %workflowName% Notification - %pageName% - %pageId%&lt;/Subject&gt;
            	&lt;Body&gt;
            		&lt;![CDATA[	
            		&lt;p&gt;&lt;strong&gt;Workflow Notification&lt;/strong&gt;&lt;/p&gt;
            		&lt;p&gt;&lt;em&gt;&lt;a href=&quot;mailto:%workingUserEmail%&quot;&gt;%workingUserName%&lt;/a&gt; &lt;/em&gt;advanced the item &lt;em&gt;&lt;a href=&quot;%siteUrl%?ID=%pageId%&quot;&gt;%pageName% (%pageId%)&lt;/a&gt; &lt;/em&gt;through the &quot;&lt;em&gt;%transitionName%&lt;/em&gt;&quot; transition in the &quot;&lt;em&gt;%workflowName%&lt;/em&gt;&quot; workflow, and assigned it to &lt;em&gt;&lt;a href=&quot;mailto:%nextUserEm [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.DeviceNotFound">
            <summary>
              Looks up a localized string similar to Device not found.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.DuplicatedExportNameX0DetectedCannotAddExp">
            <summary>
              Looks up a localized string similar to Duplicated export name &quot;{0}&quot; detected. Cannot add export..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ElementPropertiesNew">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;FieldProperties&gt;
            	&lt;Property eleIDs=&quot;5|6|8|12|13|15&quot; name=&quot;Expanded&quot; type=&quot;boolean&quot; /&gt;
            	&lt;Property eleIDs=&quot;3&quot; name=&quot;Height&quot; type=&quot;integer&quot;/&gt;
            	&lt;Property eleIDs=&quot;4&quot; name=&quot;Component&quot; type=&quot;page&quot;/&gt;
            	&lt;Property eleIDs=&quot;4&quot; name=&quot;CompTypes&quot; type=&quot;schemas&quot;/&gt;
            	&lt;Property eleIDs=&quot;4&quot; name=&quot;AutoEmbed&quot; type=&quot;boolean&quot; /&gt;
            	&lt;Property eleIDs=&quot;4&quot; name=&quot;WrappedUp&quot; type=&quot;boolean&quot; /&gt;
            	&lt;Property eleIDs=&quot;4&quot; name=&quot;AllowWrappingChange&quot; type=&quot;boolean&quot; /&gt;
            	&lt;Property eleIDs=&quot;5|15&quot; name=&quot;En [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ElementTypeMisMatchForCloningCannotCloneOt">
            <summary>
              Looks up a localized string similar to Element type mis-match for cloning. Cannot clone other types of element as list element.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ElementTypes">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Fields&gt;
              &lt;Field id=&quot;1&quot; name=&quot;Attribute&quot; type=&quot;string&quot; prefix=&quot;&quot; icon=&quot;new16&quot;/&gt;
              &lt;Field id=&quot;2&quot; EnumId=&quot;1&quot; name=&quot;Text Element&quot; type=&quot;string&quot; prefix=&quot;&quot; icon=&quot;document16&quot;/&gt;
              &lt;Field id=&quot;3&quot; EnumId=&quot;2&quot; name=&quot;XHTML Element&quot; type=&quot;dhtml&quot; prefix=&quot;dhtml&quot; icon=&quot;edit16&quot;/&gt;
              &lt;Field id=&quot;4&quot; EnumId=&quot;3&quot; name=&quot;Component&quot; type=&quot;&quot; prefix=&quot;xpowercomponent&quot; icon=&quot;component16&quot;/&gt;
              &lt;Field id=&quot;5&quot; EnumId=&quot;17&quot; name=&quot;List&quot; type=&quot;&quot; prefix=&quot;xpowerlist&quot; icon=&quot;listIcon16&quot;/&gt;
              &lt;Field id=&quot;6&quot; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.EmbeddingANullObjectIsNotAllowedForCompone">
            <summary>
              Looks up a localized string similar to Embedding a null object is not allowed for Components..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorChangesAuditTrailSettingsInvalidArchi">
            <summary>
              Looks up a localized string similar to Error changes Audit trail settings: Invalid archive directory..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorChangesAuditTrailSettingsInvalidArchi1">
            <summary>
              Looks up a localized string similar to Error changes Audit Trail settings: Invalid ArchiveMaxCount..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorConstructingPresentationFormatterType">
            <summary>
              Looks up a localized string similar to Error constructing Presentation Formatter Type &apos;{0}&apos;, default to built-in bootstrap 2.3.3 formatter: {1}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorInUrlMapBuilderNotARecognizedUpdateCo">
            <summary>
              Looks up a localized string similar to Error in Url map builder: Not a recognized update command.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorOccurredRetrievingStartingUserUserX0D">
            <summary>
              Looks up a localized string similar to Error occurred retrieving starting user. User &quot;{0}&quot; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorOccurredStartingReplicationImp">
            <summary>
              Looks up a localized string similar to Error occurred starting replication impersonation for File Replication Target &quot;{0}&quot;: {1}..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorOccurredStartingReplicationOnFileRepl">
            <summary>
              Looks up a localized string similar to Error occurred starting replication on File Replication Target &quot;{0}&quot;: {1}..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorOccurredStartingReplicationOnRemoteRe">
            <summary>
              Looks up a localized string similar to Error occurred starting replication on Remote Replication Target &quot;{0}&quot;: {1}..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorOccurredWithImpersonationForAccessTar">
            <summary>
              Looks up a localized string similar to Error occurred with impersonation for access target location: .
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorWhenAddingUrlPathPathAlreadyExists">
            <summary>
              Looks up a localized string similar to Error when adding Url path: Path already exists.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorWhenDeletingUrlPathOriginalPathCannot">
            <summary>
              Looks up a localized string similar to Error when deleting Url path: Original path cannot be null or empty.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorWhenMovingUrlPathNewPathAlreadyExists">
            <summary>
              Looks up a localized string similar to Error when moving Url path: New path already exists.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorWhenMovingUrlPathOriginalPathCannotBe">
            <summary>
              Looks up a localized string similar to Error when moving Url path: Original path cannot be null or empty.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ErrorWhenUpdatingUrlPathNewPathAlreadyExis">
            <summary>
              Looks up a localized string similar to Error when updating Url path: New path already exists.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.FieldIsRequired">
            <summary>
              Looks up a localized string similar to Field is Required.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.FinalizationUserCannotBeNull">
            <summary>
              Looks up a localized string similar to Finalization user cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.GlobalVariablesCannotBeChangedByNonAdminis">
            <summary>
              Looks up a localized string similar to Global Variables cannot be changed by non-administrative users..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.IllegalSchemaCannotHave2AttributesWithTheS">
            <summary>
              Looks up a localized string similar to Illegal Schema: Cannot have 2 attributes with the same name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.IngeniuxCMSSiteSetup">
            <summary>
              Looks up a localized string similar to Ingeniux CMS Site Setup.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidActionCannotRetrieveMoreThan1024Ent">
            <summary>
              Looks up a localized string similar to Invalid action, cannot retrieve more than 1024 entities by ids in one session..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidAdditionalLocationSourceDirectoryX0">
            <summary>
              Looks up a localized string similar to Invalid or non-accessible Additional Location source directory &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidAttributeNameX0">
            <summary>
              Looks up a localized string similar to Invalid Element/Attribute name &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidCategoryNameCannotBeNull">
            <summary>
              Looks up a localized string similar to Invalid Category: Name cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidCategorySynonymCannotHaveEmptyValue">
            <summary>
              Looks up a localized string similar to Invalid Category Synonym: Cannot have empty value..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidCMSDesignTimePathX0CannotLocateXMLD">
            <summary>
              Looks up a localized string similar to Invalid CMS Design-time path &quot;{0}&quot;, cannot locate XML directory below it.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidComponentFieldValueTargetPageDoesnT">
            <summary>
              Looks up a localized string similar to Invalid component field value: Target page doesn&apos;t exist.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInCustomTabX0ResourceIDCannotBe">
            <summary>
              Looks up a localized string similar to Invalid data in Custom Tab {0}: Resource ID cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInCustomTabX0UrlCannotBeNull">
            <summary>
              Looks up a localized string similar to Invalid data in Custom Tab {0}: Url cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInPublishingTaskMonitorX0TaskID">
            <summary>
              Looks up a localized string similar to Invalid Data in Publishing Task Monitor {0}: Task ID cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInReplicatorPublishingTargetCan">
            <summary>
              Looks up a localized string similar to Invalid data in Replicator: Publishing Target cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInReplicatorX0">
            <summary>
              Looks up a localized string similar to Invalid data in Replicator: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInTinyMCEConfigDefaultProfileCa">
            <summary>
              Looks up a localized string similar to Invalid data in Tiny MCE Config: Default profile cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInTinyMCEConfigTemplateProfileC">
            <summary>
              Looks up a localized string similar to Invalid data in Tiny MCE Config: Template profile cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInTreeContextMenuConfigurationD">
            <summary>
              Looks up a localized string similar to Invalid data in Tree Context Menu configuration: Default Profile cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInTreeContextMenuConfigurationT">
            <summary>
              Looks up a localized string similar to Invalid data in Tree Context Menu configuration: Template Profile cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInUrlMapPublishingTargetCannotB">
            <summary>
              Looks up a localized string similar to Invalid data in UrlMap: Publishing Target cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInUrlMapPublishingTargetDataErr">
            <summary>
              Looks up a localized string similar to Invalid data in UrlMap: Publishing Target data error: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInUrlMapSURLSettingsCannotBeNul">
            <summary>
              Looks up a localized string similar to Invalid data in UrlMap: SURL Settings cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidDataInUrlMapUrlMapCannotBeNull">
            <summary>
              Looks up a localized string similar to Invalid data in UrlMap: UrlMap cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidElementName">
            <summary>
              Looks up a localized string similar to Invalid Element Name.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidElementNameMustBeSpecified">
            <summary>
              Looks up a localized string similar to Invalid element: Name must be specified..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidExportEntryName">
            <summary>
              Looks up a localized string similar to Invalid Export entry name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidExportsValueExportEntriesAreNotWell">
            <summary>
              Looks up a localized string similar to Invalid exports value: Export entries are not well-formed xml elements..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidFieldTypeX0CannotLocateItInFieldDef">
            <summary>
              Looks up a localized string similar to Invalid Field Type &quot;{0}&quot;, Cannot locate it in Field Definitions.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidLinkTargetPageTargetPageDoesnTExist">
            <summary>
              Looks up a localized string similar to Invalid link target page: Target page doesn&apos;t exist.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageCreationRuleRuleMustBeAccessibl">
            <summary>
              Looks up a localized string similar to Invalid Page Creation Rule: Rule must be accessible by at least one user or group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageCreationRuleRuleMustHaveAtLeast">
            <summary>
              Looks up a localized string similar to Invalid Page Creation Rule: Rule must have at least one parent page..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageCreationRuleSchemaNotProvided">
            <summary>
              Looks up a localized string similar to Invalid Page Creation Rule: Schema not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageCurrentVersionOfThePageNotIniti">
            <summary>
              Looks up a localized string similar to Invalid Page: Current version of the page not initialized..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageFieldElementCannotIdentifyField">
            <summary>
              Looks up a localized string similar to Invalid Page Field Element, Cannot identify field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageFieldType">
            <summary>
              Looks up a localized string similar to Invalid page field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPagePresentationContainerIdNotSet">
            <summary>
              Looks up a localized string similar to Invalid Page Presentation: Container Id not set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageSizePageSizeMustBeUnder1024">
            <summary>
              Looks up a localized string similar to Invalid Page Size, Page Size must be under 1024.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageVersionSchemaIdMustBeProvided">
            <summary>
              Looks up a localized string similar to Invalid page version: Schema id must be provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidPageVersionSchemaVersionMustBeGreat">
            <summary>
              Looks up a localized string similar to Invalid page version: Schema version must be greater than 0..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaCurrentVersionDoesnTExist">
            <summary>
              Looks up a localized string similar to Invalid Schema: Current version doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaDeclarationCannotLocateFieldT">
            <summary>
              Looks up a localized string similar to Invalid schema declaration, cannot locate field type.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaDocumentInvalidNumberOfAttrib">
            <summary>
              Looks up a localized string similar to Invalid schema document: Invalid number of attribute declarations..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaFieldsCollectionForCreatingGr">
            <summary>
              Looks up a localized string similar to Invalid schema fields collection for creating Group element: fields collection cannot contain GroupStart or GroupEnd types..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaRootNameX0">
            <summary>
              Looks up a localized string similar to Invalid Schema Root Name &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaVersionEitherViewNameOrStyles">
            <summary>
              Looks up a localized string similar to Invalid schema version: Either view name or stylesheet must be specified for a page schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaVersionNotAssociatedWithAnySc">
            <summary>
              Looks up a localized string similar to Invalid schema version: not associated with any schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidSchemaVersionRootNameNotProvided">
            <summary>
              Looks up a localized string similar to Invalid schema version: Root name not provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidTargetLocationForFileReplicationTarget">
            <summary>
              Looks up a localized string similar to Invalid Target Location for File Replication Target: Directory &quot;{0}&quot; doesn&apos;t exist.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidTimeValueNumberOfMillisecondsCannot">
            <summary>
              Looks up a localized string similar to Invalid time value: Number of milliseconds cannot be less than 0..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidUserOnSchemaFieldFavorite">
            <summary>
              Looks up a localized string similar to Invalid User on Schema Field Favorite..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidUserUserIdMustBeProvided">
            <summary>
              Looks up a localized string similar to Invalid User: User Id must be provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.InvalidWorldViewSettoingWorkstateIndexX0">
            <summary>
              Looks up a localized string similar to Invalid WorldView settoing Workstate index &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.LingualMappingDefinitions">
            <summary>
              Looks up a localized string similar to   &lt;Definitions&gt;
               &lt;Definition Description=&quot;The Pages Map&quot; FullName=&quot;Map&quot; TagName=&quot;MP&quot; /&gt;
               &lt;Definition Description=&quot;The Page Versions Map&quot; FullName=&quot;VersionMap&quot; TagName=&quot;VMP&quot; /&gt;
               &lt;Definition Description=&quot;The master page XID or version ID&quot; FullName=&quot;MasterPage&quot; TagName=&quot;M&quot; /&gt;
               &lt;Definition Description=&quot;The master page language at the time of initiation&quot; FullName=&quot;MasterPageLanguage&quot; TagName=&quot;ML&quot; /&gt;
               &lt;Definition Description=&quot;The clone page language at the time of initiation&quot; FullName=&quot;ClonePa [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.MasterPageCannotBeNull">
            <summary>
              Looks up a localized string similar to Master page cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.MasterPageLocaleMustBeSet">
            <summary>
              Looks up a localized string similar to Master page locale must be set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.MobileDeviceManagerAlreadyInitializedAtX0">
            <summary>
              Looks up a localized string similar to Mobile Device Manager already initialized at &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.MoveingRootOrRecycleFolderIsNotAllowed">
            <summary>
              Looks up a localized string similar to Moving or Copying Root or Recycle Folder is not allowed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NextGroupPropertyIsRequiredCannotSetNullVa">
            <summary>
              Looks up a localized string similar to Next Group property is required. Cannot set null value to this property..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NextStateCannotBeNull">
            <summary>
              Looks up a localized string similar to Next state cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NextWorkstateIsRequiredForTranstion">
            <summary>
              Looks up a localized string similar to Next workstate is required for Transtion..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NonAdministratorUserCannotPerformContentFr">
            <summary>
              Looks up a localized string similar to Non-administrator user cannot perform Content Freeze..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NotAllClonedPagesAreInAProjectCompleteStat">
            <summary>
              Looks up a localized string similar to Not all cloned pages are in a &quot;Project Complete&quot; State..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NoValidReadyForTranslationTransistion">
            <summary>
              Looks up a localized string similar to No valid &quot;Ready for Translation&quot; transistion..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NullOrEmptyExportName">
            <summary>
              Looks up a localized string similar to Null or empty export name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.NullOrEmptyExportQuery">
            <summary>
              Looks up a localized string similar to Null or empty export query..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.OnlyAdministratorCanDirectlyManipulatePage">
            <summary>
              Looks up a localized string similar to Only administrator can directly manipulate page content without checkout and assignment..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.OnlyAdministratorsCanChangeCustomLocales">
            <summary>
              Looks up a localized string similar to Only administrators can change Custom Locales..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.OperatingUserMustBeAnAdministratorToChange">
            <summary>
              Looks up a localized string similar to Operating user must be an administrator to change settings..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.OperatingUserMustBeSet">
            <summary>
              Looks up a localized string similar to Operating User must be set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PageCannotBeNull">
            <summary>
              Looks up a localized string similar to Page cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PageMustBeCheckedOutToBeChanged">
            <summary>
              Looks up a localized string similar to Page must be checked out and assigned to current user to be changed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PageToCopyMustBeALingualRoot">
            <summary>
              Looks up a localized string similar to Page to copy must be a lingual root.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PermissionContainsNullOrEmptyUserGroupId">
            <summary>
              Looks up a localized string similar to Permission contains null or empty User Group Id..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PresentationContentUnitAddEventErrorEventA">
            <summary>
              Looks up a localized string similar to Presentation Content Unit Add Event error: Event args is null, or Content Unit, Content Unit Element is null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.PublishingTargetsInformationNotSet">
            <summary>
              Looks up a localized string similar to Publishing Targets information not set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_cannotManuallyCompleteListStep">
            <summary>
              Looks up a localized string similar to Cannot complete a List Step manually. The List Step will become completed, when all steps are completed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_buildDeps">
            <summary>
              Looks up a localized string similar to Calculating Dependencies.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_buildUrlMap">
            <summary>
              Looks up a localized string similar to Building url map for structured url system.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copydocs">
            <summary>
              Looks up a localized string similar to Copying &quot;Documents&quot; directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copyErrors">
            <summary>
              Looks up a localized string similar to Copying &quot;Errors&quot; Directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copyimages">
            <summary>
              Looks up a localized string similar to Copying &quot;Images&quot; directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copymedia">
            <summary>
              Looks up a localized string similar to Copying &quot;Media&quot; directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copyPrebuilt">
            <summary>
              Looks up a localized string similar to Copying &quot;Prebuilt&quot; directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copysettings">
            <summary>
              Looks up a localized string similar to Applying settings to publishing target.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_copyss">
            <summary>
              Looks up a localized string similar to Copying XSLT Stylesheets.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_deletePubFolder">
            <summary>
              Looks up a localized string similar to Cleaning up publishing target directory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_pub">
            <summary>
              Looks up a localized string similar to Publishing Pages.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializelingual">
            <summary>
              Looks up a localized string similar to Generate &quot;LingualMapping.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializeoption">
            <summary>
              Looks up a localized string similar to Generate &quot;Options.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializepubtgt">
            <summary>
              Looks up a localized string similar to Generate &quot;publishingTargets.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializeref">
            <summary>
              Looks up a localized string similar to Generate &quot;Reference.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializerefmap">
            <summary>
              Looks up a localized string similar to Generate &quot;ReferencesMapping.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializesetting">
            <summary>
              Looks up a localized string similar to Generate &quot;settings.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializetaxassoc">
            <summary>
              Looks up a localized string similar to Generate &quot;TaxonomyAssociations.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_desc_serializetaxtree">
            <summary>
              Looks up a localized string similar to Generate &quot;TaxonomyTree.xml&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_err_badStepId">
            <summary>
              Looks up a localized string similar to Cannot advance step. Step with ID &quot;{0}&quot; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_err_cannotManuallyCompleteTask">
            <summary>
              Looks up a localized string similar to Cannot complete task manually. The task will be completed when all steps are completed.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_err_cannotStartStep">
            <summary>
              Looks up a localized string similar to Cannot advance step &quot;{0}&quot;, because it is already started or completed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_err_lastStepDidntComplete">
            <summary>
              Looks up a localized string similar to Cannot advance Task step, since all on-going step is not yet completed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.pubstatus_pubPage">
            <summary>
              Looks up a localized string similar to Publishing page &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.RemoteFileSyncSourceProviderCanOnlyActAsSo">
            <summary>
              Looks up a localized string similar to RemoteFileSyncSourceProvider can only act as Source Synch Provider..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ReplicationTargetTypes">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;ReplicationTargetTypes&gt;
              &lt;TargetType Name=&quot;File Replication Target&quot; Type=&quot;FileReplicationTarget&quot;/&gt;
              &lt;TargetType Name=&quot;Secure FTP Replication Target&quot; Type=&quot;SFTPReplicationTarget&quot;/&gt;
              &lt;TargetType Name=&quot;FTP/SSL Replication Target&quot; Type=&quot;FTPSReplicationTarget&quot;/&gt;
              &lt;TargetType Name=&quot;FTP Replication Target&quot; Type=&quot;FTPReplicationTarget&quot;/&gt;
            &lt;/ReplicationTargetTypes&gt;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.RollbackFailure_LastVersionNotFound">
            <summary>
              Looks up a localized string similar to Cannot perform Rollback on page {0}: The last version {1} doesn&apos;t exist anymore..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SchemaRootNameCannotBeNullOrEmptyAndMustBe">
            <summary>
              Looks up a localized string similar to Schema root name cannot be null or empty, and must be valid XML Element name..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SchemaWithNoViewNameAttributeNeedToHaveSty">
            <summary>
              Looks up a localized string similar to Schema with no ViewName attribute, need to have stylesheet speficied..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SearchFieldExceptionFieldNameMissing">
            <summary>
              Looks up a localized string similar to SearchFieldException Field Name Missing.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SitePathX0DoesnTExist">
            <summary>
              Looks up a localized string similar to Site path &quot;{0}&quot; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SiteRootPageAndRecycleFolderCannotBeRemove">
            <summary>
              Looks up a localized string similar to Site Root Page and Recycle Folder cannot be removed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.SourceLanguageMustBeSet">
            <summary>
              Looks up a localized string similar to Source Language must be set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.StartingWorkstateCannotBeNull">
            <summary>
              Looks up a localized string similar to Starting Workstate cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.StylesheetDoesnTExistForGivenSchema">
            <summary>
              Looks up a localized string similar to Stylesheet doesn&apos;t exist for given schema..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TargetLanguageMustBeSet">
            <summary>
              Looks up a localized string similar to Target Language must be set..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TaxonomyAssociationsDefinition">
             <summary>
               Looks up a localized string similar to &lt;Definitions&gt;
              &lt;Definition TagName=&quot;A&quot; FullName=&quot;Association&quot; Description=&quot;The Association between category and page&quot;/&gt;
              &lt;Definition TagName=&quot;C&quot; FullName=&quot;CategoryID&quot; Description=&quot;The category id&quot;/&gt;
              &lt;Definition TagName=&quot;P&quot; FullName=&quot;Page XID&quot; Description=&quot;The page XID associated with certain category&quot;/&gt;
              &lt;Definition TagName=&quot;LUD&quot; FullName=&quot;LastUpdatedDate&quot; Description=&quot;Last Updated Date&quot;/&gt;
              &lt;Definition TagName=&quot;LUU&quot; FullName=&quot;LastUpdateUser&quot; Description=&quot;Last Update User&quot;/&gt;
            &lt;/Definitions&gt;.
             </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TaxonomyTreeDefinitions">
            <summary>
              Looks up a localized string similar to &lt;Definitions&gt;
             &lt;Definition Description=&quot;The CategoryNode element tag&quot; FullName=&quot;Category&quot; TagName=&quot;C&quot; /&gt;
             &lt;Definition Description=&quot;The internal ID of the Category&quot; FullName=&quot;ID&quot; TagName=&quot;ID&quot; /&gt;
             &lt;Definition Description=&quot;The ID for the category that is imported form another source (Optional)&quot; FullName=&quot;External ID&quot; TagName=&quot;EID&quot; /&gt;
             &lt;Definition Description=&quot;The name of the Category&quot; FullName=&quot;Name&quot; TagName=&quot;N&quot; /&gt;
             &lt;Definition Description=&quot;The description of the category&quot; FullName=&quot;Description&quot; TagN [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TheAssignedUserIsNotAMemeberOfTheNextWorkf">
            <summary>
              Looks up a localized string similar to The assigned user is not a memeber of the next Workflow group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TheFollowingPagesAreEitherNotCheckedInOrDo">
            <summary>
              Looks up a localized string similar to The following pages are either not checked in, or don&apos;t have any versions. Cross region copy will be aborted: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TheFollowingReferencedPagesCannotNotBeCopi">
            <summary>
              Looks up a localized string similar to The following referenced pages cannot not be copied, because their parent pages either don&apos;t have corresponding lingual mapping in the target region, or their clone pages don&apos;t exist: {0}.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TheNextWorkflowGroupIsNotAllowedToAdvanceT">
            <summary>
              Looks up a localized string similar to The next workflow group is not allowed to advance the Workflow..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.ThereAreNoPagesChangesSinceLastPublishPubl">
            <summary>
              Looks up a localized string similar to There were no pages and publishing related meta data changed since last publish. Incremental publish will not be carried out..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TheUserGroupAdministratorsCannotBeRemoved">
            <summary>
              Looks up a localized string similar to The UserGroup &quot;Administrators&quot; cannot be removed..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.TransitionCannotBeNull">
            <summary>
              Looks up a localized string similar to Transition cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UrlMap_Item_InvalidInput">
            <summary>
              Looks up a localized string similar to Invalid argument to Item in UrlMap.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.urlmapBuilderInitError">
            <summary>
              Looks up a localized string similar to Error initializing UrlMapBuilder: .
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.urlMapBuildError">
            <summary>
              Looks up a localized string similar to Error occurred while building url map: .
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UrlMapFactory_FileNotFound">
            <summary>
              Looks up a localized string similar to No UrlMap.xml file found related to Pub Target.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UrlMapFactory_Item_InvalidInput">
            <summary>
              Looks up a localized string similar to Invalid argument to Item in UrlMapFactory.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UrlMapFactory_PathNotFound">
            <summary>
              Looks up a localized string similar to XML Path to site for UrlMapFactory Not Found.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserCannotBeNull">
            <summary>
              Looks up a localized string similar to User cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserDoesNotHaveThePermissionsToEditWorkflo">
            <summary>
              Looks up a localized string similar to User does not have the permissions to edit Workflow Action..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserGroupCannotBeNull">
            <summary>
              Looks up a localized string similar to UserGroup cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserHasToBeAnAdminstratorToEditTheTranslat">
            <summary>
              Looks up a localized string similar to User has to be an adminstrator to edit the translation project..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserMustBeAnAdminInOrderToEditLingualVersi">
            <summary>
              Looks up a localized string similar to User must be an admin in order to edit Lingual Version Map.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserMustBeAnAdministratorToEditTheHandout">
            <summary>
              Looks up a localized string similar to User must be an administrator to edit the Handout..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserMustBeAnAdminToEditALingualMap">
            <summary>
              Looks up a localized string similar to User must be an admin to edit a Lingual Map..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserMustBeAnAdminToEditLingualGroup">
            <summary>
              Looks up a localized string similar to User must be an admin to edit Lingual Group..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0CannotRemoveItselfFromCMSRepository">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; cannot remove itself from CMS repository..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToAccessSchemaF">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to access schema favorites.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateFil">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate File Replication Targets.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulatePub">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate Publishing Task Monitors.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateThe">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate the Toolbar configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateThe1">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate the Tree Context Menu configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateThe2">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate the TinyMCE configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateThe3">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate the Custom Tab configuration.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateThe4">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate the Replicator.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesNotHavePermissionToManipulateUrl">
            <summary>
              Looks up a localized string similar to User {0} does not have permission to manipulate UrlMaps.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToA">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to add user groups..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToC">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to create users in CMS..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToC1">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to change CMS settings..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToC2">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to change page creation rule settings in pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToC3">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to change schema versions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToM">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to manage categories..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToM1">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to perform actions on pages..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToR">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to remove User Groups from CMS..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionsToW">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permissions to work with schemas..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionToCh">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permission to change Page Creation Rules..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionToCr">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permission to create or update page versions..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionToUp">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permission to update WorldView setetings..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveTheNecessaryPermissionToWo">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the necessary permission to work with page security..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveThePermissionsToChangePublishing">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the permissions to change the Publishing System..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.UserX0DoesnTHaveThePermissionsToRemoveUser">
            <summary>
              Looks up a localized string similar to User &quot;{0}&quot; doesn&apos;t have the permissions to remove users from CMS..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.VersionMapOwnerCannotBeNull">
            <summary>
              Looks up a localized string similar to Version Map Owner cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WhenWorkflowRequiredIsSetToTrueWorkflowDef">
            <summary>
              Looks up a localized string similar to When WorkflowRequired is set to True, Workflow Definition must be provided..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowActionDoesNotContainTheAttributeX0">
            <summary>
              Looks up a localized string similar to Workflow action does not contain the attribute: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowCannotBeNull">
            <summary>
              Looks up a localized string similar to Workflow cannot be null..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowDefinitionCannotBeNull">
            <summary>
              Looks up a localized string similar to Workflow Definition cannot be null.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowDefinitionNameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Workflow Definition name cannot be null or empty..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowDefintionMustContainAtLeastOneTran">
            <summary>
              Looks up a localized string similar to Workflow Defintion must contain at least one transition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkflowDoesNotHaveAProjectCompleteWorkSta">
            <summary>
              Looks up a localized string similar to Workflow does not have a &quot;Project Complete&quot; Work State transition..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkStateNameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Work State name cannot be null or empty..
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.WorkStateNameHasToBeUnique">
            <summary>
              Looks up a localized string similar to WorkState Name has to be unique.
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.Properties.Resources.xmlDirNotExist">
            <summary>
              Looks up a localized string similar to Xml directory &quot;{0}&quot; doesn&apos;t exist.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.RavenDB.Indexes.CategoriesByNames">
            <summary>
            This index index all of the category names, including translated names and synonym names, include locale information
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.RavenDB.Indexes.CrossReferences">
            <summary>
            Create cross reference index entries
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.RavenDB.Indexes.PagesByUser">
            <summary>
            This Index is not exhaustive, it only covers pages that are assigned to a user. There is no "non-assigned pages" return.
            </summary>
        </member>
        <member name="T:Ingeniux.CMS.RavenDocumentSession">
            <summary>
            This override class expose the protected member of document session to allow further level of manipulations
            Used by UserSession to track captured objects, or manipulate them manually
            </summary>
        </member>
        <member name="M:Ingeniux.CMS.RavenDocumentSession.SaveChangesAndFinalize">
            <summary>
            This is the method must be called to close a session and prevent it from taking anymore actions
            Once it is called, it cannot be called again. Session itself will also be disposed.
            
            This method should be saved as the very last method to call on a session. All queries and loads should be done before this one
            </summary>
        </member>
        <member name="P:Ingeniux.CMS.RavenDocumentSession.RanOutOfReadsQuota">
            <summary>
            Use this property to make sure number of request is 1 short of max requests allowed
            Any full list loading or query must check this one to decide if to open up a new one
            </summary>
        </member>
    </members>
</doc>
